Search.setIndex({"alltitles": {"3D Printing Files": [[164, null]], "3D-Printed Parts": [[151, "d-printed-parts"]], "API": [[147, null]], "Accessing Pins via Hardware (for Servos) and Using UART Pin for Communication": [[152, "accessing-pins-via-hardware-for-servos-and-using-uart-pin-for-communication"]], "Actions": [[4, null]], "Active": [[5, null]], "Alarms": [[169, "alarms"]], "Aluminium Extrusions and Tubes": [[151, "aluminium-extrusions-and-tubes"]], "Animal Procedures": [[170, null]], "ArCOM": [[67, null]], "ArduinoTypes": [[68, null]], "AreaActive": [[6, null]], "Assembly Instructions": [[150, null]], "BaseEventName": [[42, null]], "BaseMessage": [[72, null]], "BehaviorWindow": [[146, null]], "Behavioral Box": [[151, "behavioral-box"]], "Biweekly": [[175, "biweekly"]], "Bpod": [[25, null]], "Bpod + Ports": [[151, "bpod-ports"]], "BpodBase": [[27, null]], "BpodCOMProtocol": [[29, null]], "BpodCOMProtocolModules": [[31, null]], "BpodIO": [[33, null]], "BpodModule": [[62, null]], "BpodModules": [[64, null]], "Build-It-Yourself": [[178, "build-it-yourself"]], "CNC Machined Parts": [[151, "cnc-machined-parts"]], "Cable organizer": [[164, "cable-organizer"]], "Calibrate and Test Animal Detection": [[174, null]], "Calibrate and Test Corridor Components": [[171, null]], "Camera Mount": [[164, "camera-mount"]], "ChangeHourRun": [[2, null]], "Changing Preferences": [[152, "changing-preferences"]], "ChannelName": [[36, null]], "ChannelType": [[37, null]], "Channels": [[38, null]], "Check the token of an existing bot": [[159, "check-the-token-of-an-existing-bot"]], "Checks Performed After the Task Finishes": [[169, "checks-performed-after-the-task-finishes"]], "Checks Performed When a Subject is Detected, and the Task is Prepared": [[169, "checks-performed-when-a-subject-is-detected-and-the-task-is-prepared"]], "Checks Performed While the Task is Running": [[169, "checks-performed-while-the-task-is-running"]], "Classes": [[147, "classes"]], "Code Organization": [[172, "code-organization"]], "Code Repository": [[163, null]], "Color": [[7, null]], "Conditions": [[124, null]], "Configure Remote Access": [[158, null]], "Connectors for tubes and cages": [[164, "connectors-for-tubes-and-cages"]], "Corridor Files": [[164, "corridor-files"]], "Create New Subjects": [[180, null]], "Create Real-Time Plots": [[176, null]], "Create a Telegram Bot": [[159, null]], "Create a Training Protocol": [[172, null]], "Create an Alias and Run the Training Village": [[152, "create-an-alias-and-run-the-training-village"]], "Creating a Python Environment and Installing pip Libraries": [[152, "creating-a-python-environment-and-installing-pip-libraries"]], "Customizing Your Training Protocol": [[172, "customizing-your-training-protocol"]], "Cycle": [[8, null]], "DATA": [[168, "data"]], "Daily": [[175, "daily"]], "DataTable": [[9, null]], "DataType": [[69, null]], "DebugMessage": [[74, null]], "Detection in the Behavioral Box": [[174, "detection-in-the-behavioral-box"]], "Detection in the Corridor": [[174, "detection-in-the-corridor"]], "Devices": [[147, "devices"]], "Door System": [[164, "door-system"]], "Electronics": [[151, "electronics"]], "EndTrial": [[76, null]], "ErrorMessage": [[78, null]], "EventName": [[44, null]], "EventOccurrence": [[80, null]], "EventResume": [[82, null]], "EventsPositions": [[39, null]], "Examples of Code Structure": [[172, "examples-of-code-structure"]], "FAQ": [[149, null]], "GUI Overview": [[168, null]], "Getting Started": [[178, null]], "GlobalCounters": [[126, null]], "GlobalTimers": [[128, null]], "Gui": [[147, "gui"]], "Hardware": [[46, null]], "Hardware Connections": [[156, null]], "Homecages": [[151, "homecages"]], "How Does It Work?": [[154, "how-does-it-work"], [161, null]], "How to Build It": [[153, null]], "I2C Communication": [[152, "i2c-communication"]], "In Both Cases": [[179, "in-both-cases"]], "Info": [[10, null]], "Initial Configuration": [[160, null]], "Initial Settings": [[177, null]], "InputName": [[49, null]], "Install Training Village": [[152, "install-training-village"]], "Installing Needed Libraries": [[152, "installing-needed-libraries"]], "Interrogate the system": [[169, "interrogate-the-system"]], "Launch Raspberry Pi OS for the First Time": [[152, "launch-raspberry-pi-os-for-the-first-time"]], "Launching the System": [[178, "launching-the-system"]], "List of Parts": [[151, null]], "MAIN": [[168, "main"]], "MONITOR": [[168, "monitor"]], "Maintenance": [[175, null]], "Make the bot triggers the alarms": [[159, "make-the-bot-triggers-the-alarms"]], "MessageParser": [[84, null]], "Monthly": [[175, "monthly"]], "NonBlockingSocketReceive": [[54, null]], "NonBlockingStreamReader": [[57, null]], "Normal Cycle for an Animal Session": [[179, "normal-cycle-for-an-animal-session"]], "Occasionally": [[175, "occasionally"]], "Open Source": [[154, "open-source"], [161, "open-source"]], "Option A: The Subject Leaves Before the Task\u2019s Maximum Time": [[179, "option-a-the-subject-leaves-before-the-tasks-maximum-time"]], "Option B: The Subject Stays in the Box Until the Maximum Time": [[179, "option-b-the-subject-stays-in-the-box-until-the-maximum-time"]], "Other": [[147, "other"]], "OutputChannel": [[52, null]], "Preliminary Steps": [[178, "preliminary-steps"]], "Project Structure": [[172, "project-structure"]], "Pybpodapi": [[147, "pybpodapi"]], "RFID": [[151, "rfid"]], "Raspberry + Cams": [[151, "raspberry-cams"]], "Reader": [[140, null]], "Receive and Respond to Telegram Alarms": [[169, null]], "ReceiveMessageHeader": [[107, null]], "Resources": [[165, null]], "SETTINGS": [[168, "settings"]], "Saved Data": [[173, null]], "Schedule Backups": [[155, null]], "Screen": [[151, "screen"]], "Screen Settings": [[152, "screen-settings"]], "ScreenActive": [[11, null]], "Send Heartbeat Signals to a Remote Device": [[157, null]], "SendMessageHeader": [[109, null]], "Serial Communication": [[152, "serial-communication"]], "Session": [[119, null]], "SessionInfo": [[86, null]], "Setting": [[15, null]], "Settings": [[16, null], [18, null]], "SoftcodeOccurrence": [[88, null]], "Software Installation": [[152, null]], "Sound": [[151, "sound"]], "State": [[12, null]], "StateMachine": [[122, null]], "StateMachineBase": [[131, null]], "StateMachineBuilder": [[133, null]], "StateMachineRunner": [[136, null]], "StateOccurrence": [[90, null]], "StateTransition": [[92, null]], "StderrBuffer": [[111, null]], "StderrMessage": [[94, null]], "StdoutBuffer": [[113, null]], "StdoutMessage": [[96, null]], "StreamsWrapper": [[120, null]], "Subject Checks Performed Twice a Day": [[169, "subject-checks-performed-twice-a-day"]], "SuperEnum": [[13, null]], "System Checks Performed Every Hour": [[169, "system-checks-performed-every-hour"]], "System ISO Image": [[162, null]], "System State Machine": [[179, null]], "System usage": [[154, "system-usage"], [161, "system-usage"]], "TASKS": [[168, "tasks"]], "Tasks": [[172, "tasks"]], "Temperature or Weight Sensor Connection Error": [[166, null], [167, "temperature-or-weight-sensor-connection-error"]], "Test a Training Protocol": [[181, null]], "The Behavioral Box": [[154, "the-behavioral-box"], [161, "the-behavioral-box"]], "The Controller": [[154, "the-controller"], [161, "the-controller"]], "The Corridor": [[154, "the-corridor"], [161, "the-corridor"]], "The FollowTheLight Task": [[172, "the-followthelight-task"]], "The Housing": [[154, "the-housing"], [161, "the-housing"]], "The after_trial() Method": [[172, "the-after-trial-method"]], "The close() Method": [[172, "the-close-method"]], "The create_trial() Method": [[172, "the-create-trial-method"]], "The default_training_settings() Method": [[172, "the-default-training-settings-method"]], "The optional gui_tabs() Method": [[172, "the-optional-gui-tabs-method"]], "The start() Method": [[172, "the-start-method"]], "The update_training_settings() Method": [[172, "the-update-training-settings-method"]], "Training": [[19, null]], "Training Protocol": [[172, "training-protocol"]], "Training Village HAT": [[151, "training-village-hat"]], "Trial": [[98, null]], "Troubleshooting": [[167, null]], "Udev Rules for Consistent USB Device Naming": [[152, "udev-rules-for-consistent-usb-device-naming"]], "UntaggedMessage": [[100, null]], "Updating the System": [[152, "updating-the-system"]], "Use an Existing Training Protocol": [[182, null]], "User Guide": [[183, null]], "ValueMessage": [[102, null]], "WarningMessage": [[104, null]], "Weekly": [[175, "weekly"]], "What Is The Training Village?": [[154, null]], "What You Need": [[152, "what-you-need"]], "Writer": [[141, null]], "arcom": [[66, null]], "base_eventname": [[41, null]], "base_message": [[71, null]], "behavior_window": [[145, null]], "bpod": [[24, null]], "bpod_base": [[26, null]], "bpod_com_protocol": [[28, null]], "bpod_com_protocol_modules": [[30, null]], "bpod_error": [[115, null]], "bpod_events": [[43, null]], "bpod_input_channels": [[48, null]], "bpod_io": [[32, null]], "bpod_module": [[61, null]], "bpod_modules": [[60, null], [63, null]], "bpod_output_channels": [[51, null]], "change_hour_run": [[1, null]], "channels": [[35, null]], "classes": [[0, null]], "com": [[65, null]], "conditions": [[123, null]], "csv": [[139, null]], "date_parser": [[142, null]], "debug": [[73, null]], "devices": [[21, null]], "end_trial": [[75, null]], "enums": [[3, null]], "error": [[77, null]], "event_occurrence": [[79, null]], "event_resume": [[81, null]], "events": [[40, null]], "exceptions": [[114, null]], "global_counters": [[125, null]], "global_timers": [[127, null]], "gui": [[22, null]], "hardware": [[34, null], [45, null]], "input_channels": [[47, null]], "messaging": [[70, null]], "non_blockingsocketreceive": [[53, null]], "non_blockingstreamreader": [[56, null]], "output_channels": [[50, null]], "parse": [[143, null]], "parser": [[83, null]], "protocol": [[105, null], [117, null]], "pybpodapi": [[23, null]], "recv_msg_headers": [[106, null]], "screen": [[144, null]], "send_msg_headers": [[108, null]], "session": [[118, null]], "session_info": [[85, null]], "settings": [[59, null]], "settings_class": [[14, null]], "softcode_occurrence": [[87, null]], "state_machine": [[121, null]], "state_machine_base": [[129, null]], "state_machine_builder": [[132, null]], "state_machine_runner": [[135, null]], "state_occurrence": [[89, null]], "state_transition": [[91, null]], "stderr": [[93, null]], "stderr_buffer": [[110, null]], "stdout": [[95, null]], "stdout_buffer": [[112, null]], "training": [[17, null]], "trial": [[97, null]], "untagged_message": [[99, null]], "utils": [[138, null]], "value": [[101, null]], "village.classes.training.TrainingError": [[20, null]], "village.pybpodapi.bpod.non_blockingsocketreceive.UnexpectedEndOfStream": [[55, null]], "village.pybpodapi.bpod.non_blockingstreamreader.UnexpectedEndOfStream": [[58, null]], "village.pybpodapi.exceptions.bpod_error.BpodErrorException": [[116, null]], "village.pybpodapi.state_machine.state_machine_base.SMAError": [[130, null]], "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilderError": [[134, null]], "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunnerError": [[137, null]], "warning": [[103, null]]}, "docnames": ["api_generated/village.classes", "api_generated/village.classes.change_hour_run", "api_generated/village.classes.change_hour_run.ChangeHourRun", "api_generated/village.classes.enums", "api_generated/village.classes.enums.Actions", "api_generated/village.classes.enums.Active", "api_generated/village.classes.enums.AreaActive", "api_generated/village.classes.enums.Color", "api_generated/village.classes.enums.Cycle", "api_generated/village.classes.enums.DataTable", "api_generated/village.classes.enums.Info", "api_generated/village.classes.enums.ScreenActive", "api_generated/village.classes.enums.State", "api_generated/village.classes.enums.SuperEnum", "api_generated/village.classes.settings_class", "api_generated/village.classes.settings_class.Setting", "api_generated/village.classes.settings_class.Settings", "api_generated/village.classes.training", "api_generated/village.classes.training.Settings", "api_generated/village.classes.training.Training", "api_generated/village.classes.training.TrainingError", "api_generated/village.devices", "api_generated/village.gui", "api_generated/village.pybpodapi", "api_generated/village.pybpodapi.bpod", "api_generated/village.pybpodapi.bpod.Bpod", "api_generated/village.pybpodapi.bpod.bpod_base", "api_generated/village.pybpodapi.bpod.bpod_base.BpodBase", "api_generated/village.pybpodapi.bpod.bpod_com_protocol", "api_generated/village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol", "api_generated/village.pybpodapi.bpod.bpod_com_protocol_modules", "api_generated/village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules", "api_generated/village.pybpodapi.bpod.bpod_io", "api_generated/village.pybpodapi.bpod.bpod_io.BpodIO", "api_generated/village.pybpodapi.bpod.hardware", "api_generated/village.pybpodapi.bpod.hardware.channels", "api_generated/village.pybpodapi.bpod.hardware.channels.ChannelName", "api_generated/village.pybpodapi.bpod.hardware.channels.ChannelType", "api_generated/village.pybpodapi.bpod.hardware.channels.Channels", "api_generated/village.pybpodapi.bpod.hardware.channels.EventsPositions", "api_generated/village.pybpodapi.bpod.hardware.events", "api_generated/village.pybpodapi.bpod.hardware.events.base_eventname", "api_generated/village.pybpodapi.bpod.hardware.events.base_eventname.BaseEventName", "api_generated/village.pybpodapi.bpod.hardware.events.bpod_events", "api_generated/village.pybpodapi.bpod.hardware.events.bpod_events.EventName", "api_generated/village.pybpodapi.bpod.hardware.hardware", "api_generated/village.pybpodapi.bpod.hardware.hardware.Hardware", "api_generated/village.pybpodapi.bpod.hardware.input_channels", "api_generated/village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels", "api_generated/village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName", "api_generated/village.pybpodapi.bpod.hardware.output_channels", "api_generated/village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels", "api_generated/village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.OutputChannel", "api_generated/village.pybpodapi.bpod.non_blockingsocketreceive", "api_generated/village.pybpodapi.bpod.non_blockingsocketreceive.NonBlockingSocketReceive", "api_generated/village.pybpodapi.bpod.non_blockingsocketreceive.UnexpectedEndOfStream", "api_generated/village.pybpodapi.bpod.non_blockingstreamreader", "api_generated/village.pybpodapi.bpod.non_blockingstreamreader.NonBlockingStreamReader", "api_generated/village.pybpodapi.bpod.non_blockingstreamreader.UnexpectedEndOfStream", "api_generated/village.pybpodapi.bpod.settings", "api_generated/village.pybpodapi.bpod_modules", "api_generated/village.pybpodapi.bpod_modules.bpod_module", "api_generated/village.pybpodapi.bpod_modules.bpod_module.BpodModule", "api_generated/village.pybpodapi.bpod_modules.bpod_modules", "api_generated/village.pybpodapi.bpod_modules.bpod_modules.BpodModules", "api_generated/village.pybpodapi.com", "api_generated/village.pybpodapi.com.arcom", "api_generated/village.pybpodapi.com.arcom.ArCOM", "api_generated/village.pybpodapi.com.arcom.ArduinoTypes", "api_generated/village.pybpodapi.com.arcom.DataType", "api_generated/village.pybpodapi.com.messaging", "api_generated/village.pybpodapi.com.messaging.base_message", "api_generated/village.pybpodapi.com.messaging.base_message.BaseMessage", "api_generated/village.pybpodapi.com.messaging.debug", "api_generated/village.pybpodapi.com.messaging.debug.DebugMessage", "api_generated/village.pybpodapi.com.messaging.end_trial", "api_generated/village.pybpodapi.com.messaging.end_trial.EndTrial", "api_generated/village.pybpodapi.com.messaging.error", "api_generated/village.pybpodapi.com.messaging.error.ErrorMessage", "api_generated/village.pybpodapi.com.messaging.event_occurrence", "api_generated/village.pybpodapi.com.messaging.event_occurrence.EventOccurrence", "api_generated/village.pybpodapi.com.messaging.event_resume", "api_generated/village.pybpodapi.com.messaging.event_resume.EventResume", "api_generated/village.pybpodapi.com.messaging.parser", "api_generated/village.pybpodapi.com.messaging.parser.MessageParser", "api_generated/village.pybpodapi.com.messaging.session_info", "api_generated/village.pybpodapi.com.messaging.session_info.SessionInfo", "api_generated/village.pybpodapi.com.messaging.softcode_occurrence", "api_generated/village.pybpodapi.com.messaging.softcode_occurrence.SoftcodeOccurrence", "api_generated/village.pybpodapi.com.messaging.state_occurrence", "api_generated/village.pybpodapi.com.messaging.state_occurrence.StateOccurrence", "api_generated/village.pybpodapi.com.messaging.state_transition", "api_generated/village.pybpodapi.com.messaging.state_transition.StateTransition", "api_generated/village.pybpodapi.com.messaging.stderr", "api_generated/village.pybpodapi.com.messaging.stderr.StderrMessage", "api_generated/village.pybpodapi.com.messaging.stdout", "api_generated/village.pybpodapi.com.messaging.stdout.StdoutMessage", "api_generated/village.pybpodapi.com.messaging.trial", "api_generated/village.pybpodapi.com.messaging.trial.Trial", "api_generated/village.pybpodapi.com.messaging.untagged_message", "api_generated/village.pybpodapi.com.messaging.untagged_message.UntaggedMessage", "api_generated/village.pybpodapi.com.messaging.value", "api_generated/village.pybpodapi.com.messaging.value.ValueMessage", "api_generated/village.pybpodapi.com.messaging.warning", "api_generated/village.pybpodapi.com.messaging.warning.WarningMessage", "api_generated/village.pybpodapi.com.protocol", "api_generated/village.pybpodapi.com.protocol.recv_msg_headers", "api_generated/village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader", "api_generated/village.pybpodapi.com.protocol.send_msg_headers", "api_generated/village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader", "api_generated/village.pybpodapi.com.stderr_buffer", "api_generated/village.pybpodapi.com.stderr_buffer.StderrBuffer", "api_generated/village.pybpodapi.com.stdout_buffer", "api_generated/village.pybpodapi.com.stdout_buffer.StdoutBuffer", "api_generated/village.pybpodapi.exceptions", "api_generated/village.pybpodapi.exceptions.bpod_error", "api_generated/village.pybpodapi.exceptions.bpod_error.BpodErrorException", "api_generated/village.pybpodapi.protocol", "api_generated/village.pybpodapi.session", "api_generated/village.pybpodapi.session.Session", "api_generated/village.pybpodapi.session.StreamsWrapper", "api_generated/village.pybpodapi.state_machine", "api_generated/village.pybpodapi.state_machine.StateMachine", "api_generated/village.pybpodapi.state_machine.conditions", "api_generated/village.pybpodapi.state_machine.conditions.Conditions", "api_generated/village.pybpodapi.state_machine.global_counters", "api_generated/village.pybpodapi.state_machine.global_counters.GlobalCounters", "api_generated/village.pybpodapi.state_machine.global_timers", "api_generated/village.pybpodapi.state_machine.global_timers.GlobalTimers", "api_generated/village.pybpodapi.state_machine.state_machine_base", "api_generated/village.pybpodapi.state_machine.state_machine_base.SMAError", "api_generated/village.pybpodapi.state_machine.state_machine_base.StateMachineBase", "api_generated/village.pybpodapi.state_machine.state_machine_builder", "api_generated/village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder", "api_generated/village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilderError", "api_generated/village.pybpodapi.state_machine.state_machine_runner", "api_generated/village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner", "api_generated/village.pybpodapi.state_machine.state_machine_runner.StateMachineRunnerError", "api_generated/village.pybpodapi.utils", "api_generated/village.pybpodapi.utils.csv", "api_generated/village.pybpodapi.utils.csv.Reader", "api_generated/village.pybpodapi.utils.csv.Writer", "api_generated/village.pybpodapi.utils.date_parser", "api_generated/village.pybpodapi.utils.date_parser.parse", "api_generated/village.screen", "api_generated/village.screen.behavior_window", "api_generated/village.screen.behavior_window.BehaviorWindow", "api_index", "faq/faq", "faq_index", "how_to_build/assembly_instructions", "how_to_build/list_of_parts", "how_to_build/software_installation", "how_to_build_index", "index", "initial_configuration/backup", "initial_configuration/hardware", "initial_configuration/heartbeat", "initial_configuration/remote", "initial_configuration/telegram", "initial_configuration_index", "main/what_is", "resources/ISO", "resources/code", "resources/print_files", "resources_index", "troubleshooting/troubleshooting", "troubleshooting_index", "user_guide/GUI", "user_guide/alarms", "user_guide/animal_procedures", "user_guide/corridor", "user_guide/create", "user_guide/data", "user_guide/detection", "user_guide/maintenance", "user_guide/plots", "user_guide/settings", "user_guide/started", "user_guide/state_machine", "user_guide/subjects", "user_guide/test", "user_guide/use", "user_guide_index"], "envversion": {"nbsphinx": 4, "sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1}, "filenames": ["api_generated/village.classes.rst", "api_generated/village.classes.change_hour_run.rst", "api_generated/village.classes.change_hour_run.ChangeHourRun.rst", "api_generated/village.classes.enums.rst", "api_generated/village.classes.enums.Actions.rst", "api_generated/village.classes.enums.Active.rst", "api_generated/village.classes.enums.AreaActive.rst", "api_generated/village.classes.enums.Color.rst", "api_generated/village.classes.enums.Cycle.rst", "api_generated/village.classes.enums.DataTable.rst", "api_generated/village.classes.enums.Info.rst", "api_generated/village.classes.enums.ScreenActive.rst", "api_generated/village.classes.enums.State.rst", "api_generated/village.classes.enums.SuperEnum.rst", "api_generated/village.classes.settings_class.rst", "api_generated/village.classes.settings_class.Setting.rst", "api_generated/village.classes.settings_class.Settings.rst", "api_generated/village.classes.training.rst", "api_generated/village.classes.training.Settings.rst", "api_generated/village.classes.training.Training.rst", "api_generated/village.classes.training.TrainingError.rst", "api_generated/village.devices.rst", "api_generated/village.gui.rst", "api_generated/village.pybpodapi.rst", "api_generated/village.pybpodapi.bpod.rst", "api_generated/village.pybpodapi.bpod.Bpod.rst", "api_generated/village.pybpodapi.bpod.bpod_base.rst", "api_generated/village.pybpodapi.bpod.bpod_base.BpodBase.rst", "api_generated/village.pybpodapi.bpod.bpod_com_protocol.rst", "api_generated/village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.rst", "api_generated/village.pybpodapi.bpod.bpod_com_protocol_modules.rst", "api_generated/village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.rst", "api_generated/village.pybpodapi.bpod.bpod_io.rst", "api_generated/village.pybpodapi.bpod.bpod_io.BpodIO.rst", "api_generated/village.pybpodapi.bpod.hardware.rst", "api_generated/village.pybpodapi.bpod.hardware.channels.rst", "api_generated/village.pybpodapi.bpod.hardware.channels.ChannelName.rst", "api_generated/village.pybpodapi.bpod.hardware.channels.ChannelType.rst", "api_generated/village.pybpodapi.bpod.hardware.channels.Channels.rst", "api_generated/village.pybpodapi.bpod.hardware.channels.EventsPositions.rst", "api_generated/village.pybpodapi.bpod.hardware.events.rst", "api_generated/village.pybpodapi.bpod.hardware.events.base_eventname.rst", "api_generated/village.pybpodapi.bpod.hardware.events.base_eventname.BaseEventName.rst", "api_generated/village.pybpodapi.bpod.hardware.events.bpod_events.rst", "api_generated/village.pybpodapi.bpod.hardware.events.bpod_events.EventName.rst", "api_generated/village.pybpodapi.bpod.hardware.hardware.rst", "api_generated/village.pybpodapi.bpod.hardware.hardware.Hardware.rst", "api_generated/village.pybpodapi.bpod.hardware.input_channels.rst", "api_generated/village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.rst", "api_generated/village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.rst", "api_generated/village.pybpodapi.bpod.hardware.output_channels.rst", "api_generated/village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.rst", "api_generated/village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.OutputChannel.rst", "api_generated/village.pybpodapi.bpod.non_blockingsocketreceive.rst", "api_generated/village.pybpodapi.bpod.non_blockingsocketreceive.NonBlockingSocketReceive.rst", "api_generated/village.pybpodapi.bpod.non_blockingsocketreceive.UnexpectedEndOfStream.rst", "api_generated/village.pybpodapi.bpod.non_blockingstreamreader.rst", "api_generated/village.pybpodapi.bpod.non_blockingstreamreader.NonBlockingStreamReader.rst", "api_generated/village.pybpodapi.bpod.non_blockingstreamreader.UnexpectedEndOfStream.rst", "api_generated/village.pybpodapi.bpod.settings.rst", "api_generated/village.pybpodapi.bpod_modules.rst", "api_generated/village.pybpodapi.bpod_modules.bpod_module.rst", "api_generated/village.pybpodapi.bpod_modules.bpod_module.BpodModule.rst", "api_generated/village.pybpodapi.bpod_modules.bpod_modules.rst", "api_generated/village.pybpodapi.bpod_modules.bpod_modules.BpodModules.rst", "api_generated/village.pybpodapi.com.rst", "api_generated/village.pybpodapi.com.arcom.rst", "api_generated/village.pybpodapi.com.arcom.ArCOM.rst", "api_generated/village.pybpodapi.com.arcom.ArduinoTypes.rst", "api_generated/village.pybpodapi.com.arcom.DataType.rst", "api_generated/village.pybpodapi.com.messaging.rst", "api_generated/village.pybpodapi.com.messaging.base_message.rst", "api_generated/village.pybpodapi.com.messaging.base_message.BaseMessage.rst", "api_generated/village.pybpodapi.com.messaging.debug.rst", "api_generated/village.pybpodapi.com.messaging.debug.DebugMessage.rst", "api_generated/village.pybpodapi.com.messaging.end_trial.rst", "api_generated/village.pybpodapi.com.messaging.end_trial.EndTrial.rst", "api_generated/village.pybpodapi.com.messaging.error.rst", "api_generated/village.pybpodapi.com.messaging.error.ErrorMessage.rst", "api_generated/village.pybpodapi.com.messaging.event_occurrence.rst", "api_generated/village.pybpodapi.com.messaging.event_occurrence.EventOccurrence.rst", "api_generated/village.pybpodapi.com.messaging.event_resume.rst", "api_generated/village.pybpodapi.com.messaging.event_resume.EventResume.rst", "api_generated/village.pybpodapi.com.messaging.parser.rst", "api_generated/village.pybpodapi.com.messaging.parser.MessageParser.rst", "api_generated/village.pybpodapi.com.messaging.session_info.rst", "api_generated/village.pybpodapi.com.messaging.session_info.SessionInfo.rst", "api_generated/village.pybpodapi.com.messaging.softcode_occurrence.rst", "api_generated/village.pybpodapi.com.messaging.softcode_occurrence.SoftcodeOccurrence.rst", "api_generated/village.pybpodapi.com.messaging.state_occurrence.rst", "api_generated/village.pybpodapi.com.messaging.state_occurrence.StateOccurrence.rst", "api_generated/village.pybpodapi.com.messaging.state_transition.rst", "api_generated/village.pybpodapi.com.messaging.state_transition.StateTransition.rst", "api_generated/village.pybpodapi.com.messaging.stderr.rst", "api_generated/village.pybpodapi.com.messaging.stderr.StderrMessage.rst", "api_generated/village.pybpodapi.com.messaging.stdout.rst", "api_generated/village.pybpodapi.com.messaging.stdout.StdoutMessage.rst", "api_generated/village.pybpodapi.com.messaging.trial.rst", "api_generated/village.pybpodapi.com.messaging.trial.Trial.rst", "api_generated/village.pybpodapi.com.messaging.untagged_message.rst", "api_generated/village.pybpodapi.com.messaging.untagged_message.UntaggedMessage.rst", "api_generated/village.pybpodapi.com.messaging.value.rst", "api_generated/village.pybpodapi.com.messaging.value.ValueMessage.rst", "api_generated/village.pybpodapi.com.messaging.warning.rst", "api_generated/village.pybpodapi.com.messaging.warning.WarningMessage.rst", "api_generated/village.pybpodapi.com.protocol.rst", "api_generated/village.pybpodapi.com.protocol.recv_msg_headers.rst", "api_generated/village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader.rst", "api_generated/village.pybpodapi.com.protocol.send_msg_headers.rst", "api_generated/village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.rst", "api_generated/village.pybpodapi.com.stderr_buffer.rst", "api_generated/village.pybpodapi.com.stderr_buffer.StderrBuffer.rst", "api_generated/village.pybpodapi.com.stdout_buffer.rst", "api_generated/village.pybpodapi.com.stdout_buffer.StdoutBuffer.rst", "api_generated/village.pybpodapi.exceptions.rst", "api_generated/village.pybpodapi.exceptions.bpod_error.rst", "api_generated/village.pybpodapi.exceptions.bpod_error.BpodErrorException.rst", "api_generated/village.pybpodapi.protocol.rst", "api_generated/village.pybpodapi.session.rst", "api_generated/village.pybpodapi.session.Session.rst", "api_generated/village.pybpodapi.session.StreamsWrapper.rst", "api_generated/village.pybpodapi.state_machine.rst", "api_generated/village.pybpodapi.state_machine.StateMachine.rst", "api_generated/village.pybpodapi.state_machine.conditions.rst", "api_generated/village.pybpodapi.state_machine.conditions.Conditions.rst", "api_generated/village.pybpodapi.state_machine.global_counters.rst", "api_generated/village.pybpodapi.state_machine.global_counters.GlobalCounters.rst", "api_generated/village.pybpodapi.state_machine.global_timers.rst", "api_generated/village.pybpodapi.state_machine.global_timers.GlobalTimers.rst", "api_generated/village.pybpodapi.state_machine.state_machine_base.rst", "api_generated/village.pybpodapi.state_machine.state_machine_base.SMAError.rst", "api_generated/village.pybpodapi.state_machine.state_machine_base.StateMachineBase.rst", "api_generated/village.pybpodapi.state_machine.state_machine_builder.rst", "api_generated/village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder.rst", "api_generated/village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilderError.rst", "api_generated/village.pybpodapi.state_machine.state_machine_runner.rst", "api_generated/village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner.rst", "api_generated/village.pybpodapi.state_machine.state_machine_runner.StateMachineRunnerError.rst", "api_generated/village.pybpodapi.utils.rst", "api_generated/village.pybpodapi.utils.csv.rst", "api_generated/village.pybpodapi.utils.csv.Reader.rst", "api_generated/village.pybpodapi.utils.csv.Writer.rst", "api_generated/village.pybpodapi.utils.date_parser.rst", "api_generated/village.pybpodapi.utils.date_parser.parse.rst", "api_generated/village.screen.rst", "api_generated/village.screen.behavior_window.rst", "api_generated/village.screen.behavior_window.BehaviorWindow.rst", "api_index.rst", "faq/faq.md", "faq_index.rst", "how_to_build/assembly_instructions.md", "how_to_build/list_of_parts.md", "how_to_build/software_installation.md", "how_to_build_index.rst", "index.rst", "initial_configuration/backup.md", "initial_configuration/hardware.md", "initial_configuration/heartbeat.md", "initial_configuration/remote.md", "initial_configuration/telegram.md", "initial_configuration_index.rst", "main/what_is.md", "resources/ISO.md", "resources/code.md", "resources/print_files.md", "resources_index.rst", "troubleshooting/troubleshooting.md", "troubleshooting_index.rst", "user_guide/GUI.md", "user_guide/alarms.md", "user_guide/animal_procedures.md", "user_guide/corridor.md", "user_guide/create.md", "user_guide/data.md", "user_guide/detection.md", "user_guide/maintenance.md", "user_guide/plots.md", "user_guide/settings.md", "user_guide/started.md", "user_guide/state_machine.md", "user_guide/subjects.md", "user_guide/test.md", "user_guide/use.md", "user_guide_index.rst"], "indexentries": {"__init__() (actions method)": [[4, "village.classes.enums.Actions.__init__", false]], "__init__() (active method)": [[5, "village.classes.enums.Active.__init__", false]], "__init__() (arcom method)": [[67, "village.pybpodapi.com.arcom.ArCOM.__init__", false]], "__init__() (arduinotypes method)": [[68, "village.pybpodapi.com.arcom.ArduinoTypes.__init__", false]], "__init__() (areaactive method)": [[6, "village.classes.enums.AreaActive.__init__", false]], "__init__() (baseeventname method)": [[42, "village.pybpodapi.bpod.hardware.events.base_eventname.BaseEventName.__init__", false]], "__init__() (basemessage method)": [[72, "village.pybpodapi.com.messaging.base_message.BaseMessage.__init__", false]], "__init__() (behaviorwindow method)": [[146, "village.screen.behavior_window.BehaviorWindow.__init__", false]], "__init__() (bpod method)": [[25, "village.pybpodapi.bpod.Bpod.__init__", false]], "__init__() (bpodbase method)": [[27, "village.pybpodapi.bpod.bpod_base.BpodBase.__init__", false]], "__init__() (bpodcomprotocol method)": [[29, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.__init__", false]], "__init__() (bpodcomprotocolmodules method)": [[31, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.__init__", false]], "__init__() (bpodio method)": [[33, "village.pybpodapi.bpod.bpod_io.BpodIO.__init__", false]], "__init__() (bpodmodule method)": [[62, "village.pybpodapi.bpod_modules.bpod_module.BpodModule.__init__", false]], "__init__() (bpodmodules method)": [[64, "village.pybpodapi.bpod_modules.bpod_modules.BpodModules.__init__", false]], "__init__() (changehourrun method)": [[2, "village.classes.change_hour_run.ChangeHourRun.__init__", false]], "__init__() (channelname method)": [[36, "village.pybpodapi.bpod.hardware.channels.ChannelName.__init__", false]], "__init__() (channels method)": [[38, "village.pybpodapi.bpod.hardware.channels.Channels.__init__", false]], "__init__() (channeltype method)": [[37, "village.pybpodapi.bpod.hardware.channels.ChannelType.__init__", false]], "__init__() (color method)": [[7, "village.classes.enums.Color.__init__", false]], "__init__() (conditions method)": [[124, "village.pybpodapi.state_machine.conditions.Conditions.__init__", false]], "__init__() (cycle method)": [[8, "village.classes.enums.Cycle.__init__", false]], "__init__() (datatable method)": [[9, "village.classes.enums.DataTable.__init__", false]], "__init__() (datatype method)": [[69, "village.pybpodapi.com.arcom.DataType.__init__", false]], "__init__() (debugmessage method)": [[74, "village.pybpodapi.com.messaging.debug.DebugMessage.__init__", false]], "__init__() (endtrial method)": [[76, "village.pybpodapi.com.messaging.end_trial.EndTrial.__init__", false]], "__init__() (errormessage method)": [[78, "village.pybpodapi.com.messaging.error.ErrorMessage.__init__", false]], "__init__() (eventname method)": [[44, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.__init__", false]], "__init__() (eventoccurrence method)": [[80, "village.pybpodapi.com.messaging.event_occurrence.EventOccurrence.__init__", false]], "__init__() (eventresume method)": [[82, "village.pybpodapi.com.messaging.event_resume.EventResume.__init__", false]], "__init__() (eventspositions method)": [[39, "village.pybpodapi.bpod.hardware.channels.EventsPositions.__init__", false]], "__init__() (globalcounters method)": [[126, "village.pybpodapi.state_machine.global_counters.GlobalCounters.__init__", false]], "__init__() (globaltimers method)": [[128, "village.pybpodapi.state_machine.global_timers.GlobalTimers.__init__", false]], "__init__() (hardware method)": [[46, "village.pybpodapi.bpod.hardware.hardware.Hardware.__init__", false]], "__init__() (info method)": [[10, "village.classes.enums.Info.__init__", false]], "__init__() (inputname method)": [[49, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.__init__", false]], "__init__() (messageparser method)": [[84, "village.pybpodapi.com.messaging.parser.MessageParser.__init__", false]], "__init__() (nonblockingsocketreceive method)": [[54, "village.pybpodapi.bpod.non_blockingsocketreceive.NonBlockingSocketReceive.__init__", false]], "__init__() (nonblockingstreamreader method)": [[57, "village.pybpodapi.bpod.non_blockingstreamreader.NonBlockingStreamReader.__init__", false]], "__init__() (outputchannel method)": [[52, "village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.OutputChannel.__init__", false]], "__init__() (reader method)": [[140, "village.pybpodapi.utils.csv.Reader.__init__", false]], "__init__() (receivemessageheader method)": [[107, "village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader.__init__", false]], "__init__() (screenactive method)": [[11, "village.classes.enums.ScreenActive.__init__", false]], "__init__() (sendmessageheader method)": [[109, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.__init__", false]], "__init__() (session method)": [[119, "village.pybpodapi.session.Session.__init__", false]], "__init__() (sessioninfo method)": [[86, "village.pybpodapi.com.messaging.session_info.SessionInfo.__init__", false]], "__init__() (setting method)": [[15, "village.classes.settings_class.Setting.__init__", false]], "__init__() (settings method)": [[16, "village.classes.settings_class.Settings.__init__", false], [18, "village.classes.training.Settings.__init__", false]], "__init__() (softcodeoccurrence method)": [[88, "village.pybpodapi.com.messaging.softcode_occurrence.SoftcodeOccurrence.__init__", false]], "__init__() (state method)": [[12, "village.classes.enums.State.__init__", false]], "__init__() (statemachine method)": [[122, "village.pybpodapi.state_machine.StateMachine.__init__", false]], "__init__() (statemachinebase method)": [[131, "village.pybpodapi.state_machine.state_machine_base.StateMachineBase.__init__", false]], "__init__() (statemachinebuilder method)": [[133, "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder.__init__", false]], "__init__() (statemachinerunner method)": [[136, "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner.__init__", false]], "__init__() (stateoccurrence method)": [[90, "village.pybpodapi.com.messaging.state_occurrence.StateOccurrence.__init__", false]], "__init__() (statetransition method)": [[92, "village.pybpodapi.com.messaging.state_transition.StateTransition.__init__", false]], "__init__() (stderrbuffer method)": [[111, "village.pybpodapi.com.stderr_buffer.StderrBuffer.__init__", false]], "__init__() (stderrmessage method)": [[94, "village.pybpodapi.com.messaging.stderr.StderrMessage.__init__", false]], "__init__() (stdoutbuffer method)": [[113, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.__init__", false]], "__init__() (stdoutmessage method)": [[96, "village.pybpodapi.com.messaging.stdout.StdoutMessage.__init__", false]], "__init__() (streamswrapper method)": [[120, "village.pybpodapi.session.StreamsWrapper.__init__", false]], "__init__() (superenum method)": [[13, "village.classes.enums.SuperEnum.__init__", false]], "__init__() (training method)": [[19, "village.classes.training.Training.__init__", false]], "__init__() (trial method)": [[98, "village.pybpodapi.com.messaging.trial.Trial.__init__", false]], "__init__() (untaggedmessage method)": [[100, "village.pybpodapi.com.messaging.untagged_message.UntaggedMessage.__init__", false]], "__init__() (valuemessage method)": [[102, "village.pybpodapi.com.messaging.value.ValueMessage.__init__", false]], "__init__() (warningmessage method)": [[104, "village.pybpodapi.com.messaging.warning.WarningMessage.__init__", false]], "__init__() (writer method)": [[141, "village.pybpodapi.utils.csv.Writer.__init__", false]], "actions (class in village.classes.enums)": [[4, "village.classes.enums.Actions", false]], "active (class in village.classes.enums)": [[5, "village.classes.enums.Active", false]], "add_state() (statemachine method)": [[122, "village.pybpodapi.state_machine.StateMachine.add_state", false]], "add_state() (statemachinebase method)": [[131, "village.pybpodapi.state_machine.state_machine_base.StateMachineBase.add_state", false]], "add_state() (statemachinebuilder method)": [[133, "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder.add_state", false]], "add_state() (statemachinerunner method)": [[136, "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner.add_state", false]], "animate() (behaviorwindow method)": [[146, "village.screen.behavior_window.BehaviorWindow.animate", false]], "arcom (class in village.pybpodapi.com.arcom)": [[67, "village.pybpodapi.com.arcom.ArCOM", false]], "arduinotypes (class in village.pybpodapi.com.arcom)": [[68, "village.pybpodapi.com.arcom.ArduinoTypes", false]], "areaactive (class in village.classes.enums)": [[6, "village.classes.enums.AreaActive", false]], "baseeventname (class in village.pybpodapi.bpod.hardware.events.base_eventname)": [[42, "village.pybpodapi.bpod.hardware.events.base_eventname.BaseEventName", false]], "basemessage (class in village.pybpodapi.com.messaging.base_message)": [[72, "village.pybpodapi.com.messaging.base_message.BaseMessage", false]], "behaviorwindow (class in village.screen.behavior_window)": [[146, "village.screen.behavior_window.BehaviorWindow", false]], "bnc (bpod.channelnames attribute)": [[25, "village.pybpodapi.bpod.Bpod.ChannelNames.BNC", false]], "bnc (bpodbase.channelnames attribute)": [[27, "village.pybpodapi.bpod.bpod_base.BpodBase.ChannelNames.BNC", false]], "bnc (bpodcomprotocol.channelnames attribute)": [[29, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.ChannelNames.BNC", false]], "bnc (bpodcomprotocolmodules.channelnames attribute)": [[31, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.ChannelNames.BNC", false]], "bnc (bpodio.channelnames attribute)": [[33, "village.pybpodapi.bpod.bpod_io.BpodIO.ChannelNames.BNC", false]], "bnc (channelname attribute)": [[36, "village.pybpodapi.bpod.hardware.channels.ChannelName.BNC", false]], "bnc1 (inputname attribute)": [[49, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.BNC1", false]], "bnc1high (bpod.events attribute)": [[25, "village.pybpodapi.bpod.Bpod.Events.BNC1High", false]], "bnc1high (bpod.outputchannels attribute)": [[25, "village.pybpodapi.bpod.Bpod.OutputChannels.BNC1High", false]], "bnc1high (bpodbase.events attribute)": [[27, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.BNC1High", false]], "bnc1high (bpodbase.outputchannels attribute)": [[27, "village.pybpodapi.bpod.bpod_base.BpodBase.OutputChannels.BNC1High", false]], "bnc1high (bpodcomprotocol.events attribute)": [[29, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.BNC1High", false]], "bnc1high (bpodcomprotocol.outputchannels attribute)": [[29, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.OutputChannels.BNC1High", false]], "bnc1high (bpodcomprotocolmodules.events attribute)": [[31, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.BNC1High", false]], "bnc1high (bpodcomprotocolmodules.outputchannels attribute)": [[31, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.OutputChannels.BNC1High", false]], "bnc1high (bpodio.events attribute)": [[33, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.BNC1High", false]], "bnc1high (bpodio.outputchannels attribute)": [[33, "village.pybpodapi.bpod.bpod_io.BpodIO.OutputChannels.BNC1High", false]], "bnc1high (eventname attribute)": [[44, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.BNC1High", false]], "bnc1high (outputchannel attribute)": [[52, "village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.OutputChannel.BNC1High", false]], "bnc2 (inputname attribute)": [[49, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.BNC2", false]], "bpod (class in village.pybpodapi.bpod)": [[25, "village.pybpodapi.bpod.Bpod", false]], "bpod.channelnames (class in village.pybpodapi.bpod)": [[25, "village.pybpodapi.bpod.Bpod.ChannelNames", false]], "bpod.channeltypes (class in village.pybpodapi.bpod)": [[25, "village.pybpodapi.bpod.Bpod.ChannelTypes", false]], "bpod.events (class in village.pybpodapi.bpod)": [[25, "village.pybpodapi.bpod.Bpod.Events", false]], "bpod.outputchannels (class in village.pybpodapi.bpod)": [[25, "village.pybpodapi.bpod.Bpod.OutputChannels", false]], "bpodbase (class in village.pybpodapi.bpod.bpod_base)": [[27, "village.pybpodapi.bpod.bpod_base.BpodBase", false]], "bpodbase.channelnames (class in village.pybpodapi.bpod.bpod_base)": [[27, "village.pybpodapi.bpod.bpod_base.BpodBase.ChannelNames", false]], "bpodbase.channeltypes (class in village.pybpodapi.bpod.bpod_base)": [[27, "village.pybpodapi.bpod.bpod_base.BpodBase.ChannelTypes", false]], "bpodbase.events (class in village.pybpodapi.bpod.bpod_base)": [[27, "village.pybpodapi.bpod.bpod_base.BpodBase.Events", false]], "bpodbase.outputchannels (class in village.pybpodapi.bpod.bpod_base)": [[27, "village.pybpodapi.bpod.bpod_base.BpodBase.OutputChannels", false]], "bpodcomprotocol (class in village.pybpodapi.bpod.bpod_com_protocol)": [[29, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol", false]], "bpodcomprotocol.channelnames (class in village.pybpodapi.bpod.bpod_com_protocol)": [[29, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.ChannelNames", false]], "bpodcomprotocol.channeltypes (class in village.pybpodapi.bpod.bpod_com_protocol)": [[29, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.ChannelTypes", false]], "bpodcomprotocol.events (class in village.pybpodapi.bpod.bpod_com_protocol)": [[29, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events", false]], "bpodcomprotocol.outputchannels (class in village.pybpodapi.bpod.bpod_com_protocol)": [[29, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.OutputChannels", false]], "bpodcomprotocolmodules (class in village.pybpodapi.bpod.bpod_com_protocol_modules)": [[31, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules", false]], "bpodcomprotocolmodules.channelnames (class in village.pybpodapi.bpod.bpod_com_protocol_modules)": [[31, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.ChannelNames", false]], "bpodcomprotocolmodules.channeltypes (class in village.pybpodapi.bpod.bpod_com_protocol_modules)": [[31, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.ChannelTypes", false]], "bpodcomprotocolmodules.events (class in village.pybpodapi.bpod.bpod_com_protocol_modules)": [[31, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events", false]], "bpodcomprotocolmodules.outputchannels (class in village.pybpodapi.bpod.bpod_com_protocol_modules)": [[31, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.OutputChannels", false]], "bpoderrorexception": [[116, "village.pybpodapi.exceptions.bpod_error.BpodErrorException", false]], "bpodio (class in village.pybpodapi.bpod.bpod_io)": [[33, "village.pybpodapi.bpod.bpod_io.BpodIO", false]], "bpodio.channelnames (class in village.pybpodapi.bpod.bpod_io)": [[33, "village.pybpodapi.bpod.bpod_io.BpodIO.ChannelNames", false]], "bpodio.channeltypes (class in village.pybpodapi.bpod.bpod_io)": [[33, "village.pybpodapi.bpod.bpod_io.BpodIO.ChannelTypes", false]], "bpodio.events (class in village.pybpodapi.bpod.bpod_io)": [[33, "village.pybpodapi.bpod.bpod_io.BpodIO.Events", false]], "bpodio.outputchannels (class in village.pybpodapi.bpod.bpod_io)": [[33, "village.pybpodapi.bpod.bpod_io.BpodIO.OutputChannels", false]], "bpodmodule (class in village.pybpodapi.bpod_modules.bpod_module)": [[62, "village.pybpodapi.bpod_modules.bpod_module.BpodModule", false]], "bpodmodules (class in village.pybpodapi.bpod_modules.bpod_modules)": [[64, "village.pybpodapi.bpod_modules.bpod_modules.BpodModules", false]], "build_message() (statemachine method)": [[122, "village.pybpodapi.state_machine.StateMachine.build_message", false]], "build_message() (statemachinebuilder method)": [[133, "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder.build_message", false]], "build_message() (statemachinerunner method)": [[136, "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner.build_message", false]], "build_message_32_bits() (statemachine method)": [[122, "village.pybpodapi.state_machine.StateMachine.build_message_32_bits", false]], "build_message_32_bits() (statemachinebuilder method)": [[133, "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder.build_message_32_bits", false]], "build_message_32_bits() (statemachinerunner method)": [[136, "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner.build_message_32_bits", false]], "bytes_available() (arcom method)": [[67, "village.pybpodapi.com.arcom.ArCOM.bytes_available", false]], "changehourrun (class in village.classes.change_hour_run)": [[2, "village.classes.change_hour_run.ChangeHourRun", false]], "channelname (class in village.pybpodapi.bpod.hardware.channels)": [[36, "village.pybpodapi.bpod.hardware.channels.ChannelName", false]], "channels (class in village.pybpodapi.bpod.hardware.channels)": [[38, "village.pybpodapi.bpod.hardware.channels.Channels", false]], "channeltype (class in village.pybpodapi.bpod.hardware.channels)": [[37, "village.pybpodapi.bpod.hardware.channels.ChannelType", false]], "check_type() (basemessage class method)": [[72, "village.pybpodapi.com.messaging.base_message.BaseMessage.check_type", false]], "check_type() (debugmessage class method)": [[74, "village.pybpodapi.com.messaging.debug.DebugMessage.check_type", false]], "check_type() (endtrial class method)": [[76, "village.pybpodapi.com.messaging.end_trial.EndTrial.check_type", false]], "check_type() (errormessage class method)": [[78, "village.pybpodapi.com.messaging.error.ErrorMessage.check_type", false]], "check_type() (eventoccurrence class method)": [[80, "village.pybpodapi.com.messaging.event_occurrence.EventOccurrence.check_type", false]], "check_type() (eventresume class method)": [[82, "village.pybpodapi.com.messaging.event_resume.EventResume.check_type", false]], "check_type() (sessioninfo class method)": [[86, "village.pybpodapi.com.messaging.session_info.SessionInfo.check_type", false]], "check_type() (softcodeoccurrence class method)": [[88, "village.pybpodapi.com.messaging.softcode_occurrence.SoftcodeOccurrence.check_type", false]], "check_type() (stateoccurrence class method)": [[90, "village.pybpodapi.com.messaging.state_occurrence.StateOccurrence.check_type", false]], "check_type() (statetransition class method)": [[92, "village.pybpodapi.com.messaging.state_transition.StateTransition.check_type", false]], "check_type() (stderrmessage class method)": [[94, "village.pybpodapi.com.messaging.stderr.StderrMessage.check_type", false]], "check_type() (stdoutmessage class method)": [[96, "village.pybpodapi.com.messaging.stdout.StdoutMessage.check_type", false]], "check_type() (trial class method)": [[98, "village.pybpodapi.com.messaging.trial.Trial.check_type", false]], "check_type() (untaggedmessage class method)": [[100, "village.pybpodapi.com.messaging.untagged_message.UntaggedMessage.check_type", false]], "check_type() (valuemessage class method)": [[102, "village.pybpodapi.com.messaging.value.ValueMessage.check_type", false]], "check_type() (warningmessage class method)": [[104, "village.pybpodapi.com.messaging.warning.WarningMessage.check_type", false]], "close() (arcom method)": [[67, "village.pybpodapi.com.arcom.ArCOM.close", false]], "close() (bpod method)": [[25, "village.pybpodapi.bpod.Bpod.close", false]], "close() (bpodbase method)": [[27, "village.pybpodapi.bpod.bpod_base.BpodBase.close", false]], "close() (bpodcomprotocol method)": [[29, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.close", false]], "close() (bpodcomprotocolmodules method)": [[31, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.close", false]], "close() (bpodio method)": [[33, "village.pybpodapi.bpod.bpod_io.BpodIO.close", false]], "close() (stderrbuffer method)": [[111, "village.pybpodapi.com.stderr_buffer.StderrBuffer.close", false]], "close() (stdoutbuffer method)": [[113, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.close", false]], "color (class in village.classes.enums)": [[7, "village.classes.enums.Color", false]], "condition1 (bpod.events attribute)": [[25, "village.pybpodapi.bpod.Bpod.Events.Condition1", false]], "condition1 (bpodbase.events attribute)": [[27, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.Condition1", false]], "condition1 (bpodcomprotocol.events attribute)": [[29, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.Condition1", false]], "condition1 (bpodcomprotocolmodules.events attribute)": [[31, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.Condition1", false]], "condition1 (bpodio.events attribute)": [[33, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.Condition1", false]], "condition1 (eventname attribute)": [[44, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.Condition1", false]], "conditions (class in village.pybpodapi.state_machine.conditions)": [[124, "village.pybpodapi.state_machine.conditions.Conditions", false]], "current_trial (session property)": [[119, "village.pybpodapi.session.Session.current_trial", false]], "cycle (class in village.classes.enums)": [[8, "village.classes.enums.Cycle", false]], "data_available() (bpod method)": [[25, "village.pybpodapi.bpod.Bpod.data_available", false]], "data_available() (bpodcomprotocol method)": [[29, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.data_available", false]], "data_available() (bpodcomprotocolmodules method)": [[31, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.data_available", false]], "data_available() (bpodio method)": [[33, "village.pybpodapi.bpod.bpod_io.BpodIO.data_available", false]], "datatable (class in village.classes.enums)": [[9, "village.classes.enums.DataTable", false]], "datatype (class in village.pybpodapi.com.arcom)": [[69, "village.pybpodapi.com.arcom.DataType", false]], "debugmessage (class in village.pybpodapi.com.messaging.debug)": [[74, "village.pybpodapi.com.messaging.debug.DebugMessage", false]], "detach() (stderrbuffer method)": [[111, "village.pybpodapi.com.stderr_buffer.StderrBuffer.detach", false]], "detach() (stdoutbuffer method)": [[113, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.detach", false]], "disconnect (sendmessageheader attribute)": [[109, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.DISCONNECT", false]], "echo_softcode (sendmessageheader attribute)": [[109, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.ECHO_SOFTCODE", false]], "enable_ports (sendmessageheader attribute)": [[109, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.ENABLE_PORTS", false]], "enable_ports_ok (receivemessageheader attribute)": [[107, "village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader.ENABLE_PORTS_OK", false]], "encoding (stderrbuffer attribute)": [[111, "village.pybpodapi.com.stderr_buffer.StderrBuffer.encoding", false]], "encoding (stdoutbuffer attribute)": [[113, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.encoding", false]], "endtrial (class in village.pybpodapi.com.messaging.end_trial)": [[76, "village.pybpodapi.com.messaging.end_trial.EndTrial", false]], "errormessage (class in village.pybpodapi.com.messaging.error)": [[78, "village.pybpodapi.com.messaging.error.ErrorMessage", false]], "errors (stderrbuffer attribute)": [[111, "village.pybpodapi.com.stderr_buffer.StderrBuffer.errors", false]], "errors (stdoutbuffer attribute)": [[113, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.errors", false]], "eventname (class in village.pybpodapi.bpod.hardware.events.bpod_events)": [[44, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName", false]], "eventoccurrence (class in village.pybpodapi.com.messaging.event_occurrence)": [[80, "village.pybpodapi.com.messaging.event_occurrence.EventOccurrence", false]], "eventresume (class in village.pybpodapi.com.messaging.event_resume)": [[82, "village.pybpodapi.com.messaging.event_resume.EventResume", false]], "eventspositions (class in village.pybpodapi.bpod.hardware.channels)": [[39, "village.pybpodapi.bpod.hardware.channels.EventsPositions", false]], "exit_and_return (sendmessageheader attribute)": [[109, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.EXIT_AND_RETURN", false]], "fileno() (stderrbuffer method)": [[111, "village.pybpodapi.com.stderr_buffer.StderrBuffer.fileno", false]], "fileno() (stdoutbuffer method)": [[113, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.fileno", false]], "find_module_by_name() (bpod method)": [[25, "village.pybpodapi.bpod.Bpod.find_module_by_name", false]], "find_module_by_name() (bpodbase method)": [[27, "village.pybpodapi.bpod.bpod_base.BpodBase.find_module_by_name", false]], "find_module_by_name() (bpodcomprotocol method)": [[29, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.find_module_by_name", false]], "find_module_by_name() (bpodcomprotocolmodules method)": [[31, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.find_module_by_name", false]], "find_module_by_name() (bpodio method)": [[33, "village.pybpodapi.bpod.bpod_io.BpodIO.find_module_by_name", false]], "firmware_version (sendmessageheader attribute)": [[109, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.FIRMWARE_VERSION", false]], "flush() (stderrbuffer method)": [[111, "village.pybpodapi.com.stderr_buffer.StderrBuffer.flush", false]], "flush() (stdoutbuffer method)": [[113, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.flush", false]], "fromlist() (basemessage class method)": [[72, "village.pybpodapi.com.messaging.base_message.BaseMessage.fromlist", false]], "fromlist() (debugmessage class method)": [[74, "village.pybpodapi.com.messaging.debug.DebugMessage.fromlist", false]], "fromlist() (endtrial class method)": [[76, "village.pybpodapi.com.messaging.end_trial.EndTrial.fromlist", false]], "fromlist() (errormessage class method)": [[78, "village.pybpodapi.com.messaging.error.ErrorMessage.fromlist", false]], "fromlist() (eventoccurrence class method)": [[80, "village.pybpodapi.com.messaging.event_occurrence.EventOccurrence.fromlist", false]], "fromlist() (eventresume class method)": [[82, "village.pybpodapi.com.messaging.event_resume.EventResume.fromlist", false]], "fromlist() (messageparser method)": [[84, "village.pybpodapi.com.messaging.parser.MessageParser.fromlist", false]], "fromlist() (sessioninfo class method)": [[86, "village.pybpodapi.com.messaging.session_info.SessionInfo.fromlist", false]], "fromlist() (softcodeoccurrence class method)": [[88, "village.pybpodapi.com.messaging.softcode_occurrence.SoftcodeOccurrence.fromlist", false]], "fromlist() (stateoccurrence class method)": [[90, "village.pybpodapi.com.messaging.state_occurrence.StateOccurrence.fromlist", false]], "fromlist() (statetransition class method)": [[92, "village.pybpodapi.com.messaging.state_transition.StateTransition.fromlist", false]], "fromlist() (stderrmessage class method)": [[94, "village.pybpodapi.com.messaging.stderr.StderrMessage.fromlist", false]], "fromlist() (stdoutmessage class method)": [[96, "village.pybpodapi.com.messaging.stdout.StdoutMessage.fromlist", false]], "fromlist() (trial class method)": [[98, "village.pybpodapi.com.messaging.trial.Trial.fromlist", false]], "fromlist() (untaggedmessage class method)": [[100, "village.pybpodapi.com.messaging.untagged_message.UntaggedMessage.fromlist", false]], "fromlist() (valuemessage class method)": [[102, "village.pybpodapi.com.messaging.value.ValueMessage.fromlist", false]], "fromlist() (warningmessage class method)": [[104, "village.pybpodapi.com.messaging.warning.WarningMessage.fromlist", false]], "get() (settings method)": [[16, "village.classes.settings_class.Settings.get", false]], "get_all_timestamps_by_event() (trial method)": [[98, "village.pybpodapi.com.messaging.trial.Trial.get_all_timestamps_by_event", false]], "get_description() (settings method)": [[16, "village.classes.settings_class.Settings.get_description", false]], "get_event_name() (channels method)": [[38, "village.pybpodapi.bpod.hardware.channels.Channels.get_event_name", false]], "get_events_names() (trial method)": [[98, "village.pybpodapi.com.messaging.trial.Trial.get_events_names", false]], "get_index() (settings method)": [[16, "village.classes.settings_class.Settings.get_index", false]], "get_indices() (settings method)": [[16, "village.classes.settings_class.Settings.get_indices", false]], "get_modules (sendmessageheader attribute)": [[109, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.GET_MODULES", false]], "get_text() (settings method)": [[16, "village.classes.settings_class.Settings.get_text", false]], "get_timestamp_transmission (sendmessageheader attribute)": [[109, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.GET_TIMESTAMP_TRANSMISSION", false]], "get_timestamps_by_event_name() (trial method)": [[98, "village.pybpodapi.com.messaging.trial.Trial.get_timestamps_by_event_name", false]], "get_type() (settings method)": [[16, "village.classes.settings_class.Settings.get_type", false]], "get_values() (settings method)": [[16, "village.classes.settings_class.Settings.get_values", false]], "getvalue() (stderrbuffer method)": [[111, "village.pybpodapi.com.stderr_buffer.StderrBuffer.getvalue", false]], "getvalue() (stdoutbuffer method)": [[113, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.getvalue", false]], "globalcounter1end (bpod.events attribute)": [[25, "village.pybpodapi.bpod.Bpod.Events.GlobalCounter1End", false]], "globalcounter1end (bpodbase.events attribute)": [[27, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.GlobalCounter1End", false]], "globalcounter1end (bpodcomprotocol.events attribute)": [[29, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.GlobalCounter1End", false]], "globalcounter1end (bpodcomprotocolmodules.events attribute)": [[31, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.GlobalCounter1End", false]], "globalcounter1end (bpodio.events attribute)": [[33, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.GlobalCounter1End", false]], "globalcounter1end (eventname attribute)": [[44, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.GlobalCounter1End", false]], "globalcounter1reset (bpod.outputchannels attribute)": [[25, "village.pybpodapi.bpod.Bpod.OutputChannels.GlobalCounter1Reset", false]], "globalcounter1reset (bpodbase.outputchannels attribute)": [[27, "village.pybpodapi.bpod.bpod_base.BpodBase.OutputChannels.GlobalCounter1Reset", false]], "globalcounter1reset (bpodcomprotocol.outputchannels attribute)": [[29, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.OutputChannels.GlobalCounter1Reset", false]], "globalcounter1reset (bpodcomprotocolmodules.outputchannels attribute)": [[31, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.OutputChannels.GlobalCounter1Reset", false]], "globalcounter1reset (bpodio.outputchannels attribute)": [[33, "village.pybpodapi.bpod.bpod_io.BpodIO.OutputChannels.GlobalCounter1Reset", false]], "globalcounter1reset (outputchannel attribute)": [[52, "village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.OutputChannel.GlobalCounter1Reset", false]], "globalcounters (class in village.pybpodapi.state_machine.global_counters)": [[126, "village.pybpodapi.state_machine.global_counters.GlobalCounters", false]], "globaltimer1cancel (bpod.outputchannels attribute)": [[25, "village.pybpodapi.bpod.Bpod.OutputChannels.GlobalTimer1Cancel", false]], "globaltimer1cancel (bpodbase.outputchannels attribute)": [[27, "village.pybpodapi.bpod.bpod_base.BpodBase.OutputChannels.GlobalTimer1Cancel", false]], "globaltimer1cancel (bpodcomprotocol.outputchannels attribute)": [[29, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.OutputChannels.GlobalTimer1Cancel", false]], "globaltimer1cancel (bpodcomprotocolmodules.outputchannels attribute)": [[31, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.OutputChannels.GlobalTimer1Cancel", false]], "globaltimer1cancel (bpodio.outputchannels attribute)": [[33, "village.pybpodapi.bpod.bpod_io.BpodIO.OutputChannels.GlobalTimer1Cancel", false]], "globaltimer1cancel (outputchannel attribute)": [[52, "village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.OutputChannel.GlobalTimer1Cancel", false]], "globaltimer1end (bpod.events attribute)": [[25, "village.pybpodapi.bpod.Bpod.Events.GlobalTimer1End", false]], "globaltimer1end (bpodbase.events attribute)": [[27, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.GlobalTimer1End", false]], "globaltimer1end (bpodcomprotocol.events attribute)": [[29, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.GlobalTimer1End", false]], "globaltimer1end (bpodcomprotocolmodules.events attribute)": [[31, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.GlobalTimer1End", false]], "globaltimer1end (bpodio.events attribute)": [[33, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.GlobalTimer1End", false]], "globaltimer1end (eventname attribute)": [[44, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.GlobalTimer1End", false]], "globaltimer1start (bpod.events attribute)": [[25, "village.pybpodapi.bpod.Bpod.Events.GlobalTimer1Start", false]], "globaltimer1start (bpodbase.events attribute)": [[27, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.GlobalTimer1Start", false]], "globaltimer1start (bpodcomprotocol.events attribute)": [[29, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.GlobalTimer1Start", false]], "globaltimer1start (bpodcomprotocolmodules.events attribute)": [[31, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.GlobalTimer1Start", false]], "globaltimer1start (bpodio.events attribute)": [[33, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.GlobalTimer1Start", false]], "globaltimer1start (eventname attribute)": [[44, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.GlobalTimer1Start", false]], "globaltimer1trig (bpod.outputchannels attribute)": [[25, "village.pybpodapi.bpod.Bpod.OutputChannels.GlobalTimer1Trig", false]], "globaltimer1trig (bpodbase.outputchannels attribute)": [[27, "village.pybpodapi.bpod.bpod_base.BpodBase.OutputChannels.GlobalTimer1Trig", false]], "globaltimer1trig (bpodcomprotocol.outputchannels attribute)": [[29, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.OutputChannels.GlobalTimer1Trig", false]], "globaltimer1trig (bpodcomprotocolmodules.outputchannels attribute)": [[31, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.OutputChannels.GlobalTimer1Trig", false]], "globaltimer1trig (bpodio.outputchannels attribute)": [[33, "village.pybpodapi.bpod.bpod_io.BpodIO.OutputChannels.GlobalTimer1Trig", false]], "globaltimer1trig (outputchannel attribute)": [[52, "village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.OutputChannel.GlobalTimer1Trig", false]], "globaltimers (class in village.pybpodapi.state_machine.global_timers)": [[128, "village.pybpodapi.state_machine.global_timers.GlobalTimers", false]], "handshake (sendmessageheader attribute)": [[109, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.HANDSHAKE", false]], "handshake_ok (receivemessageheader attribute)": [[107, "village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader.HANDSHAKE_OK", false]], "hardware (class in village.pybpodapi.bpod.hardware.hardware)": [[46, "village.pybpodapi.bpod.hardware.hardware.Hardware", false]], "hardware_description (sendmessageheader attribute)": [[109, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.HARDWARE_DESCRIPTION", false]], "info (class in village.classes.enums)": [[10, "village.classes.enums.Info", false]], "input (bpod.channeltypes attribute)": [[25, "village.pybpodapi.bpod.Bpod.ChannelTypes.INPUT", false]], "input (bpodbase.channeltypes attribute)": [[27, "village.pybpodapi.bpod.bpod_base.BpodBase.ChannelTypes.INPUT", false]], "input (bpodcomprotocol.channeltypes attribute)": [[29, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.ChannelTypes.INPUT", false]], "input (bpodcomprotocolmodules.channeltypes attribute)": [[31, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.ChannelTypes.INPUT", false]], "input (bpodio.channeltypes attribute)": [[33, "village.pybpodapi.bpod.bpod_io.BpodIO.ChannelTypes.INPUT", false]], "input (channeltype attribute)": [[37, "village.pybpodapi.bpod.hardware.channels.ChannelType.INPUT", false]], "inputname (class in village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels)": [[49, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName", false]], "is_condition() (baseeventname static method)": [[42, "village.pybpodapi.bpod.hardware.events.base_eventname.BaseEventName.is_condition", false]], "is_condition() (bpod.events static method)": [[25, "village.pybpodapi.bpod.Bpod.Events.is_condition", false]], "is_condition() (bpodbase.events static method)": [[27, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.is_condition", false]], "is_condition() (bpodcomprotocol.events static method)": [[29, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.is_condition", false]], "is_condition() (bpodcomprotocolmodules.events static method)": [[31, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.is_condition", false]], "is_condition() (bpodio.events static method)": [[33, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.is_condition", false]], "is_condition() (eventname static method)": [[44, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.is_condition", false]], "is_global_counter_end() (baseeventname static method)": [[42, "village.pybpodapi.bpod.hardware.events.base_eventname.BaseEventName.is_global_counter_end", false]], "is_global_counter_end() (bpod.events static method)": [[25, "village.pybpodapi.bpod.Bpod.Events.is_global_counter_end", false]], "is_global_counter_end() (bpodbase.events static method)": [[27, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.is_global_counter_end", false]], "is_global_counter_end() (bpodcomprotocol.events static method)": [[29, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.is_global_counter_end", false]], "is_global_counter_end() (bpodcomprotocolmodules.events static method)": [[31, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.is_global_counter_end", false]], "is_global_counter_end() (bpodio.events static method)": [[33, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.is_global_counter_end", false]], "is_global_counter_end() (eventname static method)": [[44, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.is_global_counter_end", false]], "is_global_timer_cancel() (baseeventname static method)": [[42, "village.pybpodapi.bpod.hardware.events.base_eventname.BaseEventName.is_global_timer_cancel", false]], "is_global_timer_cancel() (bpod.events static method)": [[25, "village.pybpodapi.bpod.Bpod.Events.is_global_timer_cancel", false]], "is_global_timer_cancel() (bpodbase.events static method)": [[27, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.is_global_timer_cancel", false]], "is_global_timer_cancel() (bpodcomprotocol.events static method)": [[29, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.is_global_timer_cancel", false]], "is_global_timer_cancel() (bpodcomprotocolmodules.events static method)": [[31, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.is_global_timer_cancel", false]], "is_global_timer_cancel() (bpodio.events static method)": [[33, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.is_global_timer_cancel", false]], "is_global_timer_cancel() (eventname static method)": [[44, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.is_global_timer_cancel", false]], "is_global_timer_end() (baseeventname static method)": [[42, "village.pybpodapi.bpod.hardware.events.base_eventname.BaseEventName.is_global_timer_end", false]], "is_global_timer_end() (bpod.events static method)": [[25, "village.pybpodapi.bpod.Bpod.Events.is_global_timer_end", false]], "is_global_timer_end() (bpodbase.events static method)": [[27, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.is_global_timer_end", false]], "is_global_timer_end() (bpodcomprotocol.events static method)": [[29, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.is_global_timer_end", false]], "is_global_timer_end() (bpodcomprotocolmodules.events static method)": [[31, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.is_global_timer_end", false]], "is_global_timer_end() (bpodio.events static method)": [[33, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.is_global_timer_end", false]], "is_global_timer_end() (eventname static method)": [[44, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.is_global_timer_end", false]], "is_global_timer_start() (baseeventname static method)": [[42, "village.pybpodapi.bpod.hardware.events.base_eventname.BaseEventName.is_global_timer_start", false]], "is_global_timer_start() (bpod.events static method)": [[25, "village.pybpodapi.bpod.Bpod.Events.is_global_timer_start", false]], "is_global_timer_start() (bpodbase.events static method)": [[27, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.is_global_timer_start", false]], "is_global_timer_start() (bpodcomprotocol.events static method)": [[29, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.is_global_timer_start", false]], "is_global_timer_start() (bpodcomprotocolmodules.events static method)": [[31, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.is_global_timer_start", false]], "is_global_timer_start() (bpodio.events static method)": [[33, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.is_global_timer_start", false]], "is_global_timer_start() (eventname static method)": [[44, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.is_global_timer_start", false]], "is_global_timer_trigger() (baseeventname static method)": [[42, "village.pybpodapi.bpod.hardware.events.base_eventname.BaseEventName.is_global_timer_trigger", false]], "is_global_timer_trigger() (bpod.events static method)": [[25, "village.pybpodapi.bpod.Bpod.Events.is_global_timer_trigger", false]], "is_global_timer_trigger() (bpodbase.events static method)": [[27, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.is_global_timer_trigger", false]], "is_global_timer_trigger() (bpodcomprotocol.events static method)": [[29, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.is_global_timer_trigger", false]], "is_global_timer_trigger() (bpodcomprotocolmodules.events static method)": [[31, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.is_global_timer_trigger", false]], "is_global_timer_trigger() (bpodio.events static method)": [[33, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.is_global_timer_trigger", false]], "is_global_timer_trigger() (eventname static method)": [[44, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.is_global_timer_trigger", false]], "is_state_timer() (baseeventname static method)": [[42, "village.pybpodapi.bpod.hardware.events.base_eventname.BaseEventName.is_state_timer", false]], "is_state_timer() (bpod.events static method)": [[25, "village.pybpodapi.bpod.Bpod.Events.is_state_timer", false]], "is_state_timer() (bpodbase.events static method)": [[27, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.is_state_timer", false]], "is_state_timer() (bpodcomprotocol.events static method)": [[29, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.is_state_timer", false]], "is_state_timer() (bpodcomprotocolmodules.events static method)": [[31, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.is_state_timer", false]], "is_state_timer() (bpodio.events static method)": [[33, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.is_state_timer", false]], "is_state_timer() (eventname static method)": [[44, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.is_state_timer", false]], "isatty() (stderrbuffer method)": [[111, "village.pybpodapi.com.stderr_buffer.StderrBuffer.isatty", false]], "isatty() (stdoutbuffer method)": [[113, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.isatty", false]], "load_message() (bpodmodule method)": [[62, "village.pybpodapi.bpod_modules.bpod_module.BpodModule.load_message", false]], "load_serial_message (sendmessageheader attribute)": [[109, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.LOAD_SERIAL_MESSAGE", false]], "load_serial_message() (bpod method)": [[25, "village.pybpodapi.bpod.Bpod.load_serial_message", false]], "load_serial_message() (bpodbase method)": [[27, "village.pybpodapi.bpod.bpod_base.BpodBase.load_serial_message", false]], "load_serial_message() (bpodcomprotocol method)": [[29, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.load_serial_message", false]], "load_serial_message() (bpodcomprotocolmodules method)": [[31, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.load_serial_message", false]], "load_serial_message() (bpodio method)": [[33, "village.pybpodapi.bpod.bpod_io.BpodIO.load_serial_message", false]], "load_serial_message_ok (receivemessageheader attribute)": [[107, "village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader.LOAD_SERIAL_MESSAGE_OK", false]], "loop_handler() (bpod method)": [[25, "village.pybpodapi.bpod.Bpod.loop_handler", false]], "loop_handler() (bpodbase method)": [[27, "village.pybpodapi.bpod.bpod_base.BpodBase.loop_handler", false]], "loop_handler() (bpodcomprotocol method)": [[29, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.loop_handler", false]], "loop_handler() (bpodcomprotocolmodules method)": [[31, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.loop_handler", false]], "loop_handler() (bpodio method)": [[33, "village.pybpodapi.bpod.bpod_io.BpodIO.loop_handler", false]], "manual_override() (bpod method)": [[25, "village.pybpodapi.bpod.Bpod.manual_override", false]], "manual_override() (bpodcomprotocol method)": [[29, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.manual_override", false]], "manual_override() (bpodcomprotocolmodules method)": [[31, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.manual_override", false]], "manual_override() (bpodio method)": [[33, "village.pybpodapi.bpod.bpod_io.BpodIO.manual_override", false]], "manual_override_exec_event (sendmessageheader attribute)": [[109, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.MANUAL_OVERRIDE_EXEC_EVENT", false]], "messageparser (class in village.pybpodapi.com.messaging.parser)": [[84, "village.pybpodapi.com.messaging.parser.MessageParser", false]], "module": [[0, "module-village.classes", false], [1, "module-village.classes.change_hour_run", false], [3, "module-village.classes.enums", false], [14, "module-village.classes.settings_class", false], [17, "module-village.classes.training", false], [21, "module-village.devices", false], [22, "module-village.gui", false], [23, "module-village.pybpodapi", false], [24, "module-village.pybpodapi.bpod", false], [26, "module-village.pybpodapi.bpod.bpod_base", false], [28, "module-village.pybpodapi.bpod.bpod_com_protocol", false], [30, "module-village.pybpodapi.bpod.bpod_com_protocol_modules", false], [32, "module-village.pybpodapi.bpod.bpod_io", false], [34, "module-village.pybpodapi.bpod.hardware", false], [35, "module-village.pybpodapi.bpod.hardware.channels", false], [40, "module-village.pybpodapi.bpod.hardware.events", false], [41, "module-village.pybpodapi.bpod.hardware.events.base_eventname", false], [43, "module-village.pybpodapi.bpod.hardware.events.bpod_events", false], [45, "module-village.pybpodapi.bpod.hardware.hardware", false], [47, "module-village.pybpodapi.bpod.hardware.input_channels", false], [48, "module-village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels", false], [50, "module-village.pybpodapi.bpod.hardware.output_channels", false], [51, "module-village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels", false], [53, "module-village.pybpodapi.bpod.non_blockingsocketreceive", false], [56, "module-village.pybpodapi.bpod.non_blockingstreamreader", false], [59, "module-village.pybpodapi.bpod.settings", false], [60, "module-village.pybpodapi.bpod_modules", false], [61, "module-village.pybpodapi.bpod_modules.bpod_module", false], [63, "module-village.pybpodapi.bpod_modules.bpod_modules", false], [65, "module-village.pybpodapi.com", false], [66, "module-village.pybpodapi.com.arcom", false], [70, "module-village.pybpodapi.com.messaging", false], [71, "module-village.pybpodapi.com.messaging.base_message", false], [73, "module-village.pybpodapi.com.messaging.debug", false], [75, "module-village.pybpodapi.com.messaging.end_trial", false], [77, "module-village.pybpodapi.com.messaging.error", false], [79, "module-village.pybpodapi.com.messaging.event_occurrence", false], [81, "module-village.pybpodapi.com.messaging.event_resume", false], [83, "module-village.pybpodapi.com.messaging.parser", false], [85, "module-village.pybpodapi.com.messaging.session_info", false], [87, "module-village.pybpodapi.com.messaging.softcode_occurrence", false], [89, "module-village.pybpodapi.com.messaging.state_occurrence", false], [91, "module-village.pybpodapi.com.messaging.state_transition", false], [93, "module-village.pybpodapi.com.messaging.stderr", false], [95, "module-village.pybpodapi.com.messaging.stdout", false], [97, "module-village.pybpodapi.com.messaging.trial", false], [99, "module-village.pybpodapi.com.messaging.untagged_message", false], [101, "module-village.pybpodapi.com.messaging.value", false], [103, "module-village.pybpodapi.com.messaging.warning", false], [105, "module-village.pybpodapi.com.protocol", false], [106, "module-village.pybpodapi.com.protocol.recv_msg_headers", false], [108, "module-village.pybpodapi.com.protocol.send_msg_headers", false], [110, "module-village.pybpodapi.com.stderr_buffer", false], [112, "module-village.pybpodapi.com.stdout_buffer", false], [114, "module-village.pybpodapi.exceptions", false], [115, "module-village.pybpodapi.exceptions.bpod_error", false], [117, "module-village.pybpodapi.protocol", false], [118, "module-village.pybpodapi.session", false], [121, "module-village.pybpodapi.state_machine", false], [123, "module-village.pybpodapi.state_machine.conditions", false], [125, "module-village.pybpodapi.state_machine.global_counters", false], [127, "module-village.pybpodapi.state_machine.global_timers", false], [129, "module-village.pybpodapi.state_machine.state_machine_base", false], [132, "module-village.pybpodapi.state_machine.state_machine_builder", false], [135, "module-village.pybpodapi.state_machine.state_machine_runner", false], [138, "module-village.pybpodapi.utils", false], [139, "module-village.pybpodapi.utils.csv", false], [142, "module-village.pybpodapi.utils.date_parser", false], [144, "module-village.screen", false], [145, "module-village.screen.behavior_window", false]], "module_event_names (receivemessageheader attribute)": [[107, "village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader.MODULE_EVENT_NAMES", false]], "module_requested_event (receivemessageheader attribute)": [[107, "village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader.MODULE_REQUESTED_EVENT", false]], "new_state_matrix (sendmessageheader attribute)": [[109, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.NEW_STATE_MATRIX", false]], "newlines (stderrbuffer attribute)": [[111, "village.pybpodapi.com.stderr_buffer.StderrBuffer.newlines", false]], "newlines (stdoutbuffer attribute)": [[113, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.newlines", false]], "nonblockingsocketreceive (class in village.pybpodapi.bpod.non_blockingsocketreceive)": [[54, "village.pybpodapi.bpod.non_blockingsocketreceive.NonBlockingSocketReceive", false]], "nonblockingstreamreader (class in village.pybpodapi.bpod.non_blockingstreamreader)": [[57, "village.pybpodapi.bpod.non_blockingstreamreader.NonBlockingStreamReader", false]], "open() (arcom method)": [[67, "village.pybpodapi.com.arcom.ArCOM.open", false]], "open() (bpod method)": [[25, "village.pybpodapi.bpod.Bpod.open", false]], "open() (bpodbase method)": [[27, "village.pybpodapi.bpod.bpod_base.BpodBase.open", false]], "open() (bpodcomprotocol method)": [[29, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.open", false]], "open() (bpodcomprotocolmodules method)": [[31, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.open", false]], "open() (bpodio method)": [[33, "village.pybpodapi.bpod.bpod_io.BpodIO.open", false]], "output (bpod.channeltypes attribute)": [[25, "village.pybpodapi.bpod.Bpod.ChannelTypes.OUTPUT", false]], "output (bpodbase.channeltypes attribute)": [[27, "village.pybpodapi.bpod.bpod_base.BpodBase.ChannelTypes.OUTPUT", false]], "output (bpodcomprotocol.channeltypes attribute)": [[29, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.ChannelTypes.OUTPUT", false]], "output (bpodcomprotocolmodules.channeltypes attribute)": [[31, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.ChannelTypes.OUTPUT", false]], "output (bpodio.channeltypes attribute)": [[33, "village.pybpodapi.bpod.bpod_io.BpodIO.ChannelTypes.OUTPUT", false]], "output (channeltype attribute)": [[37, "village.pybpodapi.bpod.hardware.channels.ChannelType.OUTPUT", false]], "outputchannel (class in village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels)": [[52, "village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.OutputChannel", false]], "override_digital_hw_state (sendmessageheader attribute)": [[109, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.OVERRIDE_DIGITAL_HW_STATE", false]], "pa1_port1in (bpod.events attribute)": [[25, "village.pybpodapi.bpod.Bpod.Events.PA1_Port1In", false]], "pa1_port1in (bpodbase.events attribute)": [[27, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.PA1_Port1In", false]], "pa1_port1in (bpodcomprotocol.events attribute)": [[29, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.PA1_Port1In", false]], "pa1_port1in (bpodcomprotocolmodules.events attribute)": [[31, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.PA1_Port1In", false]], "pa1_port1in (bpodio.events attribute)": [[33, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.PA1_Port1In", false]], "pa1_port1in (eventname attribute)": [[44, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.PA1_Port1In", false]], "parse() (in module village.pybpodapi.utils.date_parser)": [[143, "village.pybpodapi.utils.date_parser.parse", false]], "port1 (inputname attribute)": [[49, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Port1", false]], "port1in (bpod.events attribute)": [[25, "village.pybpodapi.bpod.Bpod.Events.Port1In", false]], "port1in (bpodbase.events attribute)": [[27, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.Port1In", false]], "port1in (bpodcomprotocol.events attribute)": [[29, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.Port1In", false]], "port1in (bpodcomprotocolmodules.events attribute)": [[31, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.Port1In", false]], "port1in (bpodio.events attribute)": [[33, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.Port1In", false]], "port1in (eventname attribute)": [[44, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.Port1In", false]], "port2 (inputname attribute)": [[49, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Port2", false]], "port3 (inputname attribute)": [[49, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Port3", false]], "port4 (inputname attribute)": [[49, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Port4", false]], "port5 (inputname attribute)": [[49, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Port5", false]], "port6 (inputname attribute)": [[49, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Port6", false]], "port7 (inputname attribute)": [[49, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Port7", false]], "port8 (inputname attribute)": [[49, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Port8", false]], "pwm (bpod.channelnames attribute)": [[25, "village.pybpodapi.bpod.Bpod.ChannelNames.PWM", false]], "pwm (bpodbase.channelnames attribute)": [[27, "village.pybpodapi.bpod.bpod_base.BpodBase.ChannelNames.PWM", false]], "pwm (bpodcomprotocol.channelnames attribute)": [[29, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.ChannelNames.PWM", false]], "pwm (bpodcomprotocolmodules.channelnames attribute)": [[31, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.ChannelNames.PWM", false]], "pwm (bpodio.channelnames attribute)": [[33, "village.pybpodapi.bpod.bpod_io.BpodIO.ChannelNames.PWM", false]], "pwm (channelname attribute)": [[36, "village.pybpodapi.bpod.hardware.channels.ChannelName.PWM", false]], "read() (stderrbuffer method)": [[111, "village.pybpodapi.com.stderr_buffer.StderrBuffer.read", false]], "read() (stdoutbuffer method)": [[113, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.read", false]], "readable() (stderrbuffer method)": [[111, "village.pybpodapi.com.stderr_buffer.StderrBuffer.readable", false]], "readable() (stdoutbuffer method)": [[113, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.readable", false]], "reader (class in village.pybpodapi.utils.csv)": [[140, "village.pybpodapi.utils.csv.Reader", false]], "readline() (stderrbuffer method)": [[111, "village.pybpodapi.com.stderr_buffer.StderrBuffer.readline", false]], "readline() (stdoutbuffer method)": [[113, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.readline", false]], "readlines() (stderrbuffer method)": [[111, "village.pybpodapi.com.stderr_buffer.StderrBuffer.readlines", false]], "readlines() (stdoutbuffer method)": [[113, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.readlines", false]], "receivemessageheader (class in village.pybpodapi.com.protocol.recv_msg_headers)": [[107, "village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader", false]], "reset_clock (sendmessageheader attribute)": [[109, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.RESET_CLOCK", false]], "reset_serial_messages (receivemessageheader attribute)": [[107, "village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader.RESET_SERIAL_MESSAGES", false]], "reset_serial_messages (sendmessageheader attribute)": [[109, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.RESET_SERIAL_MESSAGES", false]], "reset_serial_messages() (bpod method)": [[25, "village.pybpodapi.bpod.Bpod.reset_serial_messages", false]], "reset_serial_messages() (bpodbase method)": [[27, "village.pybpodapi.bpod.bpod_base.BpodBase.reset_serial_messages", false]], "reset_serial_messages() (bpodcomprotocol method)": [[29, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.reset_serial_messages", false]], "reset_serial_messages() (bpodcomprotocolmodules method)": [[31, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.reset_serial_messages", false]], "reset_serial_messages() (bpodio method)": [[33, "village.pybpodapi.bpod.bpod_io.BpodIO.reset_serial_messages", false]], "run_state_machine (sendmessageheader attribute)": [[109, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.RUN_STATE_MACHINE", false]], "run_state_machine() (bpod method)": [[25, "village.pybpodapi.bpod.Bpod.run_state_machine", false]], "run_state_machine() (bpodbase method)": [[27, "village.pybpodapi.bpod.bpod_base.BpodBase.run_state_machine", false]], "run_state_machine() (bpodcomprotocol method)": [[29, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.run_state_machine", false]], "run_state_machine() (bpodcomprotocolmodules method)": [[31, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.run_state_machine", false]], "run_state_machine() (bpodio method)": [[33, "village.pybpodapi.bpod.bpod_io.BpodIO.run_state_machine", false]], "screenactive (class in village.classes.enums)": [[11, "village.classes.enums.ScreenActive", false]], "seek() (stderrbuffer method)": [[111, "village.pybpodapi.com.stderr_buffer.StderrBuffer.seek", false]], "seek() (stdoutbuffer method)": [[113, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.seek", false]], "seekable() (stderrbuffer method)": [[111, "village.pybpodapi.com.stderr_buffer.StderrBuffer.seekable", false]], "seekable() (stdoutbuffer method)": [[113, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.seekable", false]], "send_state_machine() (bpod method)": [[25, "village.pybpodapi.bpod.Bpod.send_state_machine", false]], "send_state_machine() (bpodbase method)": [[27, "village.pybpodapi.bpod.bpod_base.BpodBase.send_state_machine", false]], "send_state_machine() (bpodcomprotocol method)": [[29, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.send_state_machine", false]], "send_state_machine() (bpodcomprotocolmodules method)": [[31, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.send_state_machine", false]], "send_state_machine() (bpodio method)": [[33, "village.pybpodapi.bpod.bpod_io.BpodIO.send_state_machine", false]], "send_to_hw_serial (sendmessageheader attribute)": [[109, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.SEND_TO_HW_SERIAL", false]], "sendmessageheader (class in village.pybpodapi.com.protocol.send_msg_headers)": [[109, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader", false]], "serial (bpod.channelnames attribute)": [[25, "village.pybpodapi.bpod.Bpod.ChannelNames.SERIAL", false]], "serial (bpodbase.channelnames attribute)": [[27, "village.pybpodapi.bpod.bpod_base.BpodBase.ChannelNames.SERIAL", false]], "serial (bpodcomprotocol.channelnames attribute)": [[29, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.ChannelNames.SERIAL", false]], "serial (bpodcomprotocolmodules.channelnames attribute)": [[31, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.ChannelNames.SERIAL", false]], "serial (bpodio.channelnames attribute)": [[33, "village.pybpodapi.bpod.bpod_io.BpodIO.ChannelNames.SERIAL", false]], "serial (channelname attribute)": [[36, "village.pybpodapi.bpod.hardware.channels.ChannelName.SERIAL", false]], "serial1 (bpod.outputchannels attribute)": [[25, "village.pybpodapi.bpod.Bpod.OutputChannels.Serial1", false]], "serial1 (bpodbase.outputchannels attribute)": [[27, "village.pybpodapi.bpod.bpod_base.BpodBase.OutputChannels.Serial1", false]], "serial1 (bpodcomprotocol.outputchannels attribute)": [[29, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.OutputChannels.Serial1", false]], "serial1 (bpodcomprotocolmodules.outputchannels attribute)": [[31, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.OutputChannels.Serial1", false]], "serial1 (bpodio.outputchannels attribute)": [[33, "village.pybpodapi.bpod.bpod_io.BpodIO.OutputChannels.Serial1", false]], "serial1 (inputname attribute)": [[49, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Serial1", false]], "serial1 (outputchannel attribute)": [[52, "village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.OutputChannel.Serial1", false]], "serial2 (inputname attribute)": [[49, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Serial2", false]], "serial3 (inputname attribute)": [[49, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Serial3", false]], "session (class in village.pybpodapi.session)": [[119, "village.pybpodapi.session.Session", false]], "sessioninfo (class in village.pybpodapi.com.messaging.session_info)": [[86, "village.pybpodapi.com.messaging.session_info.SessionInfo", false]], "set_condition() (statemachine method)": [[122, "village.pybpodapi.state_machine.StateMachine.set_condition", false]], "set_condition() (statemachinebase method)": [[131, "village.pybpodapi.state_machine.state_machine_base.StateMachineBase.set_condition", false]], "set_condition() (statemachinebuilder method)": [[133, "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder.set_condition", false]], "set_condition() (statemachinerunner method)": [[136, "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner.set_condition", false]], "set_global_counter() (statemachine method)": [[122, "village.pybpodapi.state_machine.StateMachine.set_global_counter", false]], "set_global_counter() (statemachinebase method)": [[131, "village.pybpodapi.state_machine.state_machine_base.StateMachineBase.set_global_counter", false]], "set_global_counter() (statemachinebuilder method)": [[133, "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder.set_global_counter", false]], "set_global_counter() (statemachinerunner method)": [[136, "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner.set_global_counter", false]], "set_global_timer() (statemachine method)": [[122, "village.pybpodapi.state_machine.StateMachine.set_global_timer", false]], "set_global_timer() (statemachinebase method)": [[131, "village.pybpodapi.state_machine.state_machine_base.StateMachineBase.set_global_timer", false]], "set_global_timer() (statemachinebuilder method)": [[133, "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder.set_global_timer", false]], "set_global_timer() (statemachinerunner method)": [[136, "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner.set_global_timer", false]], "set_global_timer_legacy() (statemachine method)": [[122, "village.pybpodapi.state_machine.StateMachine.set_global_timer_legacy", false]], "set_global_timer_legacy() (statemachinebase method)": [[131, "village.pybpodapi.state_machine.state_machine_base.StateMachineBase.set_global_timer_legacy", false]], "set_global_timer_legacy() (statemachinebuilder method)": [[133, "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder.set_global_timer_legacy", false]], "set_global_timer_legacy() (statemachinerunner method)": [[136, "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner.set_global_timer_legacy", false]], "set_module_relay (sendmessageheader attribute)": [[109, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.SET_MODULE_RELAY", false]], "setting (class in village.classes.settings_class)": [[15, "village.classes.settings_class.Setting", false]], "settings (class in village.classes.settings_class)": [[16, "village.classes.settings_class.Settings", false]], "settings (class in village.classes.training)": [[18, "village.classes.training.Settings", false]], "setup() (hardware method)": [[46, "village.pybpodapi.bpod.hardware.hardware.Hardware.setup", false]], "setup_input_channels() (channels method)": [[38, "village.pybpodapi.bpod.hardware.channels.Channels.setup_input_channels", false]], "setup_output_channels() (channels method)": [[38, "village.pybpodapi.bpod.hardware.channels.Channels.setup_output_channels", false]], "smaerror": [[130, "village.pybpodapi.state_machine.state_machine_base.SMAError", false]], "softcode1 (bpod.outputchannels attribute)": [[25, "village.pybpodapi.bpod.Bpod.OutputChannels.SoftCode1", false]], "softcode1 (bpodbase.outputchannels attribute)": [[27, "village.pybpodapi.bpod.bpod_base.BpodBase.OutputChannels.SoftCode1", false]], "softcode1 (bpodcomprotocol.outputchannels attribute)": [[29, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.OutputChannels.SoftCode1", false]], "softcode1 (bpodcomprotocolmodules.outputchannels attribute)": [[31, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.OutputChannels.SoftCode1", false]], "softcode1 (bpodio.outputchannels attribute)": [[33, "village.pybpodapi.bpod.bpod_io.BpodIO.OutputChannels.SoftCode1", false]], "softcode1 (outputchannel attribute)": [[52, "village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.OutputChannel.SoftCode1", false]], "softcode_handler_function() (bpod method)": [[25, "village.pybpodapi.bpod.Bpod.softcode_handler_function", false]], "softcode_handler_function() (bpodbase method)": [[27, "village.pybpodapi.bpod.bpod_base.BpodBase.softcode_handler_function", false]], "softcode_handler_function() (bpodcomprotocol method)": [[29, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.softcode_handler_function", false]], "softcode_handler_function() (bpodcomprotocolmodules method)": [[31, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.softcode_handler_function", false]], "softcode_handler_function() (bpodio method)": [[33, "village.pybpodapi.bpod.bpod_io.BpodIO.softcode_handler_function", false]], "softcodeoccurrence (class in village.pybpodapi.com.messaging.softcode_occurrence)": [[88, "village.pybpodapi.com.messaging.softcode_occurrence.SoftcodeOccurrence", false]], "state (class in village.classes.enums)": [[12, "village.classes.enums.State", false]], "state_machine_installation_status (receivemessageheader attribute)": [[107, "village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader.STATE_MACHINE_INSTALLATION_STATUS", false]], "statemachine (class in village.pybpodapi.state_machine)": [[122, "village.pybpodapi.state_machine.StateMachine", false]], "statemachinebase (class in village.pybpodapi.state_machine.state_machine_base)": [[131, "village.pybpodapi.state_machine.state_machine_base.StateMachineBase", false]], "statemachinebuilder (class in village.pybpodapi.state_machine.state_machine_builder)": [[133, "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder", false]], "statemachinebuildererror": [[134, "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilderError", false]], "statemachinerunner (class in village.pybpodapi.state_machine.state_machine_runner)": [[136, "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner", false]], "statemachinerunnererror": [[137, "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunnerError", false]], "stateoccurrence (class in village.pybpodapi.com.messaging.state_occurrence)": [[90, "village.pybpodapi.com.messaging.state_occurrence.StateOccurrence", false]], "statetransition (class in village.pybpodapi.com.messaging.state_transition)": [[92, "village.pybpodapi.com.messaging.state_transition.StateTransition", false]], "stderrbuffer (class in village.pybpodapi.com.stderr_buffer)": [[111, "village.pybpodapi.com.stderr_buffer.StderrBuffer", false]], "stderrmessage (class in village.pybpodapi.com.messaging.stderr)": [[94, "village.pybpodapi.com.messaging.stderr.StderrMessage", false]], "stdoutbuffer (class in village.pybpodapi.com.stdout_buffer)": [[113, "village.pybpodapi.com.stdout_buffer.StdoutBuffer", false]], "stdoutmessage (class in village.pybpodapi.com.messaging.stdout)": [[96, "village.pybpodapi.com.messaging.stdout.StdoutMessage", false]], "streamswrapper (class in village.pybpodapi.session)": [[120, "village.pybpodapi.session.StreamsWrapper", false]], "superenum (class in village.classes.enums)": [[13, "village.classes.enums.SuperEnum", false]], "sync_channel_mode (sendmessageheader attribute)": [[109, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.SYNC_CHANNEL_MODE", false]], "sync_channel_mode_ok (receivemessageheader attribute)": [[107, "village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader.SYNC_CHANNEL_MODE_OK", false]], "tell() (stderrbuffer method)": [[111, "village.pybpodapi.com.stderr_buffer.StderrBuffer.tell", false]], "tell() (stdoutbuffer method)": [[113, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.tell", false]], "training (class in village.classes.training)": [[19, "village.classes.training.Training", false]], "trainingerror": [[20, "village.classes.training.TrainingError", false]], "trial (class in village.pybpodapi.com.messaging.trial)": [[98, "village.pybpodapi.com.messaging.trial.Trial", false]], "trigger_softcode (sendmessageheader attribute)": [[109, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.TRIGGER_SOFTCODE", false]], "truncate() (stderrbuffer method)": [[111, "village.pybpodapi.com.stderr_buffer.StderrBuffer.truncate", false]], "truncate() (stdoutbuffer method)": [[113, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.truncate", false]], "tup (bpod.events attribute)": [[25, "village.pybpodapi.bpod.Bpod.Events.Tup", false]], "tup (bpodbase.events attribute)": [[27, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.Tup", false]], "tup (bpodcomprotocol.events attribute)": [[29, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.Tup", false]], "tup (bpodcomprotocolmodules.events attribute)": [[31, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.Tup", false]], "tup (bpodio.events attribute)": [[33, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.Tup", false]], "tup (eventname attribute)": [[44, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.Tup", false]], "unexpectedendofstream": [[55, "village.pybpodapi.bpod.non_blockingsocketreceive.UnexpectedEndOfStream", false], [58, "village.pybpodapi.bpod.non_blockingstreamreader.UnexpectedEndOfStream", false]], "untaggedmessage (class in village.pybpodapi.com.messaging.untagged_message)": [[100, "village.pybpodapi.com.messaging.untagged_message.UntaggedMessage", false]], "update_state_numbers() (statemachine method)": [[122, "village.pybpodapi.state_machine.StateMachine.update_state_numbers", false]], "update_state_numbers() (statemachinebuilder method)": [[133, "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder.update_state_numbers", false]], "update_state_numbers() (statemachinerunner method)": [[136, "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner.update_state_numbers", false]], "usb1 (inputname attribute)": [[49, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.USB1", false]], "valuemessage (class in village.pybpodapi.com.messaging.value)": [[102, "village.pybpodapi.com.messaging.value.ValueMessage", false]], "valve (bpod.channelnames attribute)": [[25, "village.pybpodapi.bpod.Bpod.ChannelNames.VALVE", false]], "valve (bpodbase.channelnames attribute)": [[27, "village.pybpodapi.bpod.bpod_base.BpodBase.ChannelNames.VALVE", false]], "valve (bpodcomprotocol.channelnames attribute)": [[29, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.ChannelNames.VALVE", false]], "valve (bpodcomprotocolmodules.channelnames attribute)": [[31, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.ChannelNames.VALVE", false]], "valve (bpodio.channelnames attribute)": [[33, "village.pybpodapi.bpod.bpod_io.BpodIO.ChannelNames.VALVE", false]], "valve (channelname attribute)": [[36, "village.pybpodapi.bpod.hardware.channels.ChannelName.VALVE", false]], "valve1 (bpod.outputchannels attribute)": [[25, "village.pybpodapi.bpod.Bpod.OutputChannels.Valve1", false]], "valve1 (bpodbase.outputchannels attribute)": [[27, "village.pybpodapi.bpod.bpod_base.BpodBase.OutputChannels.Valve1", false]], "valve1 (bpodcomprotocol.outputchannels attribute)": [[29, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.OutputChannels.Valve1", false]], "valve1 (bpodcomprotocolmodules.outputchannels attribute)": [[31, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.OutputChannels.Valve1", false]], "valve1 (bpodio.outputchannels attribute)": [[33, "village.pybpodapi.bpod.bpod_io.BpodIO.OutputChannels.Valve1", false]], "valve1 (outputchannel attribute)": [[52, "village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.OutputChannel.Valve1", false]], "village.classes": [[0, "module-village.classes", false]], "village.classes.change_hour_run": [[1, "module-village.classes.change_hour_run", false]], "village.classes.enums": [[3, "module-village.classes.enums", false]], "village.classes.settings_class": [[14, "module-village.classes.settings_class", false]], "village.classes.training": [[17, "module-village.classes.training", false]], "village.devices": [[21, "module-village.devices", false]], "village.gui": [[22, "module-village.gui", false]], "village.pybpodapi": [[23, "module-village.pybpodapi", false]], "village.pybpodapi.bpod": [[24, "module-village.pybpodapi.bpod", false]], "village.pybpodapi.bpod.bpod_base": [[26, "module-village.pybpodapi.bpod.bpod_base", false]], "village.pybpodapi.bpod.bpod_com_protocol": [[28, "module-village.pybpodapi.bpod.bpod_com_protocol", false]], "village.pybpodapi.bpod.bpod_com_protocol_modules": [[30, "module-village.pybpodapi.bpod.bpod_com_protocol_modules", false]], "village.pybpodapi.bpod.bpod_io": [[32, "module-village.pybpodapi.bpod.bpod_io", false]], "village.pybpodapi.bpod.hardware": [[34, "module-village.pybpodapi.bpod.hardware", false]], "village.pybpodapi.bpod.hardware.channels": [[35, "module-village.pybpodapi.bpod.hardware.channels", false]], "village.pybpodapi.bpod.hardware.events": [[40, "module-village.pybpodapi.bpod.hardware.events", false]], "village.pybpodapi.bpod.hardware.events.base_eventname": [[41, "module-village.pybpodapi.bpod.hardware.events.base_eventname", false]], "village.pybpodapi.bpod.hardware.events.bpod_events": [[43, "module-village.pybpodapi.bpod.hardware.events.bpod_events", false]], "village.pybpodapi.bpod.hardware.hardware": [[45, "module-village.pybpodapi.bpod.hardware.hardware", false]], "village.pybpodapi.bpod.hardware.input_channels": [[47, "module-village.pybpodapi.bpod.hardware.input_channels", false]], "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels": [[48, "module-village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels", false]], "village.pybpodapi.bpod.hardware.output_channels": [[50, "module-village.pybpodapi.bpod.hardware.output_channels", false]], "village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels": [[51, "module-village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels", false]], "village.pybpodapi.bpod.non_blockingsocketreceive": [[53, "module-village.pybpodapi.bpod.non_blockingsocketreceive", false]], "village.pybpodapi.bpod.non_blockingstreamreader": [[56, "module-village.pybpodapi.bpod.non_blockingstreamreader", false]], "village.pybpodapi.bpod.settings": [[59, "module-village.pybpodapi.bpod.settings", false]], "village.pybpodapi.bpod_modules": [[60, "module-village.pybpodapi.bpod_modules", false]], "village.pybpodapi.bpod_modules.bpod_module": [[61, "module-village.pybpodapi.bpod_modules.bpod_module", false]], "village.pybpodapi.bpod_modules.bpod_modules": [[63, "module-village.pybpodapi.bpod_modules.bpod_modules", false]], "village.pybpodapi.com": [[65, "module-village.pybpodapi.com", false]], "village.pybpodapi.com.arcom": [[66, "module-village.pybpodapi.com.arcom", false]], "village.pybpodapi.com.messaging": [[70, "module-village.pybpodapi.com.messaging", false]], "village.pybpodapi.com.messaging.base_message": [[71, "module-village.pybpodapi.com.messaging.base_message", false]], "village.pybpodapi.com.messaging.debug": [[73, "module-village.pybpodapi.com.messaging.debug", false]], "village.pybpodapi.com.messaging.end_trial": [[75, "module-village.pybpodapi.com.messaging.end_trial", false]], "village.pybpodapi.com.messaging.error": [[77, "module-village.pybpodapi.com.messaging.error", false]], "village.pybpodapi.com.messaging.event_occurrence": [[79, "module-village.pybpodapi.com.messaging.event_occurrence", false]], "village.pybpodapi.com.messaging.event_resume": [[81, "module-village.pybpodapi.com.messaging.event_resume", false]], "village.pybpodapi.com.messaging.parser": [[83, "module-village.pybpodapi.com.messaging.parser", false]], "village.pybpodapi.com.messaging.session_info": [[85, "module-village.pybpodapi.com.messaging.session_info", false]], "village.pybpodapi.com.messaging.softcode_occurrence": [[87, "module-village.pybpodapi.com.messaging.softcode_occurrence", false]], "village.pybpodapi.com.messaging.state_occurrence": [[89, "module-village.pybpodapi.com.messaging.state_occurrence", false]], "village.pybpodapi.com.messaging.state_transition": [[91, "module-village.pybpodapi.com.messaging.state_transition", false]], "village.pybpodapi.com.messaging.stderr": [[93, "module-village.pybpodapi.com.messaging.stderr", false]], "village.pybpodapi.com.messaging.stdout": [[95, "module-village.pybpodapi.com.messaging.stdout", false]], "village.pybpodapi.com.messaging.trial": [[97, "module-village.pybpodapi.com.messaging.trial", false]], "village.pybpodapi.com.messaging.untagged_message": [[99, "module-village.pybpodapi.com.messaging.untagged_message", false]], "village.pybpodapi.com.messaging.value": [[101, "module-village.pybpodapi.com.messaging.value", false]], "village.pybpodapi.com.messaging.warning": [[103, "module-village.pybpodapi.com.messaging.warning", false]], "village.pybpodapi.com.protocol": [[105, "module-village.pybpodapi.com.protocol", false]], "village.pybpodapi.com.protocol.recv_msg_headers": [[106, "module-village.pybpodapi.com.protocol.recv_msg_headers", false]], "village.pybpodapi.com.protocol.send_msg_headers": [[108, "module-village.pybpodapi.com.protocol.send_msg_headers", false]], "village.pybpodapi.com.stderr_buffer": [[110, "module-village.pybpodapi.com.stderr_buffer", false]], "village.pybpodapi.com.stdout_buffer": [[112, "module-village.pybpodapi.com.stdout_buffer", false]], "village.pybpodapi.exceptions": [[114, "module-village.pybpodapi.exceptions", false]], "village.pybpodapi.exceptions.bpod_error": [[115, "module-village.pybpodapi.exceptions.bpod_error", false]], "village.pybpodapi.protocol": [[117, "module-village.pybpodapi.protocol", false]], "village.pybpodapi.session": [[118, "module-village.pybpodapi.session", false]], "village.pybpodapi.state_machine": [[121, "module-village.pybpodapi.state_machine", false]], "village.pybpodapi.state_machine.conditions": [[123, "module-village.pybpodapi.state_machine.conditions", false]], "village.pybpodapi.state_machine.global_counters": [[125, "module-village.pybpodapi.state_machine.global_counters", false]], "village.pybpodapi.state_machine.global_timers": [[127, "module-village.pybpodapi.state_machine.global_timers", false]], "village.pybpodapi.state_machine.state_machine_base": [[129, "module-village.pybpodapi.state_machine.state_machine_base", false]], "village.pybpodapi.state_machine.state_machine_builder": [[132, "module-village.pybpodapi.state_machine.state_machine_builder", false]], "village.pybpodapi.state_machine.state_machine_runner": [[135, "module-village.pybpodapi.state_machine.state_machine_runner", false]], "village.pybpodapi.utils": [[138, "module-village.pybpodapi.utils", false]], "village.pybpodapi.utils.csv": [[139, "module-village.pybpodapi.utils.csv", false]], "village.pybpodapi.utils.date_parser": [[142, "module-village.pybpodapi.utils.date_parser", false]], "village.screen": [[144, "module-village.screen", false]], "village.screen.behavior_window": [[145, "module-village.screen.behavior_window", false]], "warningmessage (class in village.pybpodapi.com.messaging.warning)": [[104, "village.pybpodapi.com.messaging.warning.WarningMessage", false]], "wire (bpod.channelnames attribute)": [[25, "village.pybpodapi.bpod.Bpod.ChannelNames.WIRE", false]], "wire (bpodbase.channelnames attribute)": [[27, "village.pybpodapi.bpod.bpod_base.BpodBase.ChannelNames.WIRE", false]], "wire (bpodcomprotocol.channelnames attribute)": [[29, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.ChannelNames.WIRE", false]], "wire (bpodcomprotocolmodules.channelnames attribute)": [[31, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.ChannelNames.WIRE", false]], "wire (bpodio.channelnames attribute)": [[33, "village.pybpodapi.bpod.bpod_io.BpodIO.ChannelNames.WIRE", false]], "wire (channelname attribute)": [[36, "village.pybpodapi.bpod.hardware.channels.ChannelName.WIRE", false]], "wire1 (inputname attribute)": [[49, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Wire1", false]], "wire2 (inputname attribute)": [[49, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Wire2", false]], "writable() (stderrbuffer method)": [[111, "village.pybpodapi.com.stderr_buffer.StderrBuffer.writable", false]], "writable() (stdoutbuffer method)": [[113, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.writable", false]], "write() (stderrbuffer method)": [[111, "village.pybpodapi.com.stderr_buffer.StderrBuffer.write", false]], "write() (stdoutbuffer method)": [[113, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.write", false]], "write_to_module (sendmessageheader attribute)": [[109, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.WRITE_TO_MODULE", false]], "writelines() (stderrbuffer method)": [[111, "village.pybpodapi.com.stderr_buffer.StderrBuffer.writelines", false]], "writelines() (stdoutbuffer method)": [[113, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.writelines", false]], "writer (class in village.pybpodapi.utils.csv)": [[141, "village.pybpodapi.utils.csv.Writer", false]]}, "objects": {"village": [[0, 0, 0, "-", "classes"], [21, 0, 0, "-", "devices"], [22, 0, 0, "-", "gui"], [23, 0, 0, "-", "pybpodapi"], [144, 0, 0, "-", "screen"]], "village.classes": [[1, 0, 0, "-", "change_hour_run"], [3, 0, 0, "-", "enums"], [14, 0, 0, "-", "settings_class"], [17, 0, 0, "-", "training"]], "village.classes.change_hour_run": [[2, 1, 1, "", "ChangeHourRun"]], "village.classes.change_hour_run.ChangeHourRun": [[2, 2, 1, "", "__init__"]], "village.classes.enums": [[4, 1, 1, "", "Actions"], [5, 1, 1, "", "Active"], [6, 1, 1, "", "AreaActive"], [7, 1, 1, "", "Color"], [8, 1, 1, "", "Cycle"], [9, 1, 1, "", "DataTable"], [10, 1, 1, "", "Info"], [11, 1, 1, "", "ScreenActive"], [12, 1, 1, "", "State"], [13, 1, 1, "", "SuperEnum"]], "village.classes.enums.Actions": [[4, 2, 1, "", "__init__"]], "village.classes.enums.Active": [[5, 2, 1, "", "__init__"]], "village.classes.enums.AreaActive": [[6, 2, 1, "", "__init__"]], "village.classes.enums.Color": [[7, 2, 1, "", "__init__"]], "village.classes.enums.Cycle": [[8, 2, 1, "", "__init__"]], "village.classes.enums.DataTable": [[9, 2, 1, "", "__init__"]], "village.classes.enums.Info": [[10, 2, 1, "", "__init__"]], "village.classes.enums.ScreenActive": [[11, 2, 1, "", "__init__"]], "village.classes.enums.State": [[12, 2, 1, "", "__init__"]], "village.classes.enums.SuperEnum": [[13, 2, 1, "", "__init__"]], "village.classes.settings_class": [[15, 1, 1, "", "Setting"], [16, 1, 1, "", "Settings"]], "village.classes.settings_class.Setting": [[15, 2, 1, "", "__init__"]], "village.classes.settings_class.Settings": [[16, 2, 1, "", "__init__"], [16, 2, 1, "", "get"], [16, 2, 1, "", "get_description"], [16, 2, 1, "", "get_index"], [16, 2, 1, "", "get_indices"], [16, 2, 1, "", "get_text"], [16, 2, 1, "", "get_type"], [16, 2, 1, "", "get_values"]], "village.classes.training": [[18, 1, 1, "", "Settings"], [19, 1, 1, "", "Training"], [20, 3, 1, "", "TrainingError"]], "village.classes.training.Settings": [[18, 2, 1, "", "__init__"]], "village.classes.training.Training": [[19, 2, 1, "", "__init__"]], "village.pybpodapi": [[24, 0, 0, "-", "bpod"], [60, 0, 0, "-", "bpod_modules"], [65, 0, 0, "-", "com"], [114, 0, 0, "-", "exceptions"], [117, 0, 0, "-", "protocol"], [118, 0, 0, "-", "session"], [121, 0, 0, "-", "state_machine"], [138, 0, 0, "-", "utils"]], "village.pybpodapi.bpod": [[25, 1, 1, "", "Bpod"], [26, 0, 0, "-", "bpod_base"], [28, 0, 0, "-", "bpod_com_protocol"], [30, 0, 0, "-", "bpod_com_protocol_modules"], [32, 0, 0, "-", "bpod_io"], [34, 0, 0, "-", "hardware"], [53, 0, 0, "-", "non_blockingsocketreceive"], [56, 0, 0, "-", "non_blockingstreamreader"], [59, 0, 0, "-", "settings"]], "village.pybpodapi.bpod.Bpod": [[25, 1, 1, "", "ChannelNames"], [25, 1, 1, "", "ChannelTypes"], [25, 1, 1, "", "Events"], [25, 1, 1, "", "OutputChannels"], [25, 2, 1, "", "__init__"], [25, 2, 1, "", "close"], [25, 2, 1, "", "data_available"], [25, 2, 1, "", "find_module_by_name"], [25, 2, 1, "", "load_serial_message"], [25, 2, 1, "", "loop_handler"], [25, 2, 1, "", "manual_override"], [25, 2, 1, "", "open"], [25, 2, 1, "", "reset_serial_messages"], [25, 2, 1, "", "run_state_machine"], [25, 2, 1, "", "send_state_machine"], [25, 2, 1, "", "softcode_handler_function"]], "village.pybpodapi.bpod.Bpod.ChannelNames": [[25, 4, 1, "", "BNC"], [25, 4, 1, "", "PWM"], [25, 4, 1, "", "SERIAL"], [25, 4, 1, "", "VALVE"], [25, 4, 1, "", "WIRE"]], "village.pybpodapi.bpod.Bpod.ChannelTypes": [[25, 4, 1, "", "INPUT"], [25, 4, 1, "", "OUTPUT"]], "village.pybpodapi.bpod.Bpod.Events": [[25, 4, 1, "", "BNC1High"], [25, 4, 1, "", "Condition1"], [25, 4, 1, "", "GlobalCounter1End"], [25, 4, 1, "", "GlobalTimer1End"], [25, 4, 1, "", "GlobalTimer1Start"], [25, 4, 1, "", "PA1_Port1In"], [25, 4, 1, "", "Port1In"], [25, 4, 1, "", "Tup"], [25, 2, 1, "", "is_condition"], [25, 2, 1, "", "is_global_counter_end"], [25, 2, 1, "", "is_global_timer_cancel"], [25, 2, 1, "", "is_global_timer_end"], [25, 2, 1, "", "is_global_timer_start"], [25, 2, 1, "", "is_global_timer_trigger"], [25, 2, 1, "", "is_state_timer"]], "village.pybpodapi.bpod.Bpod.OutputChannels": [[25, 4, 1, "", "BNC1High"], [25, 4, 1, "", "GlobalCounter1Reset"], [25, 4, 1, "", "GlobalTimer1Cancel"], [25, 4, 1, "", "GlobalTimer1Trig"], [25, 4, 1, "", "Serial1"], [25, 4, 1, "", "SoftCode1"], [25, 4, 1, "", "Valve1"]], "village.pybpodapi.bpod.bpod_base": [[27, 1, 1, "", "BpodBase"]], "village.pybpodapi.bpod.bpod_base.BpodBase": [[27, 1, 1, "", "ChannelNames"], [27, 1, 1, "", "ChannelTypes"], [27, 1, 1, "", "Events"], [27, 1, 1, "", "OutputChannels"], [27, 2, 1, "", "__init__"], [27, 2, 1, "", "close"], [27, 2, 1, "", "find_module_by_name"], [27, 2, 1, "", "load_serial_message"], [27, 2, 1, "", "loop_handler"], [27, 2, 1, "", "open"], [27, 2, 1, "", "reset_serial_messages"], [27, 2, 1, "", "run_state_machine"], [27, 2, 1, "", "send_state_machine"], [27, 2, 1, "", "softcode_handler_function"]], "village.pybpodapi.bpod.bpod_base.BpodBase.ChannelNames": [[27, 4, 1, "", "BNC"], [27, 4, 1, "", "PWM"], [27, 4, 1, "", "SERIAL"], [27, 4, 1, "", "VALVE"], [27, 4, 1, "", "WIRE"]], "village.pybpodapi.bpod.bpod_base.BpodBase.ChannelTypes": [[27, 4, 1, "", "INPUT"], [27, 4, 1, "", "OUTPUT"]], "village.pybpodapi.bpod.bpod_base.BpodBase.Events": [[27, 4, 1, "", "BNC1High"], [27, 4, 1, "", "Condition1"], [27, 4, 1, "", "GlobalCounter1End"], [27, 4, 1, "", "GlobalTimer1End"], [27, 4, 1, "", "GlobalTimer1Start"], [27, 4, 1, "", "PA1_Port1In"], [27, 4, 1, "", "Port1In"], [27, 4, 1, "", "Tup"], [27, 2, 1, "", "is_condition"], [27, 2, 1, "", "is_global_counter_end"], [27, 2, 1, "", "is_global_timer_cancel"], [27, 2, 1, "", "is_global_timer_end"], [27, 2, 1, "", "is_global_timer_start"], [27, 2, 1, "", "is_global_timer_trigger"], [27, 2, 1, "", "is_state_timer"]], "village.pybpodapi.bpod.bpod_base.BpodBase.OutputChannels": [[27, 4, 1, "", "BNC1High"], [27, 4, 1, "", "GlobalCounter1Reset"], [27, 4, 1, "", "GlobalTimer1Cancel"], [27, 4, 1, "", "GlobalTimer1Trig"], [27, 4, 1, "", "Serial1"], [27, 4, 1, "", "SoftCode1"], [27, 4, 1, "", "Valve1"]], "village.pybpodapi.bpod.bpod_com_protocol": [[29, 1, 1, "", "BpodCOMProtocol"]], "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol": [[29, 1, 1, "", "ChannelNames"], [29, 1, 1, "", "ChannelTypes"], [29, 1, 1, "", "Events"], [29, 1, 1, "", "OutputChannels"], [29, 2, 1, "", "__init__"], [29, 2, 1, "", "close"], [29, 2, 1, "", "data_available"], [29, 2, 1, "", "find_module_by_name"], [29, 2, 1, "", "load_serial_message"], [29, 2, 1, "", "loop_handler"], [29, 2, 1, "", "manual_override"], [29, 2, 1, "", "open"], [29, 2, 1, "", "reset_serial_messages"], [29, 2, 1, "", "run_state_machine"], [29, 2, 1, "", "send_state_machine"], [29, 2, 1, "", "softcode_handler_function"]], "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.ChannelNames": [[29, 4, 1, "", "BNC"], [29, 4, 1, "", "PWM"], [29, 4, 1, "", "SERIAL"], [29, 4, 1, "", "VALVE"], [29, 4, 1, "", "WIRE"]], "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.ChannelTypes": [[29, 4, 1, "", "INPUT"], [29, 4, 1, "", "OUTPUT"]], "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events": [[29, 4, 1, "", "BNC1High"], [29, 4, 1, "", "Condition1"], [29, 4, 1, "", "GlobalCounter1End"], [29, 4, 1, "", "GlobalTimer1End"], [29, 4, 1, "", "GlobalTimer1Start"], [29, 4, 1, "", "PA1_Port1In"], [29, 4, 1, "", "Port1In"], [29, 4, 1, "", "Tup"], [29, 2, 1, "", "is_condition"], [29, 2, 1, "", "is_global_counter_end"], [29, 2, 1, "", "is_global_timer_cancel"], [29, 2, 1, "", "is_global_timer_end"], [29, 2, 1, "", "is_global_timer_start"], [29, 2, 1, "", "is_global_timer_trigger"], [29, 2, 1, "", "is_state_timer"]], "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.OutputChannels": [[29, 4, 1, "", "BNC1High"], [29, 4, 1, "", "GlobalCounter1Reset"], [29, 4, 1, "", "GlobalTimer1Cancel"], [29, 4, 1, "", "GlobalTimer1Trig"], [29, 4, 1, "", "Serial1"], [29, 4, 1, "", "SoftCode1"], [29, 4, 1, "", "Valve1"]], "village.pybpodapi.bpod.bpod_com_protocol_modules": [[31, 1, 1, "", "BpodCOMProtocolModules"]], "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules": [[31, 1, 1, "", "ChannelNames"], [31, 1, 1, "", "ChannelTypes"], [31, 1, 1, "", "Events"], [31, 1, 1, "", "OutputChannels"], [31, 2, 1, "", "__init__"], [31, 2, 1, "", "close"], [31, 2, 1, "", "data_available"], [31, 2, 1, "", "find_module_by_name"], [31, 2, 1, "", "load_serial_message"], [31, 2, 1, "", "loop_handler"], [31, 2, 1, "", "manual_override"], [31, 2, 1, "", "open"], [31, 2, 1, "", "reset_serial_messages"], [31, 2, 1, "", "run_state_machine"], [31, 2, 1, "", "send_state_machine"], [31, 2, 1, "", "softcode_handler_function"]], "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.ChannelNames": [[31, 4, 1, "", "BNC"], [31, 4, 1, "", "PWM"], [31, 4, 1, "", "SERIAL"], [31, 4, 1, "", "VALVE"], [31, 4, 1, "", "WIRE"]], "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.ChannelTypes": [[31, 4, 1, "", "INPUT"], [31, 4, 1, "", "OUTPUT"]], "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events": [[31, 4, 1, "", "BNC1High"], [31, 4, 1, "", "Condition1"], [31, 4, 1, "", "GlobalCounter1End"], [31, 4, 1, "", "GlobalTimer1End"], [31, 4, 1, "", "GlobalTimer1Start"], [31, 4, 1, "", "PA1_Port1In"], [31, 4, 1, "", "Port1In"], [31, 4, 1, "", "Tup"], [31, 2, 1, "", "is_condition"], [31, 2, 1, "", "is_global_counter_end"], [31, 2, 1, "", "is_global_timer_cancel"], [31, 2, 1, "", "is_global_timer_end"], [31, 2, 1, "", "is_global_timer_start"], [31, 2, 1, "", "is_global_timer_trigger"], [31, 2, 1, "", "is_state_timer"]], "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.OutputChannels": [[31, 4, 1, "", "BNC1High"], [31, 4, 1, "", "GlobalCounter1Reset"], [31, 4, 1, "", "GlobalTimer1Cancel"], [31, 4, 1, "", "GlobalTimer1Trig"], [31, 4, 1, "", "Serial1"], [31, 4, 1, "", "SoftCode1"], [31, 4, 1, "", "Valve1"]], "village.pybpodapi.bpod.bpod_io": [[33, 1, 1, "", "BpodIO"]], "village.pybpodapi.bpod.bpod_io.BpodIO": [[33, 1, 1, "", "ChannelNames"], [33, 1, 1, "", "ChannelTypes"], [33, 1, 1, "", "Events"], [33, 1, 1, "", "OutputChannels"], [33, 2, 1, "", "__init__"], [33, 2, 1, "", "close"], [33, 2, 1, "", "data_available"], [33, 2, 1, "", "find_module_by_name"], [33, 2, 1, "", "load_serial_message"], [33, 2, 1, "", "loop_handler"], [33, 2, 1, "", "manual_override"], [33, 2, 1, "", "open"], [33, 2, 1, "", "reset_serial_messages"], [33, 2, 1, "", "run_state_machine"], [33, 2, 1, "", "send_state_machine"], [33, 2, 1, "", "softcode_handler_function"]], "village.pybpodapi.bpod.bpod_io.BpodIO.ChannelNames": [[33, 4, 1, "", "BNC"], [33, 4, 1, "", "PWM"], [33, 4, 1, "", "SERIAL"], [33, 4, 1, "", "VALVE"], [33, 4, 1, "", "WIRE"]], "village.pybpodapi.bpod.bpod_io.BpodIO.ChannelTypes": [[33, 4, 1, "", "INPUT"], [33, 4, 1, "", "OUTPUT"]], "village.pybpodapi.bpod.bpod_io.BpodIO.Events": [[33, 4, 1, "", "BNC1High"], [33, 4, 1, "", "Condition1"], [33, 4, 1, "", "GlobalCounter1End"], [33, 4, 1, "", "GlobalTimer1End"], [33, 4, 1, "", "GlobalTimer1Start"], [33, 4, 1, "", "PA1_Port1In"], [33, 4, 1, "", "Port1In"], [33, 4, 1, "", "Tup"], [33, 2, 1, "", "is_condition"], [33, 2, 1, "", "is_global_counter_end"], [33, 2, 1, "", "is_global_timer_cancel"], [33, 2, 1, "", "is_global_timer_end"], [33, 2, 1, "", "is_global_timer_start"], [33, 2, 1, "", "is_global_timer_trigger"], [33, 2, 1, "", "is_state_timer"]], "village.pybpodapi.bpod.bpod_io.BpodIO.OutputChannels": [[33, 4, 1, "", "BNC1High"], [33, 4, 1, "", "GlobalCounter1Reset"], [33, 4, 1, "", "GlobalTimer1Cancel"], [33, 4, 1, "", "GlobalTimer1Trig"], [33, 4, 1, "", "Serial1"], [33, 4, 1, "", "SoftCode1"], [33, 4, 1, "", "Valve1"]], "village.pybpodapi.bpod.hardware": [[35, 0, 0, "-", "channels"], [40, 0, 0, "-", "events"], [45, 0, 0, "-", "hardware"], [47, 0, 0, "-", "input_channels"], [50, 0, 0, "-", "output_channels"]], "village.pybpodapi.bpod.hardware.channels": [[36, 1, 1, "", "ChannelName"], [37, 1, 1, "", "ChannelType"], [38, 1, 1, "", "Channels"], [39, 1, 1, "", "EventsPositions"]], "village.pybpodapi.bpod.hardware.channels.ChannelName": [[36, 4, 1, "", "BNC"], [36, 4, 1, "", "PWM"], [36, 4, 1, "", "SERIAL"], [36, 4, 1, "", "VALVE"], [36, 4, 1, "", "WIRE"], [36, 2, 1, "", "__init__"]], "village.pybpodapi.bpod.hardware.channels.ChannelType": [[37, 4, 1, "", "INPUT"], [37, 4, 1, "", "OUTPUT"], [37, 2, 1, "", "__init__"]], "village.pybpodapi.bpod.hardware.channels.Channels": [[38, 2, 1, "", "__init__"], [38, 2, 1, "", "get_event_name"], [38, 2, 1, "", "setup_input_channels"], [38, 2, 1, "", "setup_output_channels"]], "village.pybpodapi.bpod.hardware.channels.EventsPositions": [[39, 2, 1, "", "__init__"]], "village.pybpodapi.bpod.hardware.events": [[41, 0, 0, "-", "base_eventname"], [43, 0, 0, "-", "bpod_events"]], "village.pybpodapi.bpod.hardware.events.base_eventname": [[42, 1, 1, "", "BaseEventName"]], "village.pybpodapi.bpod.hardware.events.base_eventname.BaseEventName": [[42, 2, 1, "", "__init__"], [42, 2, 1, "", "is_condition"], [42, 2, 1, "", "is_global_counter_end"], [42, 2, 1, "", "is_global_timer_cancel"], [42, 2, 1, "", "is_global_timer_end"], [42, 2, 1, "", "is_global_timer_start"], [42, 2, 1, "", "is_global_timer_trigger"], [42, 2, 1, "", "is_state_timer"]], "village.pybpodapi.bpod.hardware.events.bpod_events": [[44, 1, 1, "", "EventName"]], "village.pybpodapi.bpod.hardware.events.bpod_events.EventName": [[44, 4, 1, "", "BNC1High"], [44, 4, 1, "", "Condition1"], [44, 4, 1, "", "GlobalCounter1End"], [44, 4, 1, "", "GlobalTimer1End"], [44, 4, 1, "", "GlobalTimer1Start"], [44, 4, 1, "", "PA1_Port1In"], [44, 4, 1, "", "Port1In"], [44, 4, 1, "", "Tup"], [44, 2, 1, "", "__init__"], [44, 2, 1, "", "is_condition"], [44, 2, 1, "", "is_global_counter_end"], [44, 2, 1, "", "is_global_timer_cancel"], [44, 2, 1, "", "is_global_timer_end"], [44, 2, 1, "", "is_global_timer_start"], [44, 2, 1, "", "is_global_timer_trigger"], [44, 2, 1, "", "is_state_timer"]], "village.pybpodapi.bpod.hardware.hardware": [[46, 1, 1, "", "Hardware"]], "village.pybpodapi.bpod.hardware.hardware.Hardware": [[46, 2, 1, "", "__init__"], [46, 2, 1, "", "setup"]], "village.pybpodapi.bpod.hardware.input_channels": [[48, 0, 0, "-", "bpod_input_channels"]], "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels": [[49, 1, 1, "", "InputName"]], "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName": [[49, 4, 1, "", "BNC1"], [49, 4, 1, "", "BNC2"], [49, 4, 1, "", "Port1"], [49, 4, 1, "", "Port2"], [49, 4, 1, "", "Port3"], [49, 4, 1, "", "Port4"], [49, 4, 1, "", "Port5"], [49, 4, 1, "", "Port6"], [49, 4, 1, "", "Port7"], [49, 4, 1, "", "Port8"], [49, 4, 1, "", "Serial1"], [49, 4, 1, "", "Serial2"], [49, 4, 1, "", "Serial3"], [49, 4, 1, "", "USB1"], [49, 4, 1, "", "Wire1"], [49, 4, 1, "", "Wire2"], [49, 2, 1, "", "__init__"]], "village.pybpodapi.bpod.hardware.output_channels": [[51, 0, 0, "-", "bpod_output_channels"]], "village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels": [[52, 1, 1, "", "OutputChannel"]], "village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.OutputChannel": [[52, 4, 1, "", "BNC1High"], [52, 4, 1, "", "GlobalCounter1Reset"], [52, 4, 1, "", "GlobalTimer1Cancel"], [52, 4, 1, "", "GlobalTimer1Trig"], [52, 4, 1, "", "Serial1"], [52, 4, 1, "", "SoftCode1"], [52, 4, 1, "", "Valve1"], [52, 2, 1, "", "__init__"]], "village.pybpodapi.bpod.non_blockingsocketreceive": [[54, 1, 1, "", "NonBlockingSocketReceive"], [55, 3, 1, "", "UnexpectedEndOfStream"]], "village.pybpodapi.bpod.non_blockingsocketreceive.NonBlockingSocketReceive": [[54, 2, 1, "", "__init__"]], "village.pybpodapi.bpod.non_blockingstreamreader": [[57, 1, 1, "", "NonBlockingStreamReader"], [58, 3, 1, "", "UnexpectedEndOfStream"]], "village.pybpodapi.bpod.non_blockingstreamreader.NonBlockingStreamReader": [[57, 2, 1, "", "__init__"]], "village.pybpodapi.bpod_modules": [[61, 0, 0, "-", "bpod_module"], [63, 0, 0, "-", "bpod_modules"]], "village.pybpodapi.bpod_modules.bpod_module": [[62, 1, 1, "", "BpodModule"]], "village.pybpodapi.bpod_modules.bpod_module.BpodModule": [[62, 2, 1, "", "__init__"], [62, 2, 1, "", "load_message"]], "village.pybpodapi.bpod_modules.bpod_modules": [[64, 1, 1, "", "BpodModules"]], "village.pybpodapi.bpod_modules.bpod_modules.BpodModules": [[64, 2, 1, "", "__init__"]], "village.pybpodapi.com": [[66, 0, 0, "-", "arcom"], [70, 0, 0, "-", "messaging"], [105, 0, 0, "-", "protocol"], [110, 0, 0, "-", "stderr_buffer"], [112, 0, 0, "-", "stdout_buffer"]], "village.pybpodapi.com.arcom": [[67, 1, 1, "", "ArCOM"], [68, 1, 1, "", "ArduinoTypes"], [69, 1, 1, "", "DataType"]], "village.pybpodapi.com.arcom.ArCOM": [[67, 2, 1, "", "__init__"], [67, 2, 1, "", "bytes_available"], [67, 2, 1, "", "close"], [67, 2, 1, "", "open"]], "village.pybpodapi.com.arcom.ArduinoTypes": [[68, 2, 1, "", "__init__"]], "village.pybpodapi.com.arcom.DataType": [[69, 2, 1, "", "__init__"]], "village.pybpodapi.com.messaging": [[71, 0, 0, "-", "base_message"], [73, 0, 0, "-", "debug"], [75, 0, 0, "-", "end_trial"], [77, 0, 0, "-", "error"], [79, 0, 0, "-", "event_occurrence"], [81, 0, 0, "-", "event_resume"], [83, 0, 0, "-", "parser"], [85, 0, 0, "-", "session_info"], [87, 0, 0, "-", "softcode_occurrence"], [89, 0, 0, "-", "state_occurrence"], [91, 0, 0, "-", "state_transition"], [93, 0, 0, "-", "stderr"], [95, 0, 0, "-", "stdout"], [97, 0, 0, "-", "trial"], [99, 0, 0, "-", "untagged_message"], [101, 0, 0, "-", "value"], [103, 0, 0, "-", "warning"]], "village.pybpodapi.com.messaging.base_message": [[72, 1, 1, "", "BaseMessage"]], "village.pybpodapi.com.messaging.base_message.BaseMessage": [[72, 2, 1, "", "__init__"], [72, 2, 1, "", "check_type"], [72, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.debug": [[74, 1, 1, "", "DebugMessage"]], "village.pybpodapi.com.messaging.debug.DebugMessage": [[74, 2, 1, "", "__init__"], [74, 2, 1, "", "check_type"], [74, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.end_trial": [[76, 1, 1, "", "EndTrial"]], "village.pybpodapi.com.messaging.end_trial.EndTrial": [[76, 2, 1, "", "__init__"], [76, 2, 1, "", "check_type"], [76, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.error": [[78, 1, 1, "", "ErrorMessage"]], "village.pybpodapi.com.messaging.error.ErrorMessage": [[78, 2, 1, "", "__init__"], [78, 2, 1, "", "check_type"], [78, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.event_occurrence": [[80, 1, 1, "", "EventOccurrence"]], "village.pybpodapi.com.messaging.event_occurrence.EventOccurrence": [[80, 2, 1, "", "__init__"], [80, 2, 1, "", "check_type"], [80, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.event_resume": [[82, 1, 1, "", "EventResume"]], "village.pybpodapi.com.messaging.event_resume.EventResume": [[82, 2, 1, "", "__init__"], [82, 2, 1, "", "check_type"], [82, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.parser": [[84, 1, 1, "", "MessageParser"]], "village.pybpodapi.com.messaging.parser.MessageParser": [[84, 2, 1, "", "__init__"], [84, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.session_info": [[86, 1, 1, "", "SessionInfo"]], "village.pybpodapi.com.messaging.session_info.SessionInfo": [[86, 2, 1, "", "__init__"], [86, 2, 1, "", "check_type"], [86, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.softcode_occurrence": [[88, 1, 1, "", "SoftcodeOccurrence"]], "village.pybpodapi.com.messaging.softcode_occurrence.SoftcodeOccurrence": [[88, 2, 1, "", "__init__"], [88, 2, 1, "", "check_type"], [88, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.state_occurrence": [[90, 1, 1, "", "StateOccurrence"]], "village.pybpodapi.com.messaging.state_occurrence.StateOccurrence": [[90, 2, 1, "", "__init__"], [90, 2, 1, "", "check_type"], [90, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.state_transition": [[92, 1, 1, "", "StateTransition"]], "village.pybpodapi.com.messaging.state_transition.StateTransition": [[92, 2, 1, "", "__init__"], [92, 2, 1, "", "check_type"], [92, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.stderr": [[94, 1, 1, "", "StderrMessage"]], "village.pybpodapi.com.messaging.stderr.StderrMessage": [[94, 2, 1, "", "__init__"], [94, 2, 1, "", "check_type"], [94, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.stdout": [[96, 1, 1, "", "StdoutMessage"]], "village.pybpodapi.com.messaging.stdout.StdoutMessage": [[96, 2, 1, "", "__init__"], [96, 2, 1, "", "check_type"], [96, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.trial": [[98, 1, 1, "", "Trial"]], "village.pybpodapi.com.messaging.trial.Trial": [[98, 2, 1, "", "__init__"], [98, 2, 1, "", "check_type"], [98, 2, 1, "", "fromlist"], [98, 2, 1, "", "get_all_timestamps_by_event"], [98, 2, 1, "", "get_events_names"], [98, 2, 1, "", "get_timestamps_by_event_name"]], "village.pybpodapi.com.messaging.untagged_message": [[100, 1, 1, "", "UntaggedMessage"]], "village.pybpodapi.com.messaging.untagged_message.UntaggedMessage": [[100, 2, 1, "", "__init__"], [100, 2, 1, "", "check_type"], [100, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.value": [[102, 1, 1, "", "ValueMessage"]], "village.pybpodapi.com.messaging.value.ValueMessage": [[102, 2, 1, "", "__init__"], [102, 2, 1, "", "check_type"], [102, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.warning": [[104, 1, 1, "", "WarningMessage"]], "village.pybpodapi.com.messaging.warning.WarningMessage": [[104, 2, 1, "", "__init__"], [104, 2, 1, "", "check_type"], [104, 2, 1, "", "fromlist"]], "village.pybpodapi.com.protocol": [[106, 0, 0, "-", "recv_msg_headers"], [108, 0, 0, "-", "send_msg_headers"]], "village.pybpodapi.com.protocol.recv_msg_headers": [[107, 1, 1, "", "ReceiveMessageHeader"]], "village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader": [[107, 4, 1, "", "ENABLE_PORTS_OK"], [107, 4, 1, "", "HANDSHAKE_OK"], [107, 4, 1, "", "LOAD_SERIAL_MESSAGE_OK"], [107, 4, 1, "", "MODULE_EVENT_NAMES"], [107, 4, 1, "", "MODULE_REQUESTED_EVENT"], [107, 4, 1, "", "RESET_SERIAL_MESSAGES"], [107, 4, 1, "", "STATE_MACHINE_INSTALLATION_STATUS"], [107, 4, 1, "", "SYNC_CHANNEL_MODE_OK"], [107, 2, 1, "", "__init__"]], "village.pybpodapi.com.protocol.send_msg_headers": [[109, 1, 1, "", "SendMessageHeader"]], "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader": [[109, 4, 1, "", "DISCONNECT"], [109, 4, 1, "", "ECHO_SOFTCODE"], [109, 4, 1, "", "ENABLE_PORTS"], [109, 4, 1, "", "EXIT_AND_RETURN"], [109, 4, 1, "", "FIRMWARE_VERSION"], [109, 4, 1, "", "GET_MODULES"], [109, 4, 1, "", "GET_TIMESTAMP_TRANSMISSION"], [109, 4, 1, "", "HANDSHAKE"], [109, 4, 1, "", "HARDWARE_DESCRIPTION"], [109, 4, 1, "", "LOAD_SERIAL_MESSAGE"], [109, 4, 1, "", "MANUAL_OVERRIDE_EXEC_EVENT"], [109, 4, 1, "", "NEW_STATE_MATRIX"], [109, 4, 1, "", "OVERRIDE_DIGITAL_HW_STATE"], [109, 4, 1, "", "RESET_CLOCK"], [109, 4, 1, "", "RESET_SERIAL_MESSAGES"], [109, 4, 1, "", "RUN_STATE_MACHINE"], [109, 4, 1, "", "SEND_TO_HW_SERIAL"], [109, 4, 1, "", "SET_MODULE_RELAY"], [109, 4, 1, "", "SYNC_CHANNEL_MODE"], [109, 4, 1, "", "TRIGGER_SOFTCODE"], [109, 4, 1, "", "WRITE_TO_MODULE"], [109, 2, 1, "", "__init__"]], "village.pybpodapi.com.stderr_buffer": [[111, 1, 1, "", "StderrBuffer"]], "village.pybpodapi.com.stderr_buffer.StderrBuffer": [[111, 2, 1, "", "__init__"], [111, 2, 1, "", "close"], [111, 2, 1, "", "detach"], [111, 4, 1, "", "encoding"], [111, 4, 1, "", "errors"], [111, 2, 1, "", "fileno"], [111, 2, 1, "", "flush"], [111, 2, 1, "", "getvalue"], [111, 2, 1, "", "isatty"], [111, 4, 1, "", "newlines"], [111, 2, 1, "", "read"], [111, 2, 1, "", "readable"], [111, 2, 1, "", "readline"], [111, 2, 1, "", "readlines"], [111, 2, 1, "", "seek"], [111, 2, 1, "", "seekable"], [111, 2, 1, "", "tell"], [111, 2, 1, "", "truncate"], [111, 2, 1, "", "writable"], [111, 2, 1, "", "write"], [111, 2, 1, "", "writelines"]], "village.pybpodapi.com.stdout_buffer": [[113, 1, 1, "", "StdoutBuffer"]], "village.pybpodapi.com.stdout_buffer.StdoutBuffer": [[113, 2, 1, "", "__init__"], [113, 2, 1, "", "close"], [113, 2, 1, "", "detach"], [113, 4, 1, "", "encoding"], [113, 4, 1, "", "errors"], [113, 2, 1, "", "fileno"], [113, 2, 1, "", "flush"], [113, 2, 1, "", "getvalue"], [113, 2, 1, "", "isatty"], [113, 4, 1, "", "newlines"], [113, 2, 1, "", "read"], [113, 2, 1, "", "readable"], [113, 2, 1, "", "readline"], [113, 2, 1, "", "readlines"], [113, 2, 1, "", "seek"], [113, 2, 1, "", "seekable"], [113, 2, 1, "", "tell"], [113, 2, 1, "", "truncate"], [113, 2, 1, "", "writable"], [113, 2, 1, "", "write"], [113, 2, 1, "", "writelines"]], "village.pybpodapi.exceptions": [[115, 0, 0, "-", "bpod_error"]], "village.pybpodapi.exceptions.bpod_error": [[116, 3, 1, "", "BpodErrorException"]], "village.pybpodapi.session": [[119, 1, 1, "", "Session"], [120, 1, 1, "", "StreamsWrapper"]], "village.pybpodapi.session.Session": [[119, 2, 1, "", "__init__"], [119, 5, 1, "", "current_trial"]], "village.pybpodapi.session.StreamsWrapper": [[120, 2, 1, "", "__init__"]], "village.pybpodapi.state_machine": [[122, 1, 1, "", "StateMachine"], [123, 0, 0, "-", "conditions"], [125, 0, 0, "-", "global_counters"], [127, 0, 0, "-", "global_timers"], [129, 0, 0, "-", "state_machine_base"], [132, 0, 0, "-", "state_machine_builder"], [135, 0, 0, "-", "state_machine_runner"]], "village.pybpodapi.state_machine.StateMachine": [[122, 2, 1, "", "__init__"], [122, 2, 1, "", "add_state"], [122, 2, 1, "", "build_message"], [122, 2, 1, "", "build_message_32_bits"], [122, 2, 1, "", "set_condition"], [122, 2, 1, "", "set_global_counter"], [122, 2, 1, "", "set_global_timer"], [122, 2, 1, "", "set_global_timer_legacy"], [122, 2, 1, "", "update_state_numbers"]], "village.pybpodapi.state_machine.conditions": [[124, 1, 1, "", "Conditions"]], "village.pybpodapi.state_machine.conditions.Conditions": [[124, 2, 1, "", "__init__"]], "village.pybpodapi.state_machine.global_counters": [[126, 1, 1, "", "GlobalCounters"]], "village.pybpodapi.state_machine.global_counters.GlobalCounters": [[126, 2, 1, "", "__init__"]], "village.pybpodapi.state_machine.global_timers": [[128, 1, 1, "", "GlobalTimers"]], "village.pybpodapi.state_machine.global_timers.GlobalTimers": [[128, 2, 1, "", "__init__"]], "village.pybpodapi.state_machine.state_machine_base": [[130, 3, 1, "", "SMAError"], [131, 1, 1, "", "StateMachineBase"]], "village.pybpodapi.state_machine.state_machine_base.StateMachineBase": [[131, 2, 1, "", "__init__"], [131, 2, 1, "", "add_state"], [131, 2, 1, "", "set_condition"], [131, 2, 1, "", "set_global_counter"], [131, 2, 1, "", "set_global_timer"], [131, 2, 1, "", "set_global_timer_legacy"]], "village.pybpodapi.state_machine.state_machine_builder": [[133, 1, 1, "", "StateMachineBuilder"], [134, 3, 1, "", "StateMachineBuilderError"]], "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder": [[133, 2, 1, "", "__init__"], [133, 2, 1, "", "add_state"], [133, 2, 1, "", "build_message"], [133, 2, 1, "", "build_message_32_bits"], [133, 2, 1, "", "set_condition"], [133, 2, 1, "", "set_global_counter"], [133, 2, 1, "", "set_global_timer"], [133, 2, 1, "", "set_global_timer_legacy"], [133, 2, 1, "", "update_state_numbers"]], "village.pybpodapi.state_machine.state_machine_runner": [[136, 1, 1, "", "StateMachineRunner"], [137, 3, 1, "", "StateMachineRunnerError"]], "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner": [[136, 2, 1, "", "__init__"], [136, 2, 1, "", "add_state"], [136, 2, 1, "", "build_message"], [136, 2, 1, "", "build_message_32_bits"], [136, 2, 1, "", "set_condition"], [136, 2, 1, "", "set_global_counter"], [136, 2, 1, "", "set_global_timer"], [136, 2, 1, "", "set_global_timer_legacy"], [136, 2, 1, "", "update_state_numbers"]], "village.pybpodapi.utils": [[139, 0, 0, "-", "csv"], [142, 0, 0, "-", "date_parser"]], "village.pybpodapi.utils.csv": [[140, 1, 1, "", "Reader"], [141, 1, 1, "", "Writer"]], "village.pybpodapi.utils.csv.Reader": [[140, 2, 1, "", "__init__"]], "village.pybpodapi.utils.csv.Writer": [[141, 2, 1, "", "__init__"]], "village.pybpodapi.utils.date_parser": [[143, 6, 1, "", "parse"]], "village.screen": [[145, 0, 0, "-", "behavior_window"]], "village.screen.behavior_window": [[146, 1, 1, "", "BehaviorWindow"]], "village.screen.behavior_window.BehaviorWindow": [[146, 2, 1, "", "__init__"], [146, 2, 1, "", "animate"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "exception", "Python exception"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "function", "Python function"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:exception", "4": "py:attribute", "5": "py:property", "6": "py:function"}, "terms": {"": [54, 109, 122, 131, 133, 136, 148, 149, 152, 154, 156, 158, 161, 168, 169, 172, 174, 180], "0": [25, 27, 29, 31, 33, 62, 111, 113, 122, 131, 133, 136, 151, 152, 172], "000": 169, "05": 172, "07": 172, "08": 172, "0x4": [25, 27, 29, 31, 33, 109], "0x45": [166, 167], "0x64": [166, 167], "1": [4, 5, 6, 7, 8, 9, 10, 11, 13, 25, 27, 29, 31, 33, 37, 49, 67, 107, 109, 111, 113, 122, 131, 133, 136, 151, 152, 154, 161, 164, 166, 167, 169, 172, 174, 179], "10": [148, 149, 151, 164, 169, 172], "100": [151, 169, 172], "100u": [122, 131, 133, 136], "11": 151, "110": 151, "115200": 67, "12": [148, 149, 151, 152, 169], "120": [148, 149], "125": 151, "125khz": 151, "1280x720": [152, 158], "128gb": 152, "12h": 169, "12v": 151, "13": 152, "14": [154, 161], "142": 151, "145": [148, 149], "1495": 151, "15": [164, 172, 174], "15g": 164, "16": [148, 149, 154, 161], "160": 151, "17": 151, "1800": 174, "19": 151, "1kg": 164, "2": [25, 27, 29, 31, 33, 37, 49, 111, 113, 148, 149, 151, 152, 154, 161, 164, 169, 172, 174, 179], "20": [151, 154, 161], "200": 151, "2000": [148, 149], "20cm": 151, "20la": 151, "20x20": 151, "220": [148, 149], "228": 151, "24": [148, 149, 151, 154, 161, 169], "24h": 169, "25": [122, 131, 133, 136], "250": 131, "2500": 174, "255": [25, 27, 29, 31, 33, 122, 131, 133, 136, 172], "256gb": 151, "2600": 174, "2800": 174, "29": 151, "2a": 151, "2afc_protocol": [25, 27, 29, 31, 33], "2chan": 152, "2m": 151, "2mm": 151, "3": [25, 27, 29, 31, 33, 49, 109, 148, 149, 152, 154, 161, 169, 172, 174, 175], "30": [148, 149, 151], "3000": [148, 149], "300g": 164, "30x30": 151, "32": [122, 133, 136, 151], "35": 107, "3600": [122, 131, 133, 136, 172, 174], "37": 151, "3d": [148, 149, 150, 154, 161, 165, 178], "3gwy4": 151, "3mf": 164, "3mm": 151, "4": [25, 27, 29, 31, 33, 49, 109, 148, 149, 151, 152, 154, 161, 169, 172, 174], "40": [148, 149, 154, 161, 164, 174], "429496": 98, "4300": 151, "4mm": 151, "5": [49, 107, 122, 131, 133, 136, 151, 152, 164, 168], "50": [151, 172, 174], "500": [148, 149, 151, 174], "50cm": 151, "50g": 164, "54": 151, "5m": 151, "5mm": 151, "5v": 151, "6": [49, 109, 151, 169], "600": 172, "60d": 152, "69": 107, "6h": 169, "6mm": 151, "7": [49, 148, 149, 151, 154, 161], "70": [154, 161], "700g": 164, "7295": 98, "79": 151, "8": [49, 151, 154, 161], "80": 151, "85": 172, "8gb": [151, 152], "9": 151, "90": [148, 149], "900": 172, "90g": 164, "95": 151, "98": 151, "99": [151, 152], "A": [15, 122, 131, 133, 136, 148, 149, 152, 168, 169, 172, 174], "AND": [154, 161], "As": [148, 149, 169], "At": [174, 179], "But": [148, 149], "By": [148, 149, 154, 161, 174, 180], "For": [148, 149, 151, 152, 158, 164, 168, 169, 172, 174, 177], "If": [111, 113, 122, 131, 133, 136, 148, 149, 151, 152, 166, 167, 168, 169, 172, 174, 177, 178, 179], "In": [148, 149, 152, 154, 158, 161, 168, 169, 172, 174], "It": [72, 148, 149, 169, 172, 174], "No": [148, 149, 169, 172], "Not": 169, "ON": [168, 180], "On": [148, 149, 154, 161, 168], "One": 172, "Or": [148, 149], "That": [148, 149], "The": [15, 16, 25, 27, 29, 31, 33, 107, 109, 111, 113, 122, 131, 133, 136, 148, 149, 151, 152, 158, 164, 166, 167, 168, 169, 171, 174, 175, 180], "Then": [148, 149, 152], "There": [151, 158], "These": [36, 37, 44, 49, 52, 148, 149, 151, 154, 161, 169, 172, 174], "To": [152, 154, 161, 169, 172, 174, 180], "With": [154, 161], "__init__": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 18, 19, 25, 27, 29, 31, 33, 36, 37, 38, 39, 42, 44, 46, 49, 52, 54, 57, 62, 64, 67, 68, 69, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 107, 109, 111, 113, 119, 120, 122, 124, 126, 128, 131, 133, 136, 140, 141, 146, 172], "_arcom": [29, 31], "_bpodbase__process_opcod": [25, 27, 29, 31, 33], "_bpodbase__update_timestamp": [25, 27, 29, 31, 33], "abl": [148, 149, 159], "about": [119, 148, 149, 154, 161, 164, 172], "abov": [148, 149, 168, 174], "absolut": [111, 113], "abstract": 27, "academi": 159, "access": [148, 149, 154, 156, 160, 161, 168, 169, 172, 177, 178, 179, 180], "accident": [148, 149, 177], "accord": [36, 37, 44, 49, 52], "accordingli": [25, 27, 29, 31, 33, 168], "account": [158, 174], "accur": [168, 169, 174], "accuraci": [164, 172, 174], "acid": [148, 149, 175], "acquir": 172, "acquisit": [148, 149], "across": [148, 149], "acryl": [151, 154, 161], "action": [29, 31, 122, 131, 133, 136, 168, 171, 172], "activ": [148, 149, 152, 159, 168, 169, 174, 178, 180], "actual": [122, 133, 136], "actualiza": 146, "actualizar": 150, "ad": [111, 113, 131, 148, 149], "adapt": [154, 161], "add": [25, 27, 29, 31, 33, 122, 131, 133, 136, 148, 149, 150, 152, 158, 180], "add_stat": [122, 131, 133, 136, 172], "addict": [148, 149], "addit": [152, 168, 172, 174], "addition": [154, 161], "address": [158, 166, 167], "adequ": 172, "adjust": [148, 149, 154, 161, 169, 172, 174, 177], "admin": 159, "administ": [148, 149], "administr": [148, 149, 159], "advanc": [148, 149, 152, 172], "advanced_set": 16, "advantag": [148, 149], "advis": [148, 149], "affect": [131, 133, 174], "after": [111, 113, 148, 149, 152, 172, 174, 179], "again": 172, "aim": [148, 149], "al": 172, "alarm": [148, 149, 168, 172, 174, 175, 179, 183], "alarm_set": 16, "alert": [154, 161], "algorithm": 174, "align": 174, "all": [111, 113, 122, 131, 133, 136, 148, 149, 151, 152, 154, 159, 161, 164, 168, 169, 172, 174, 175, 178, 179, 180], "allow": [148, 149, 152, 154, 158, 159, 161, 168, 169, 171, 172, 174, 179, 180], "along": [152, 168, 178], "alreadi": [27, 111, 113, 172, 177], "also": [148, 149, 154, 156, 158, 161, 164, 169, 172, 174, 180], "altern": [150, 158], "although": [154, 161, 168], "alwai": [111, 113, 148, 149, 168, 169, 172], "am": [148, 149], "amazon": [148, 149], "amount": [148, 149, 172], "an": [15, 46, 62, 67, 80, 82, 88, 104, 111, 113, 122, 131, 133, 136, 148, 149, 154, 158, 161, 163, 164, 168, 169, 172, 174, 178, 183], "analog": [25, 27, 29, 31, 33, 36], "angl": 171, "ani": [16, 111, 113, 122, 131, 133, 136, 148, 149, 152, 154, 158, 161, 168, 172, 174], "anim": [146, 148, 149, 154, 161, 168, 169, 172, 177, 180, 183], "animaci\u00f3n": 146, "anoth": [148, 149, 154, 161, 168], "antenna": 174, "anyon": [131, 133], "apart": 172, "api": [27, 84], "appear": [152, 168, 169, 172, 180], "append": 172, "applic": [111, 113], "approach": [148, 149, 172], "appropri": 174, "approxim": [148, 149], "apt": [152, 166, 167], "ar": [16, 25, 27, 29, 31, 33, 98, 111, 113, 122, 131, 133, 136, 148, 149, 151, 152, 154, 158, 161, 166, 167, 168, 169, 172, 174, 177, 179, 180], "arcom": [29, 31], "arduino": 67, "area": [169, 174, 180], "area4": 169, "areas3": 169, "arg": [4, 5, 6, 7, 8, 9, 10, 11, 13, 172], "argument": [111, 113], "around": [148, 149, 154, 161, 174], "arrang": 164, "arrow": 179, "artifact": 174, "ask": 152, "asleep": [148, 149, 169], "assembl": [151, 178], "assembli": [151, 153, 178], "assess": [148, 149, 175], "assign": [122, 131, 133, 136, 152, 168, 180], "associ": [62, 80, 82, 88, 122, 131, 133, 136, 152], "assum": [148, 149], "attach": [154, 161], "attempt": [111, 113, 168, 169, 179], "attend": [148, 149], "attribut": [4, 5, 6, 7, 8, 9, 10, 11, 12, 25, 27, 29, 31, 33, 36, 37, 44, 46, 49, 52, 64, 68, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 107, 109, 111, 113, 119, 122, 136], "auditori": [154, 161], "author": 177, "auto": [152, 168], "autom": [154, 161, 174], "automat": [122, 131, 133, 136, 148, 149, 154, 158, 161, 168, 172, 177, 179], "automatis": [148, 149, 154, 161], "avail": [36, 49, 52, 151, 154, 161, 168, 172], "averag": [154, 161, 169], "avers": [148, 149], "aw": [148, 149], "awai": [148, 149], "b": [148, 149], "back": [148, 149, 172, 179], "background": 168, "backup": [160, 178], "bahsrc": 152, "balanc": [154, 161], "bambu": 164, "bambulab": 164, "ban": [148, 149], "basal_weight": [168, 180], "base": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 18, 19, 25, 27, 29, 31, 33, 36, 37, 38, 39, 42, 44, 46, 49, 52, 54, 57, 62, 64, 67, 68, 69, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 107, 109, 111, 113, 119, 120, 122, 124, 126, 128, 131, 133, 136, 140, 141, 146, 148, 149, 151, 154, 161, 168, 172, 174], "base_messag": [94, 96], "baseeventnam": 44, "baselin": [168, 169, 180], "basemessag": [74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104], "bashrc": 152, "basic": [151, 152], "batch": [148, 149], "batteri": [148, 149], "baudrat": [25, 27, 29, 31, 33, 67], "bcontrol": [154, 161], "becaus": [148, 149, 154, 161, 169], "been": [72, 111, 113, 131, 148, 149, 154, 161, 169, 174], "befor": [122, 131, 133, 136, 158, 172, 174, 177], "begin": [174, 179], "behavior": [1, 148, 149, 152, 156, 168, 169, 172, 175, 177, 178, 179, 180], "behavioral_task": 172, "being": [131, 136, 177], "below": [150, 151, 169, 172, 174, 175], "benefit": [148, 149], "best": [148, 149, 154, 161], "better": [148, 149, 154, 161], "between": [25, 27, 29, 31, 33, 67, 122, 131, 133, 136, 148, 149, 168, 169, 172, 174, 177], "bias": [148, 149], "bigger": [25, 27, 29, 31, 33], "bin": 152, "binari": [122, 131, 133, 136], "bit": [122, 133, 136], "black": [174, 179], "blank": 152, "blind": [148, 149], "block": [111, 113, 148, 149], "blocker": 151, "blue": [174, 179], "bnc": [25, 27, 29, 31, 33, 36, 44, 52, 177], "bnc1": 49, "bnc1high": [25, 27, 29, 31, 33, 44, 52], "bnc2": 49, "board": [25, 27, 29, 31, 33, 72, 74, 80, 82, 88, 151], "board_messag": [76, 78, 86, 100, 102], "board_timestamp": [80, 82, 88], "boardmessag": [76, 78, 86, 94, 96, 100, 102], "bonsai": [154, 161], "bool": [25, 27, 29, 31, 33, 42, 44, 131, 136, 172], "boot": [152, 158], "bore": [148, 149, 154, 161], "bot": [148, 149, 152, 160, 169, 177], "botfath": 159, "both": [152, 168, 169, 172, 174, 178], "bottl": [151, 175], "bottom": [151, 156, 164, 168, 180], "boundari": [4, 5, 6, 7, 8, 9, 10, 11, 13], "box": [25, 27, 29, 31, 33, 49, 122, 131, 133, 136, 148, 149, 152, 164, 168, 169, 172, 175, 178, 180], "bpod": [27, 29, 31, 33, 36, 37, 38, 44, 46, 49, 52, 62, 64, 80, 82, 88, 96, 107, 109, 119, 122, 131, 133, 136, 148, 149, 152, 154, 156, 161, 172, 177], "bpod_bas": [25, 27, 29, 31, 33], "bpod_set": 16, "bpod_workspac": [25, 27, 29, 31, 33], "bpodbas": [25, 29, 31, 33], "bpodcomprotocol": 31, "bpodcomprotocolmodul": 33, "bpodio": 25, "brain": [154, 161], "braincircuitsbehaviorlab": 152, "briefli": [148, 149], "bright": 174, "brighter": 172, "browser": [150, 152], "buffer": [111, 113], "bui": 151, "build": [25, 27, 29, 31, 33, 109, 122, 133, 136, 150, 151, 154, 161, 164], "build_messag": [122, 133, 136], "build_message_32_bit": [122, 133, 136], "builder": 133, "built": [174, 178], "button": [168, 171, 180], "buzzer": [148, 149], "byte": [25, 27, 29, 31, 33, 107, 109, 111, 113], "bytes_avail": 67, "c": [109, 148, 149], "cabl": [151, 152, 158], "cad": 151, "cage": [148, 149, 151, 154, 161, 169, 175, 179], "calcul": 172, "calibr": [168, 169, 172, 175, 183], "call": [148, 149, 172], "cam": 169, "camelcas": 172, "camera": [148, 149, 151, 152, 154, 156, 161, 168, 169, 174, 177], "camera_set": 16, "can": [1, 15, 25, 27, 29, 31, 33, 111, 113, 122, 131, 133, 136, 148, 149, 150, 151, 152, 154, 161, 168, 169, 172, 174, 175, 177, 178, 179, 180], "cannot": [148, 149, 151, 168, 179], "cannula": [148, 149], "cap": [148, 149], "capac": [154, 161], "capsul": [151, 180], "captur": [122, 131, 133, 136, 168], "card": [152, 178], "carri": [148, 149, 154, 161], "case": [148, 149, 152, 169, 172, 174], "catch": [148, 149], "categori": 16, "caus": [122, 131, 133, 136, 148, 149, 154, 161, 169, 179], "cd": 152, "center": [168, 172], "central": [151, 154, 161, 164, 172], "certain": [154, 161, 169, 172], "challeng": 152, "chamber": [148, 149, 151, 154, 161], "chang": [80, 82, 88, 111, 113, 122, 131, 133, 136, 166, 167, 171, 172, 175, 177, 179, 180], "channel": [25, 27, 29, 31, 33, 36, 37, 49, 52, 109, 122, 131, 133, 136, 169], "channel_nam": [25, 29, 31, 33], "channel_numb": [25, 29, 31, 33], "channel_typ": [25, 29, 31, 33], "channel_valu": [122, 131, 133, 136], "channelnam": [25, 27, 29, 31, 33], "channeltyp": [25, 27, 29, 31, 33], "charact": [107, 109, 111, 113, 122, 131, 133, 136], "chat": [159, 169, 177], "check": [148, 149, 152, 154, 161, 166, 167, 168, 171, 172, 174, 175, 180], "check_typ": [72, 74, 76, 78, 80, 82, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104], "choic": [154, 161, 172], "choos": [152, 172], "chromium": 152, "circuit": [154, 161], "circumst": [148, 149], "citric": [148, 149, 175], "class": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 56, 57, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 135, 136, 139, 140, 141, 145, 146, 172], "classmethod": [72, 74, 76, 78, 80, 82, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104], "clean": 175, "clear": 169, "click": [152, 168, 169, 180], "clock": 109, "clone": [152, 172], "close": [25, 27, 29, 31, 33, 67, 111, 113, 148, 149, 169, 171, 179], "close_door2": 179, "closest": 156, "cloud": [148, 149], "cm": 151, "cmdline": 152, "code": [1, 25, 27, 29, 31, 33, 44, 107, 109, 131, 148, 149, 152, 154, 158, 161, 165, 166, 167, 169], "cognit": [148, 149, 154, 161], "collabor": 163, "collect": [154, 161], "color": [174, 177, 179], "columns_head": 141, "com": [29, 31, 76, 78, 86, 94, 96, 100, 102, 151, 152, 154, 161], "combin": [148, 149, 172, 174], "come": [148, 149, 154, 161, 172, 174], "comfort": 152, "command": [25, 27, 29, 31, 33, 107, 152, 159, 168, 169, 178], "comment": 151, "commerci": 158, "common": [148, 149, 169], "commun": [27, 29, 31], "compar": [148, 149, 154, 161, 172], "compat": [131, 133, 148, 149], "competit": [148, 149], "complet": [122, 131, 133, 136, 154, 161, 168, 169, 172, 178, 180], "complex": [154, 161, 172], "compon": [150, 151, 154, 161, 168, 183], "compos": [154, 161], "comprehens": 150, "compress": 109, "comput": [154, 158, 161, 178], "condit": [25, 27, 29, 31, 33, 44, 122, 131, 133, 136, 148, 149, 154, 161, 168, 174], "condition1": [25, 27, 29, 31, 33, 44], "condition_channel": [122, 131, 133, 136], "condition_numb": [122, 131, 133, 136], "config": 152, "configur": [25, 27, 29, 31, 33, 109, 152, 154, 161, 166, 167, 168, 169, 174, 177, 178, 179], "confirm": [152, 174], "connect": [25, 27, 29, 31, 33, 36, 46, 62, 67, 109, 148, 149, 151, 152, 154, 158, 160, 161, 168, 169, 178], "connector": [151, 154, 161], "consecut": 172, "consequ": [148, 149], "consid": 169, "consist": [154, 161, 172], "constant": [148, 149], "constantli": [148, 149], "construct": 174, "consult": 169, "consum": [25, 27, 29, 31, 33, 169, 172], "consumpt": [154, 161, 172], "contact": [148, 149, 154, 161], "contain": [15, 122, 131, 133, 136, 152, 169, 172, 174, 178], "content": [72, 74, 76, 78, 94, 96, 100, 104, 111, 113], "continu": [148, 149, 154, 161, 168, 172, 174, 179], "contrast": [148, 149], "control": [111, 113, 148, 149, 156, 168], "convent": 172, "convers": 159, "convert": 174, "copi": [152, 159, 178], "correct": [166, 167, 172], "correctli": [166, 167, 169, 171], "correspond": [90, 92, 98, 166, 167, 168, 169, 172], "corridor": [148, 149, 151, 156, 168, 169, 175, 177, 179, 180, 183], "cost": [148, 149, 151, 154, 161], "could": [148, 149, 169, 172], "count": [122, 131, 133, 136, 169, 174], "counter": [122, 131, 133, 136], "counter_numb": [122, 131, 133, 136], "countri": 152, "cover": [151, 169, 174], "cpu": 152, "cqrobot": [151, 166, 167], "creat": [25, 27, 29, 31, 33, 98, 158, 160, 168, 174, 183], "credenti": 158, "criteria": [148, 149, 172], "critic": 169, "crouch": 174, "csv": [168, 169, 172, 180], "cual": 150, "cue": [148, 149], "current": [25, 27, 29, 31, 33, 46, 111, 113, 119, 136, 148, 149, 154, 158, 161, 168, 169, 172], "current_st": 136, "current_tri": [119, 172], "custom": [1, 152, 154, 161], "cut": [151, 154, 161], "cycl": [168, 177], "d": [148, 149, 152, 163], "dac": [152, 177], "dai": [148, 149, 154, 161, 164, 168, 174, 177], "daili": [148, 149], "damag": [148, 149], "dark": [174, 177], "darker": [174, 179], "data": [25, 27, 29, 31, 33, 67, 109, 122, 131, 133, 136, 148, 149, 152, 154, 161, 169, 172, 179, 180, 183], "data_avail": [25, 29, 31, 33], "datafram": [169, 172], "dataset": [154, 161], "date": [143, 180], "dateutil": 152, "daytim": [154, 161, 177], "dc": 151, "de": [146, 148, 149], "debug": 168, "decid": [148, 149], "decis": [148, 149, 172], "decod": [111, 113], "decreas": [148, 149, 154, 161, 172], "def": 172, "default": [15, 111, 113, 168, 169, 172, 180], "defin": [29, 31, 37, 107, 109, 148, 149, 168, 172, 174, 180], "dehydr": [148, 149], "del": 150, "delai": [154, 161], "deliv": [154, 161, 168, 172], "deliveri": 175, "demand": [154, 161], "demo_project": 172, "depend": [148, 149, 151, 152, 154, 161, 172, 174], "depriv": [148, 149], "descript": [12, 15, 16, 25, 27, 29, 31, 33, 46, 122, 131, 133, 136, 168, 179], "descriptor": [111, 113], "design": [148, 149, 152, 154, 156, 161, 169, 174], "desir": [152, 179], "desktop": [25, 27, 29, 31, 33], "detach": [111, 113], "detail": [148, 149, 151, 152, 158, 168], "detect": [148, 149, 166, 167, 168, 177, 179, 180, 183], "determin": [111, 113, 154, 161, 169, 172, 174, 179], "dev": [25, 27, 29, 31, 33, 152], "develop": [154, 161], "devic": [29, 31, 46, 107, 109, 151, 154, 158, 160, 161, 166, 167, 177, 178], "df": 172, "df_follow_the_light": 172, "df_habitu": 172, "df_last_sess": 172, "df_previous_sess": 172, "dfrobot": [166, 167], "diagram": 179, "diamet": 151, "dibujo": 150, "dict": [98, 122, 131, 133, 136, 172], "dictionari": [98, 122, 131, 133, 136], "differ": [16, 148, 149, 154, 158, 161, 166, 167, 168, 172, 174], "difficulti": [154, 161, 172], "digit": 109, "direct": [154, 161], "directli": [25, 27, 29, 31, 33, 150], "directori": 152, "directory_set": 16, "dirt": 169, "disabl": [152, 168, 169], "disconnect": [109, 151, 156, 169, 178], "dispens": 151, "displai": [152, 158, 168, 169, 178, 180], "distribut": [148, 149, 152], "dmesg": 152, "do": [148, 149, 158], "doe": [111, 113, 148, 149, 150, 168, 169, 179], "domin": [148, 149], "don": 164, "done": 175, "door": [148, 149, 151, 154, 161, 168, 169, 171, 174, 179], "door2": 172, "down": 159, "download": [150, 151, 152, 163, 178], "drop": [169, 175], "dropbox": 172, "drug": [148, 149], "dtoverlai": 152, "due": [154, 158, 161, 169, 174], "durabl": 151, "durat": [122, 131, 133, 136, 148, 149, 154, 161, 172, 174], "dure": [148, 149, 151, 158, 169, 172, 174], "duti": 175, "dynam": 152, "e": [25, 27, 29, 31, 33, 36, 109, 148, 149, 152, 154, 161, 169], "each": [111, 113, 131, 148, 149, 151, 154, 161, 168, 169, 171, 172, 174], "easi": [148, 149, 164], "easier": 174, "easiest": 158, "easili": 178, "echo": 109, "echo_softcod": 109, "eco": [154, 161], "edit": [152, 159, 168, 180], "effect": [111, 113, 148, 149, 154, 161], "effici": [154, 161], "either": [150, 168, 172, 178], "el": [146, 150], "elaps": [169, 179], "electrod": [148, 149], "electron": [150, 154, 161], "electrophysiolog": [148, 149], "electrophysiologi": [148, 149], "element": [154, 161, 171], "elev": 174, "elif": 172, "els": [148, 149, 172], "email": 172, "emitt": 151, "empti": [111, 113, 152, 169, 174, 179], "empty_limit": 174, "en": 150, "enabl": [25, 27, 29, 31, 33, 109, 148, 149, 152, 168, 177], "enable_port": [107, 109], "enable_ports_ok": 107, "enable_uart": 152, "encod": [111, 113], "encount": 158, "end": [90, 92, 109, 111, 113, 148, 149, 168, 169, 174], "end_tim": 86, "end_timestamp": 90, "engag": [148, 149], "english": 152, "enhanc": [131, 133], "enough": [174, 175], "enrich": 175, "ensur": [131, 151, 152, 154, 161, 168, 169, 177, 180], "enter": [122, 131, 133, 136, 148, 149, 154, 161, 168, 169, 172, 174, 177, 179], "entir": [111, 113, 151, 154, 161, 178], "entranc": [148, 149, 154, 161, 169], "entri": [84, 154, 161, 168, 174], "enum": [13, 15, 16], "env": [152, 178], "environ": 178, "eof": [111, 113], "equal": [111, 113, 172], "equip": [154, 161], "equival": [25, 27, 29, 31, 33, 109], "error": [104, 111, 113, 169, 174, 179], "escap": [148, 149, 151], "especi": 152, "essenti": [168, 169, 172, 174], "esta": 150, "establish": 168, "estado": 146, "estim": [151, 164], "etc": [25, 29, 31, 33, 74, 148, 149, 152, 168, 172], "ethernet": [152, 156, 158], "evalu": 169, "even": [131, 148, 149, 152], "event": [25, 27, 29, 31, 33, 38, 44, 80, 82, 88, 98, 107, 109, 122, 131, 133, 136, 148, 149, 168, 169, 172, 179, 180], "event_id": [80, 82, 88], "event_idx": 38, "event_list": 172, "event_nam": [25, 27, 29, 31, 33, 42, 44, 80, 82, 88, 98], "eventnam": [25, 27, 29, 31, 33], "eventoccurr": 98, "events_nam": 62, "events_occurr": 98, "everi": [25, 27, 29, 31, 33, 148, 149, 152, 172, 175], "everyth": 178, "ex": [122, 131, 133, 136], "exact": 152, "exampl": [25, 27, 29, 31, 33, 98, 122, 131, 133, 136, 174], "exce": [111, 113, 122, 131, 133, 136, 174], "exceed": 169, "excel": [154, 161], "except": [17, 20, 53, 55, 56, 58, 115, 129, 130, 132, 134, 135, 137, 154, 161, 172], "execut": [25, 27, 29, 31, 33, 109, 122, 131, 133, 136, 148, 149, 168, 169], "exhaust": [154, 161], "exist": [111, 113, 122, 131, 133, 136, 183], "exit": [109, 122, 131, 133, 136, 148, 149, 151, 168, 169, 172], "exit_and_return": 109, "exit_sav": 179, "exit_unsav": 179, "expect": 174, "experi": [27, 74, 148, 149, 154, 161, 168, 172], "experiment": [148, 149, 154, 161, 172], "explain": [148, 149, 168], "explan": [152, 168], "explor": [148, 149, 172], "exploratori": [148, 149], "export": [25, 27, 29, 31, 33], "extend": [133, 136, 174], "extens": [25, 27, 29, 31, 33, 44, 148, 149, 151, 169], "extern": [148, 149, 151, 158, 169, 178], "extra_set": [166, 167], "extrem": [148, 149], "ez": 151, "f": [109, 148, 149], "facil": [148, 149], "fact": [148, 149], "facto": [148, 149], "factori": 15, "factory_valu": 15, "fail": [148, 149, 169], "failur": [148, 149, 169], "fall": [148, 149, 172], "fals": [62, 111, 113, 169, 172], "fan": 152, "far": [111, 113], "faster": 152, "faulti": 169, "feed": 168, "feedback": 174, "feel": 151, "fell": 169, "few": [148, 149, 169], "fewer": [154, 161, 169], "fi": 152, "fig1": [148, 149], "filament": [164, 174], "file": [25, 27, 29, 31, 33, 84, 111, 113, 151, 152, 154, 161, 165, 168, 169, 172, 177, 178, 180], "filenam": 172, "fileno": [111, 113], "filestream": [140, 141], "final": [25, 27, 29, 31, 33, 148, 149, 172], "final_task": 172, "find": [25, 29, 31, 33, 154, 161, 172], "find_first_occurr": 172, "find_module_by_nam": [25, 27, 29, 31, 33], "finish": [148, 149, 172], "finit": 131, "firmwar": [25, 27, 29, 31, 33, 36, 37, 44, 49, 52, 109, 152], "firmware_vers": [62, 109], "first": [107, 109, 122, 131, 133, 136, 148, 149, 158, 169, 172, 174], "first_pok": 172, "fit": 151, "fix": [148, 149, 175], "flex": 151, "flexibl": [148, 149], "flip": [25, 27, 29, 31, 33], "float": [15, 80, 82, 88, 98, 122, 131, 133, 136], "floor": 174, "fluctuat": [148, 149], "flush": [111, 113], "focus": 168, "folder": [25, 27, 29, 31, 33, 152, 172, 177, 180], "follow": [122, 131, 133, 136, 151, 152, 158, 159, 164, 166, 167, 168, 169, 172, 177, 178, 179, 180], "follow_the_light": 172, "food": [148, 149, 151, 154, 161, 175], "footag": 169, "forag": [148, 149, 154, 161], "forc": [148, 149], "force_hotplug": 152, "force_stop": 172, "forcibli": 158, "format": 168, "found": [168, 172], "foundat": 151, "four": [148, 149, 174], "frame": 151, "free": [148, 149, 151, 158, 174], "freeli": [148, 149, 154, 161], "freez": 169, "frequent": 169, "fri": [148, 149], "from": [25, 27, 29, 31, 33, 46, 54, 57, 72, 76, 78, 80, 82, 86, 88, 94, 100, 102, 107, 111, 113, 122, 131, 133, 136, 148, 149, 151, 154, 158, 159, 161, 168, 169, 172, 174, 177, 178], "fromlist": [72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104], "full": [148, 149, 150, 152, 154, 161, 164], "fulli": [172, 174], "func": 152, "func2": 152, "function": [25, 27, 29, 31, 33, 142, 168, 169, 171, 172, 175], "further": [111, 113, 171], "g": [25, 27, 29, 31, 33, 36, 109, 148, 149, 154, 161, 169], "gather": [154, 161], "gener": [38, 148, 149, 152, 154, 161, 164, 169, 172], "gentli": 171, "get": [16, 98, 109, 119, 148, 149, 152, 166, 167, 171, 172, 183], "get_all_timestamps_by_ev": 98, "get_descript": 16, "get_event_nam": 38, "get_events_nam": 98, "get_index": 16, "get_indic": 16, "get_modul": 109, "get_text": 16, "get_timestamp_transmiss": 109, "get_timestamps_by_event_nam": 98, "get_typ": 16, "get_valu": 16, "get_valve_tim": 172, "getvalu": [111, 113], "git": 152, "github": [152, 154, 159, 161, 163, 177], "give": [148, 149, 172], "given": [122, 131, 133, 136, 148, 149, 172], "glad": 163, "glass": 151, "global": [122, 131, 133, 136, 152], "global_count": 131, "global_tim": 131, "globalcount": 131, "globalcounter1end": [25, 27, 29, 31, 33, 44], "globalcounter1reset": [25, 27, 29, 31, 33, 52], "globalcounter_end": [25, 27, 29, 31, 33, 44], "globalcounterreset": [25, 27, 29, 31, 33, 52], "globaltim": 131, "globaltimer1cancel": [25, 27, 29, 31, 33, 52], "globaltimer1end": [25, 27, 29, 31, 33, 44], "globaltimer1start": [25, 27, 29, 31, 33, 44], "globaltimer1trig": [25, 27, 29, 31, 33, 52], "globaltimer_end": [25, 27, 29, 31, 33, 44], "globaltimer_start": [25, 27, 29, 31, 33, 44], "globaltimercancel": [25, 27, 29, 31, 33, 52], "globaltimertrig": [25, 27, 29, 31, 33, 52], "gmail": [154, 161], "go": [148, 149, 152, 158, 159, 172, 177, 180], "goe": 172, "good": [148, 149], "gpl": [154, 161], "green": [174, 179], "group": [16, 154, 159, 161, 168, 169], "gui": [146, 172, 178, 183], "gui_tabs_restrict": 172, "guidanc": 151, "guillotin": [148, 149], "h": 109, "ha": [111, 113, 148, 149, 152, 154, 161, 169, 172, 174, 179], "hab": [154, 161], "habitu": 172, "had": [148, 149], "half": 169, "hand": [148, 149], "handl": [25, 27, 29, 31, 33, 122, 131, 133, 136, 148, 149, 151, 154, 161], "handler": [25, 27, 29, 31, 33], "handshak": [25, 27, 29, 31, 33, 107, 109], "handshake_ok": 107, "happen": [148, 149], "hard": [148, 149, 172], "harder": [148, 149], "hardwar": [25, 27, 29, 31, 33, 38, 109, 122, 131, 133, 136, 154, 160, 161, 169], "hardware_descript": 109, "hardwareinfocontain": 46, "hat": [154, 161], "have": [72, 111, 113, 131, 148, 149, 152, 154, 161, 164, 169, 172, 174, 178], "hdmi": [151, 152], "header": [107, 109], "health": [148, 149], "heartbeat": [1, 160, 169], "heavier": 151, "help": [150, 158, 168, 172, 174], "helper": 172, "henc": [148, 149], "here": [131, 133, 151, 152, 168, 172, 178], "hidden_set": 16, "hide": 172, "high": [154, 161, 169, 172], "higher": [148, 149], "hint": [111, 113], "histori": 84, "hit": [111, 113], "hold": [131, 136, 174], "holidai": [148, 149], "home": [151, 152, 164, 169, 172, 178, 179], "homecag": [148, 149], "host_timestamp": [72, 74, 76, 78, 80, 82, 88, 90, 92, 94, 96, 100, 102, 104], "hour": [148, 149, 154, 161, 164, 172], "hourli": 169, "hous": [148, 149], "hover": 168, "how": [148, 149, 151, 168, 172, 174], "howev": [148, 149, 152, 158], "http": 152, "human": [148, 149, 154, 161], "humid": [168, 171], "hundr": [148, 149], "hw_info_contain": 46, "hw_output": 38, "hx711": [151, 166, 167], "hygien": 175, "i": [15, 16, 25, 27, 29, 31, 33, 37, 67, 107, 109, 111, 113, 131, 133, 136, 148, 149, 151, 152, 156, 158, 161, 163, 166, 167, 168, 172, 174, 175, 177, 178, 179, 180], "i2c": [166, 167], "i2cdetect": [166, 167], "id": [25, 27, 29, 31, 33, 62, 74, 151, 159, 177, 180], "ideal": 174, "identifi": [152, 169, 174], "illumin": [151, 172, 174], "iloc": 172, "imag": [152, 165, 168, 174, 178], "immedi": [111, 113, 148, 149], "impact": [148, 149, 154, 161], "implant": [148, 149], "implement": [1, 111, 113, 148, 149, 172], "impli": [148, 149], "import": 172, "improv": [148, 149, 154, 161], "inact": 168, "inch": 151, "includ": [119, 148, 149, 152, 154, 161, 168, 172, 175, 178], "increas": [148, 149, 154, 161, 172], "index": [16, 80, 82, 88], "indic": [111, 113, 148, 149, 154, 161, 169, 174, 179], "individu": [148, 149, 154, 161, 174], "ineffici": 131, "info": [168, 172], "infonam": 86, "inform": [46, 74, 119, 168, 169, 172, 175], "infovalu": 86, "infrar": 174, "inherit": 172, "ini": 177, "init": 172, "initi": [25, 27, 29, 31, 33, 109, 154, 161, 172, 179, 183], "inject": [148, 149], "inlin": 150, "input": [25, 27, 29, 31, 33, 37, 38, 44, 49, 109, 122, 131, 133, 136], "input_matrix": 131, "insert": [152, 178], "insid": [148, 149, 151, 152, 154, 161, 169, 172, 175, 179], "instal": [153, 154, 158, 161, 166, 167, 178], "instanc": [122, 131, 133, 136], "instead": 152, "instruct": [148, 149, 151, 152, 153, 158, 159, 168, 169, 178], "int": [15, 16, 25, 27, 29, 31, 33, 62, 80, 82, 88, 122, 131, 133, 136, 172], "intak": [148, 149, 169], "integ": [122, 131, 133, 136], "integr": [148, 149, 154, 161], "intens": 172, "intent": [148, 149], "inter": 172, "interact": [27, 111, 113, 154, 161], "interest": [148, 149], "interfac": [67, 151, 152], "intern": [122, 131, 133, 136, 151], "internet": [148, 149, 152, 158, 169, 178], "interv": 172, "interven": [148, 149], "intervent": [148, 149, 154, 161, 179], "introduc": [148, 149], "invalid": 169, "investig": 169, "invit": [148, 149], "involv": [148, 149, 154, 161, 172], "io": [111, 113], "ip": 158, "ir": 151, "is_condit": [25, 27, 29, 31, 33, 42, 44], "is_global_counter_end": [25, 27, 29, 31, 33, 42, 44], "is_global_timer_cancel": [25, 27, 29, 31, 33, 42, 44], "is_global_timer_end": [25, 27, 29, 31, 33, 42, 44], "is_global_timer_start": [25, 27, 29, 31, 33, 42, 44], "is_global_timer_trigg": [25, 27, 29, 31, 33, 42, 44], "is_run": [131, 136], "is_state_tim": [25, 27, 29, 31, 33, 42, 44], "isatti": [111, 113], "iso": [152, 165], "issu": [158, 163, 168, 169], "item": [152, 168, 172], "iti_st": 172, "iti_tim": 172, "its": [15, 148, 149, 152, 154, 156, 161, 168, 169, 179, 180], "ivar": 131, "j": 109, "jitteri": 152, "john": [25, 27, 29, 31, 33], "jump": [152, 174], "just": [148, 149, 172], "k": 109, "keep": [131, 133, 148, 149, 151], "kei": [15, 16, 98, 122, 131, 133, 136, 154, 161], "kept": [131, 133], "kernel": 152, "keyboard": [152, 156, 158, 178], "kg": 151, "khz": 151, "kind": [148, 149], "know": [148, 149, 168], "known": 171, "kwd": [4, 5, 6, 7, 8, 9, 10, 11, 13], "l": 109, "la": 146, "lab": [148, 149, 154, 161], "lamp": 174, "languag": 152, "larg": [151, 154, 161, 169, 174], "larger": [154, 161, 172], "laser": [148, 149, 151, 154, 161], "last": [148, 149, 169, 172, 174], "last_task": 172, "later": 172, "latest": 168, "launch": [168, 169, 179], "launch_auto": 179, "lead": 179, "learn": [148, 149, 154, 161, 172], "least": [169, 172, 174], "leav": [148, 149, 168], "led": [25, 27, 29, 31, 33, 36, 151, 168], "left": [151, 164, 168, 172], "left_easi": 172, "left_hard": 172, "left_poke_act": 172, "left_valve_opening_tim": 172, "legaci": [122, 131, 133, 136], "legal": [154, 161], "len": 172, "length": [111, 113], "less": [131, 148, 149, 152, 169], "let": [154, 161, 172], "level": 172, "libitum": [148, 149], "libportaudio2": 152, "libqt5multimedia5": 152, "librari": [131, 133], "licens": [154, 161, 172], "lick": 172, "lick_teach": 172, "lid": [151, 154, 161], "light": [148, 149, 151, 168, 169, 172, 174, 177], "light_intensity_high": 172, "light_intensity_low": 172, "lighter": 179, "like": [25, 29, 31, 33, 74, 131, 133, 148, 149, 154, 161, 163, 169], "line": [74, 84, 111, 113, 152], "link": [122, 131, 133, 136, 152, 154, 161], "linux": 152, "list": [15, 16, 25, 27, 29, 31, 33, 62, 84, 90, 92, 98, 111, 113, 119, 122, 131, 133, 136, 153, 168, 169, 172, 177, 178], "listen": [122, 131, 133, 136], "lite": 158, "live": [154, 161], "ll": [151, 158, 164], "lo": 150, "load": [25, 27, 29, 31, 33, 62, 109], "load_cont": 84, "load_messag": 62, "load_serial_messag": [25, 27, 29, 31, 33, 107, 109], "load_serial_message_ok": 107, "locat": [148, 149, 169, 174, 180], "locomotor": [148, 149], "log": [158, 168, 180], "logic": [25, 27, 29, 31, 33, 133, 136, 172], "login": 152, "long": [148, 149, 154, 161, 169], "longer": [148, 149], "longitudin": [148, 149], "look": 172, "loop": [25, 27, 29, 31, 33], "loop_handl": [25, 27, 29, 31, 33], "loop_interv": [122, 131, 133, 136], "loop_mod": [122, 131, 133, 136], "lot": [131, 133, 172], "loud": [148, 149], "low": [154, 161, 169, 172], "lower_cas": 172, "lumin": 174, "m": [109, 152, 174], "machin": [25, 27, 29, 31, 33, 90, 92, 122, 131, 133, 136, 172, 183], "made": [148, 149, 154, 161, 172], "magenta": 174, "mai": [72, 148, 149, 152, 169, 172, 174, 179], "main": [38, 152, 175, 177, 178], "main_set": 16, "maintain": [148, 149, 175], "mainten": [151, 183], "make": [148, 149, 151, 152, 172, 174, 180], "mal": 150, "malfunct": 169, "manag": [152, 172, 175, 178], "mandatori": 172, "mani": [148, 149, 169, 174], "manifest": 131, "manipul": [148, 149, 179], "manual": [25, 29, 31, 33, 109, 148, 149, 150, 152, 154, 161, 168, 172, 175, 179], "manual_overrid": [25, 29, 31, 33], "manual_override_exec_ev": 109, "margin": 174, "marinraf": [154, 161], "mark": 174, "mask": 175, "match": 152, "matlab": [131, 133], "matrix": [109, 122, 131, 133, 136], "max_stat": [124, 126, 128], "maxim": [148, 149], "maximum": [148, 149, 172, 174], "maximum_dur": [168, 172], "maximum_number_of_tri": 168, "md": 172, "mean": 172, "meant": [148, 149], "measur": [148, 149], "mechan": [154, 161], "memori": [148, 149], "mention": 164, "menu": [168, 172], "messag": [20, 25, 27, 29, 31, 33, 62, 72, 76, 78, 80, 82, 84, 86, 88, 94, 96, 100, 102, 104, 107, 109, 122, 133, 136, 168, 169, 172, 180], "message_api": 27, "message_id": [25, 27, 29, 31, 33], "messageapi": 27, "met": 172, "meta_output_nam": 131, "meth": 84, "method": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 18, 19, 25, 27, 29, 31, 33, 36, 37, 38, 39, 42, 44, 46, 49, 52, 54, 57, 62, 64, 67, 68, 69, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 107, 109, 111, 113, 119, 120, 122, 124, 126, 128, 131, 133, 136, 140, 141, 146], "metric": 172, "mg995": 151, "mice": [148, 149, 151, 154, 161, 175], "micro": [151, 152], "microsecond": 131, "middl": 172, "might": 174, "millilit": 172, "min": [148, 149, 169, 172], "mind": [131, 133, 154, 161], "mini": [154, 161], "minim": 174, "minimum": [148, 149, 154, 161, 169, 172, 179], "minimum_dur": 172, "minor": 174, "minut": [164, 168, 169], "misconfigur": 169, "miss": [148, 149, 169], "mistak": 174, "mistakenli": 169, "mm": [148, 149, 151], "mode": [25, 27, 29, 31, 33, 109, 168, 177, 179], "model": [25, 27, 29, 31, 33, 84, 164, 166, 167], "modif": [148, 149], "modifi": [152, 166, 167, 168, 172], "modul": [0, 4, 5, 6, 7, 8, 9, 10, 11, 13, 21, 22, 23, 24, 25, 27, 29, 31, 33, 34, 38, 40, 46, 47, 50, 60, 62, 65, 70, 105, 107, 109, 114, 121, 138, 144, 152], "module_event_nam": 107, "module_nam": 62, "module_requested_ev": 107, "moment": [148, 149], "mon": [148, 149], "mondai": [148, 149, 168], "monipol": 172, "monitor": [122, 131, 133, 136, 148, 149, 152, 154, 156, 161, 171, 180], "monopol": [148, 149], "montar": 150, "month": [148, 149, 154, 161, 169, 175], "more": [111, 113, 148, 149, 154, 161, 168, 169, 172], "moreov": [148, 149, 154, 161], "morn": [148, 149], "most": [111, 113, 148, 149, 154, 161, 168, 169], "motiv": [148, 149, 154, 161], "motor": [150, 152, 154, 156, 161, 171], "motor_set": 16, "mount": 151, "mous": [148, 149, 151, 152, 154, 156, 158, 161, 172, 174, 178], "move": [172, 174], "msg": [62, 111, 113], "msg_id": 62, "much": [148, 149], "multi": [154, 161], "multimedia": 152, "multipl": [148, 149, 169, 172, 174], "must": [36, 37, 44, 49, 52, 111, 113, 122, 131, 133, 136, 148, 149, 159, 168, 171, 172, 174, 177], "mv": 175, "my": [148, 149], "my_bpod": [25, 27, 29, 31, 33], "n_condit": 124, "n_global_count": 126, "n_global_tim": 128, "n_serial_ev": 62, "name": [4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 25, 27, 29, 31, 33, 36, 38, 69, 74, 80, 82, 88, 90, 92, 98, 107, 109, 122, 131, 133, 136, 168, 172, 180], "name_of_the_project": 172, "nan": 172, "nano": 152, "navig": [148, 149, 152, 171], "nearbi": [148, 149], "necessari": [148, 149, 152, 154, 161, 175, 178], "necessarili": [148, 149], "need": [148, 149, 151, 154, 158, 161, 164, 172, 174, 175, 178], "neg": [111, 113], "nest": [154, 161], "net_port": 27, "network": 158, "neurolux": [148, 149], "never": [159, 169, 177], "new": [25, 27, 29, 31, 33, 109, 111, 113, 148, 149, 152, 159, 168, 172, 183], "new_sma_s": 27, "new_state_matrix": 109, "newbot": 159, "newlin": [111, 113], "next": [152, 168, 172, 179, 180], "next_session_tim": [168, 180], "next_set": [168, 180], "next_task": 172, "night": [148, 149, 168, 169, 174, 177], "nighttim": [154, 161, 177], "nobodi": [148, 149], "noir": [151, 152], "nois": 174, "non": [111, 113, 158], "none": [4, 5, 6, 7, 8, 9, 10, 11, 13, 16, 25, 27, 29, 31, 33, 62, 72, 74, 76, 78, 80, 82, 86, 88, 94, 96, 98, 100, 102, 104, 111, 113, 119, 122, 131, 133, 136, 141, 146, 152, 168, 172], "normal": [148, 149], "not_allow": 174, "note": [152, 174], "notif": [154, 161, 177], "now": [109, 152, 158, 172, 174, 178], "number": [25, 27, 29, 31, 33, 109, 111, 113, 122, 131, 133, 136, 148, 149, 151, 152, 168, 169, 172, 174], "o": [33, 109, 158, 178], "object": [2, 15, 16, 18, 19, 25, 27, 29, 31, 33, 36, 37, 38, 39, 42, 46, 49, 52, 54, 57, 62, 64, 67, 68, 69, 72, 84, 107, 109, 111, 113, 119, 120, 124, 126, 128, 131, 140, 141, 172], "objectivis": [148, 149], "observ": 174, "obtain": [46, 148, 149, 159, 177, 180], "occasion": [148, 149], "occup": [154, 161], "occupi": [148, 149, 174], "occur": [122, 131, 133, 136, 169, 174, 179], "occurr": [90, 92, 98, 172], "ocean": 151, "off": 168, "off_messag": [122, 131, 133, 136], "offer": [154, 161], "offset": [111, 113], "often": [148, 149, 154, 161, 169], "omit": [111, 113], "on_messag": [122, 131, 133, 136], "on_set_delai": [122, 131, 133, 136], "onc": [148, 149, 156, 158, 168, 169, 172, 175, 178, 179], "one": [25, 27, 29, 31, 33, 109, 111, 113, 122, 131, 133, 136, 148, 149, 152, 154, 161, 168, 169, 172, 174], "oneset_trigg": [122, 131, 133, 136], "onli": [111, 113, 148, 149, 152, 169, 172, 174, 178], "online_plot": 172, "onto": 178, "opb100": 151, "opb100z": 151, "opcod": [25, 27, 29, 31, 33], "open": [25, 27, 29, 31, 33, 67, 148, 149, 158, 159, 163, 164, 168, 169, 171, 172, 178, 179], "open_door2": 179, "opencv": 152, "oper": [111, 113, 148, 149, 152, 154, 158, 161, 174, 178], "optim": [148, 149, 154, 161, 164, 174], "option": [25, 27, 29, 31, 33, 152, 154, 158, 161, 168], "optogenet": [148, 149], "orang": 179, "order": 169, "ordered_list_of_ev": 172, "organ": [148, 149, 151], "orient": 164, "origin": [72, 131, 133], "oserror": [111, 113], "oshw": [154, 161], "osmot": [148, 149], "other": [148, 149, 151, 152, 154, 156, 158, 159, 161, 169, 172, 174], "other_vari": 172, "otherwis": [25, 27, 29, 31, 33, 172], "our": [148, 149, 154, 161, 163, 172], "out": [25, 29, 31, 33, 148, 149, 154, 161, 172, 174], "outag": [148, 149, 169], "output": [25, 27, 29, 31, 33, 37, 38, 52, 122, 131, 133, 136, 172], "output_act": [122, 131, 133, 136, 172], "output_matrix": 131, "outputchannel": [25, 27, 29, 31, 33], "outsid": [148, 149, 174, 177], "over": [148, 149, 168, 169, 178], "overrid": [1, 25, 27, 29, 31, 33, 109, 111, 113], "override_digital_hw_st": 109, "overview": 183, "own": [148, 149, 154, 161, 172, 178, 179], "p1": 164, "pa1_port1in": [25, 27, 29, 31, 33, 44], "pace": [148, 149, 154, 161], "packag": 152, "page": [150, 152, 158, 163], "pair": [148, 149], "panel": 152, "para": 150, "param": [25, 27, 29, 31, 33, 67, 122, 131, 133, 136], "paramet": [25, 27, 29, 31, 33, 38, 42, 44, 46, 62, 80, 82, 84, 88, 90, 92, 98, 102, 122, 131, 133, 136, 148, 149, 168, 172, 174, 177, 180], "pars": 84, "part": [148, 149, 150, 153, 154, 161, 164, 178], "particip": [159, 169], "particular": [15, 148, 149], "pass": [148, 149, 169, 172], "password": 152, "past": [148, 149], "path": [25, 27, 29, 31, 33, 119, 152], "pattern": 152, "paus": [148, 149], "pc": 72, "pd": 172, "pdf": 150, "pegar": 150, "penalti": [148, 149], "per": [148, 149, 154, 161, 169, 172], "percentag": [148, 149], "perceptu": [148, 149], "perfectli": 174, "perform": [29, 31, 148, 149, 154, 158, 161, 168, 172, 179], "performance_last_sess": 172, "performance_previous_sess": 172, "perhap": [148, 149], "period": [148, 149, 154, 161, 168, 172], "peripher": [148, 149], "permit": 174, "person": [148, 149], "pharmacolog": [148, 149], "phase": [148, 149], "phone": 158, "photog": 169, "physic": [152, 169], "pi": [148, 149, 151, 154, 156, 158, 161, 168, 178], "pick": 172, "piec": [148, 149, 178], "pieza": 150, "pin2": 152, "pipelin": [148, 149], "pixel": [169, 174], "pla": 164, "place": [148, 149, 156, 172, 180], "plai": [154, 161, 168, 169], "plan": 178, "plastic": [148, 149, 151, 154, 161], "platform": 177, "pleas": 150, "plot": [168, 169, 172, 183], "plu": [148, 149], "plug": [154, 161], "plugin": 152, "po": [111, 113], "point": [148, 149, 178, 179], "poke": 172, "poner": 150, "port": [25, 27, 29, 31, 33, 44, 49, 109, 122, 131, 133, 136, 152, 154, 156, 161, 168, 172, 177], "port1": [25, 27, 29, 31, 33, 44, 49, 172], "port1in": [25, 27, 29, 31, 33, 44, 172], "port1lit": [122, 131, 133, 136], "port1out": 98, "port2": [49, 172], "port2in": [98, 172], "port2out": 98, "port3": [49, 172], "port3in": [98, 172], "port3lit": [122, 131, 133, 136], "port3out": 98, "port4": 49, "port5": 49, "port6": 49, "port7": 49, "port8": 49, "port_vari": 172, "posit": [111, 113, 122, 131, 133, 136, 148, 149, 154, 156, 161, 168], "possibl": [16, 154, 161, 172, 174, 179], "postur": 174, "potenti": 169, "power": [148, 149, 151, 152, 154, 158, 161, 169], "practic": [148, 149], "pre": [148, 149, 152, 178], "preced": [148, 149], "precis": 131, "predict": [148, 149, 154, 161], "prefer": [154, 161, 178], "preinstal": 152, "premis": [148, 149], "present": [152, 169, 177], "preset": [148, 149], "press": 171, "prevent": [148, 149, 151, 168, 169, 172, 177], "preview": 180, "previou": [148, 149], "previous": [122, 131, 133, 136], "price": 151, "principl": [148, 149], "print": [96, 148, 149, 150, 154, 161, 165], "printabl": 178, "privat": [29, 31, 169, 177], "pro": [152, 177], "probe": [148, 149], "problem": [148, 149, 169, 175], "proce": [152, 178], "procedur": 183, "process": [25, 27, 29, 31, 33, 54, 57, 76, 78, 86, 94, 100, 102, 148, 149, 152, 154, 161, 169, 172, 174], "program": [131, 148, 149, 178], "progress": [148, 149, 168, 172, 175], "prohibit": 169, "project": [1, 154, 161, 163, 180], "prolong": 169, "promot": [154, 161], "promptli": [148, 149], "proper": 175, "properli": [152, 175], "properti": [119, 172], "prosoci": [148, 149], "protect": [148, 149, 154, 161], "protocol": [25, 27, 29, 31, 33, 96, 154, 161, 168, 180, 183], "provid": [111, 113, 148, 149, 150, 151, 152, 154, 161, 164, 168, 169, 174, 175, 178], "pulseaudio": 152, "pump": [148, 149, 151, 168, 172], "punish": [148, 149, 172], "punish_condit": 172, "punish_st": 172, "punishment_tim": 172, "purchas": [151, 178], "purpos": [148, 149, 154, 161], "push": [151, 171], "put": [148, 149], "pwm": [25, 27, 29, 31, 33, 36, 152], "pwm1": [122, 131, 133, 136, 172], "pwm2": [122, 131, 133, 136, 172], "pwm3": 172, "py": [84, 102, 152, 166, 167, 172, 178], "pybod": [148, 149], "pybpodapi": [25, 27, 29, 31, 33, 131, 133], "pybpodgui_plugin": [76, 78, 84, 86, 94, 96, 100, 102], "pyqt5": 152, "python": [67, 131, 133, 154, 161, 166, 167, 168, 172, 178], "python3": 152, "qtmultimedia": 152, "qualiti": [148, 149, 151], "qualnam": [4, 5, 6, 7, 8, 9, 10, 11, 13], "quantifi": [148, 149], "quantit": [148, 149], "question": [148, 149], "quickli": [148, 149, 179], "qwidget": 146, "r": 109, "rain": [154, 161], "rais": [111, 113], "random": 172, "rang": [122, 131, 133, 136, 154, 161, 174], "rare": [148, 149], "raspberri": [148, 149, 154, 156, 158, 161, 166, 167, 168, 178], "raspi": [152, 158], "rat": [148, 149, 154, 161], "raw": [164, 168], "rca": 151, "re": [148, 149, 152, 168], "reach": [111, 113, 148, 149, 168, 172, 179], "react": [148, 149], "reactiv": 169, "read": [54, 57, 111, 113, 169, 171], "readabl": [111, 113], "reader": [148, 149, 151, 154, 156, 161, 168, 169, 174, 180], "readi": [152, 172, 178, 179], "readlin": [111, 113], "readm": 172, "ready_to_initi": 172, "real": [154, 161, 168, 183], "realli": 152, "realvnc": 158, "reason": [148, 149, 158, 174], "reboot": 152, "receiv": [25, 29, 31, 33, 46, 107, 151, 154, 159, 161, 172, 178, 183], "recent": [154, 161, 168], "recogn": [152, 166, 167], "recogniz": 152, "recommend": [158, 164], "record": [148, 149, 168, 172, 174, 180], "rectangl": 174, "red": [174, 179], "reduc": [131, 148, 149, 172], "reduct": [154, 161], "reenter": [148, 149], "refer": [152, 168, 180], "referenc": [122, 131, 133, 136], "reflect": 174, "refractari": 172, "refractary_period": 172, "refractori": 168, "regard": [148, 149, 154, 161], "regardless": [152, 158], "regist": [25, 27, 29, 31, 33, 172], "register_valu": 172, "regress": 172, "regul": [148, 149, 154, 161], "rel": [111, 113], "relai": 109, "relaunch": 169, "releas": [25, 27, 29, 31, 33], "reliabl": [148, 149, 151, 154, 161, 174], "reload": 152, "remain": [169, 174, 177, 179], "rememb": 172, "remot": [148, 149, 152, 154, 156, 160, 161, 169, 178, 179], "remov": [148, 149, 152, 154, 161, 175], "render": [152, 168], "repeat": [131, 148, 149], "repetit": [98, 148, 149, 154, 161], "repinta": 146, "replac": [122, 133, 136, 164], "report": [148, 149, 163, 169, 175], "repositori": [152, 154, 161, 165, 172, 177], "repres": [27, 46, 72, 74, 76, 78, 80, 82, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 172, 174, 179, 180], "represent": [15, 16], "reproduc": [148, 149], "request": [29, 31, 107, 109], "requir": [148, 149, 154, 161, 164, 169, 172, 174, 175, 178, 179, 180], "research": [148, 149, 154, 161], "reserv": [148, 149], "reset": [25, 27, 29, 31, 33, 109], "reset_clock": 109, "reset_serial_messag": [25, 27, 29, 31, 33, 107, 109], "resolut": [152, 158], "resolv": [148, 149, 168, 169, 179], "resourc": [154, 161], "respond": [148, 149, 172, 183], "respons": [148, 149, 154, 161, 169], "response_tim": 172, "rest": [148, 149, 152], "restart": [148, 149, 169], "restrict": [169, 172], "result": 169, "retriev": [25, 27, 29, 31, 33, 111, 113, 169], "return": [16, 25, 27, 29, 31, 33, 38, 42, 44, 67, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 109, 111, 113, 119, 122, 131, 133, 136, 146, 168, 172, 179], "review": [169, 175, 178], "reward": [148, 149, 154, 161, 172], "reward_amount_ml": 172, "reward_st": 172, "reward_state_left": 172, "reward_state_right": 172, "rfid": [148, 149, 152, 154, 156, 161, 164, 168, 169, 174, 179, 180], "right": [151, 152, 164, 168, 172], "right_easi": 172, "right_hard": 172, "right_poke_act": 172, "right_valve_opening_tim": 172, "rigid": 151, "rigor": [154, 161], "rodent": [148, 149, 154, 161], "room": [148, 149, 168, 174, 177], "root": 169, "routin": 175, "row": [72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 169, 180], "rpi": 177, "rtype": [25, 27, 29, 31, 33], "run": [25, 27, 29, 31, 33, 109, 119, 131, 136, 148, 149, 154, 161, 166, 167, 168, 172, 178, 179], "run_asap": [25, 27, 29, 31, 33], "run_clos": [169, 179], "run_first": [169, 179], "run_open": [169, 179], "run_state_machin": [25, 27, 29, 31, 33, 107, 109], "run_villag": [168, 178], "safe": [148, 149, 174], "safeti": 169, "same": [148, 149, 158, 172], "sanwork": [154, 161], "save": [84, 168, 172, 179, 183], "save_insid": 179, "save_outsid": 179, "scale": [148, 149, 151, 154, 161, 168, 169, 171, 179], "scenario": [169, 179], "schedul": [148, 149, 160, 172], "scheme": 109, "scipi": 152, "sck": 54, "scratch": 178, "screen": [158, 168, 169, 171, 177, 178, 180], "screen_set": 16, "screenshot": 169, "screwdriv": 178, "script": [148, 149, 172], "sd": [151, 152, 178], "se": 150, "seamless": [154, 161], "search": [25, 27, 29, 31, 33, 159], "second": [122, 131, 133, 136, 148, 149, 168, 169, 172, 174], "section": [151, 154, 158, 161, 168, 169, 174, 175], "see": [122, 131, 133, 136, 158, 169], "seealso": 102, "seek": [111, 113], "seekabl": [111, 113], "select": [152, 159, 168, 169, 171, 172, 177, 180], "self": [148, 149, 172], "send": [1, 25, 27, 29, 31, 33, 62, 109, 122, 133, 136, 148, 149, 154, 159, 160, 161, 169, 172], "send_ev": [122, 131, 133, 136], "send_state_machin": [25, 27, 29, 31, 33], "send_to_hw_seri": 109, "sensor": [151, 152, 154, 156, 161, 168], "sent": [109, 169, 174], "separ": [111, 113, 151, 174], "sequenc": 179, "sequenti": 172, "serial": [25, 27, 29, 31, 33, 36, 52, 67, 109], "serial1": [25, 27, 29, 31, 33, 49, 52], "serial1_3": 49, "serial1_4": 49, "serial2": 49, "serial3": 49, "serial_channel": [25, 27, 29, 31, 33], "serial_messag": [25, 27, 29, 31, 33], "serial_port": [25, 27, 29, 31, 33, 62, 67], "serialportnam": 67, "serv": [154, 161], "server": [1, 76, 78, 86, 94, 100, 102, 148, 149, 158, 169], "server_set": 16, "servic": [148, 149], "servo": [151, 154, 156, 161], "session": [25, 27, 29, 31, 33, 72, 84, 109, 111, 113, 148, 149, 154, 161, 168, 169, 172], "session_io": 84, "session_nam": [25, 27, 29, 31, 33], "session_plot": 172, "sessionio": 84, "set": [25, 27, 29, 31, 33, 36, 37, 44, 46, 49, 52, 109, 111, 113, 122, 131, 133, 136, 148, 149, 156, 158, 159, 166, 167, 169, 171, 172, 174, 178, 180, 183], "set_condit": [122, 131, 133, 136], "set_global_count": [122, 131, 133, 136], "set_global_tim": [122, 131, 133, 136], "set_global_timer_legaci": [122, 131, 133, 136], "set_module_relai": 109, "setup": [46, 151, 154, 161], "setup_input_channel": 38, "setup_output_channel": 38, "setuptools_scm": 152, "seven": [148, 149], "sever": [148, 149, 154, 161, 168, 169, 172], "shadow": 174, "shape": [154, 161], "share": [154, 159, 161, 177], "shine": [154, 161], "short": [148, 149], "shorter": [148, 149], "should": [25, 27, 29, 31, 33, 111, 113, 122, 131, 133, 136, 148, 149, 152, 168, 169, 171, 172, 174, 180], "show": 168, "shown": [148, 149, 169, 172], "sht31": [151, 166, 167], "side": [168, 172], "signal": [1, 148, 149, 154, 160, 161, 169], "signific": [154, 161], "significantli": 174, "similar": [148, 149, 174, 177], "similarli": 174, "simpl": [148, 149, 172], "simple_task": 172, "simpler": 172, "simpli": [152, 158, 169, 174, 178], "simplifi": [67, 154, 161, 172], "simultan": 174, "sinc": 169, "singl": [154, 161, 164, 174], "site": 152, "situat": 169, "size": [69, 111, 113, 154, 161, 174], "slack": 172, "slight": 174, "slightli": 169, "slot": 151, "sma": [25, 27, 29, 31, 33, 98, 122, 131, 133, 136], "small": [150, 151], "so": [111, 113, 131, 133, 148, 149, 152, 172, 180], "social": [154, 161], "soft": [25, 27, 29, 31, 33, 109], "softcod": [25, 27, 29, 31, 33, 52, 88], "softcode1": [25, 27, 29, 31, 33, 52], "softcode_funct": 172, "softcode_handler_funct": [25, 27, 29, 31, 33], "softwar": [148, 149, 153, 154, 161, 178], "sole": 174, "solut": [154, 161, 169], "some": [154, 158, 161, 164, 169, 172, 177, 180], "someon": [148, 149], "someth": [148, 149, 175], "sometim": [148, 149], "son": 150, "sound": [148, 149, 152, 168, 169, 172, 177], "sound_calibr": 168, "sound_devic": 177, "sound_funct": 172, "sound_set": 16, "sounddevic": 152, "sourc": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 18, 19, 20, 25, 27, 29, 31, 33, 36, 37, 38, 39, 42, 44, 46, 49, 52, 54, 55, 57, 58, 62, 64, 67, 68, 69, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 107, 109, 111, 113, 116, 119, 120, 122, 124, 126, 128, 130, 131, 133, 134, 136, 137, 140, 141, 143, 146, 151, 152, 163], "space": [154, 161], "span": 174, "speaker": [151, 168], "special": [154, 161], "specif": [36, 37, 44, 49, 52, 90, 92, 152, 168, 172, 174, 175], "specifi": [111, 113, 152, 168, 169], "spi": 152, "stabil": [148, 149, 151], "stabl": [148, 149, 154, 161, 174, 179], "staff": [148, 149], "stage": [148, 149, 172], "stai": [148, 149, 174], "stainless": 151, "standard": [148, 149, 154, 161, 168, 172], "start": [4, 5, 6, 7, 8, 9, 10, 11, 13, 25, 27, 29, 31, 33, 90, 92, 111, 113, 122, 131, 133, 136, 148, 149, 152, 159, 168, 169, 174, 183], "start_tim": 86, "state": [25, 27, 29, 31, 33, 80, 82, 88, 90, 92, 98, 109, 111, 113, 122, 131, 133, 136, 148, 149, 154, 161, 169, 172, 183], "state_change_condit": [122, 131, 133, 136, 172], "state_machin": [25, 27, 29, 31, 33], "state_machine_installation_statu": 107, "state_nam": [90, 92, 122, 131, 133, 136, 172], "state_tim": [122, 131, 133, 136, 172], "state_timer_matrix": 131, "statedur": [90, 92], "statemachin": [25, 27, 29, 31, 33, 98], "statemachinebas": 133, "statemachinebuild": 136, "statemachinerunn": 122, "statement": 96, "stateoccurr": 98, "states_occurr": 98, "static": [25, 27, 29, 31, 33, 42, 44], "statu": [154, 161, 168, 174], "stderr": [54, 57, 76, 78, 86, 94, 100, 102], "stdout": [54, 57], "steel": 151, "step": [152, 158, 166, 167], "still": [122, 131, 133, 136, 148, 149, 179], "stimuli": [148, 149, 152, 154, 161, 168, 177], "stimulu": 172, "stimulus_st": 172, "stimulus_state_output": 172, "stl": 164, "stop": [25, 27, 29, 31, 33, 151, 172], "store": [90, 92, 119, 152, 172, 177], "str": [15, 16, 25, 27, 29, 31, 33, 42, 44, 80, 82, 84, 88, 90, 92, 98, 122, 131, 133, 136, 172], "straightforward": [172, 178], "stream": [54, 57, 111, 113, 120], "strength": [154, 161], "stress": [148, 149, 154, 161], "stretch": 174, "string": [15, 16, 111, 113, 122, 131, 133, 136], "stringio": [111, 113], "strong": [148, 149], "structur": [131, 133, 151], "studi": [148, 149], "studio": 164, "subclass": [111, 113], "subfold": 172, "subgroup": [148, 149], "subject": [148, 149, 154, 161, 168, 172, 183], "subject_limit": 174, "subject_plot": 172, "suboptim": 158, "subscript": 158, "subset": 164, "substitut": [148, 149], "success": 107, "successfulli": [148, 149], "sucros": [148, 149, 175], "sudo": [152, 166, 167], "suffer": [148, 149], "suffici": [148, 149, 172], "suggest": 169, "suit": [148, 149], "sum": 172, "summari": [168, 169], "sundai": [148, 149, 168], "super": 172, "superenum": [4, 5, 6, 7, 8, 9, 10, 11, 12], "suppli": [151, 152], "supplier": 151, "support": [25, 27, 29, 31, 33, 36, 150, 151, 164], "sure": [148, 149, 151, 152, 172, 180], "surprisingli": [148, 149], "suspect": 175, "switch": [148, 149, 168, 177], "symbol": [152, 169], "symlink": 152, "sync": [25, 27, 29, 31, 33, 109, 122, 131, 133, 136], "sync_channel": [25, 27, 29, 31, 33], "sync_channel_mod": [107, 109], "sync_channel_mode_ok": 107, "sync_mod": [25, 27, 29, 31, 33], "synchron": [25, 27, 29, 31, 33, 122, 131, 133, 136], "system": [16, 148, 149, 150, 151, 156, 158, 165, 166, 167, 168, 172, 174, 175, 177, 183], "system_info": 180, "system_nam": 172, "sz": 151, "t": [109, 111, 113, 131, 164], "tab": [159, 172], "tabl": [168, 180], "tag": [154, 161, 168, 180], "take": [122, 131, 133, 136, 148, 149, 164, 172], "talk": 172, "tandem": [154, 161], "target": 172, "target_ev": [122, 131, 133, 136], "task": [74, 148, 149, 151, 154, 161], "tast": [148, 149], "team": 158, "technic": [148, 149], "telegram": [148, 149, 152, 154, 160, 161, 168, 174, 175, 177, 183], "telegram_chat": [159, 177], "telegram_set": 16, "telegram_token": [159, 177], "telegram_us": 177, "tell": [111, 113], "temperatur": [148, 149, 151, 152, 154, 156, 161, 168, 169, 171], "temporari": 169, "termin": [152, 168, 169, 178], "test": [25, 27, 29, 31, 33, 148, 149, 154, 158, 161, 168, 183], "tether": [148, 149], "text": [111, 113, 152, 159, 172], "textio": [111, 113], "textiobas": [111, 113], "than": [25, 27, 29, 31, 33, 131, 148, 149, 152, 169], "thei": [16, 122, 133, 136, 148, 149, 151, 168, 172], "them": [148, 149, 151, 164, 168, 172, 174], "therefor": 168, "thi": [1, 25, 27, 29, 31, 33, 80, 82, 88, 90, 92, 111, 113, 122, 131, 133, 136, 148, 149, 150, 152, 154, 158, 159, 161, 168, 169, 172, 174, 175, 178, 179, 180], "thing": 74, "this_trial_typ": 172, "those": [172, 174], "though": 174, "three": [154, 161, 164, 172], "threshold": [122, 131, 133, 136, 169, 172, 174, 177], "through": [25, 27, 29, 31, 33, 62, 148, 149, 154, 161, 168, 172], "time": [122, 131, 133, 136, 148, 149, 154, 158, 161, 168, 169, 172, 174, 180, 183], "timeout": [67, 172], "timer": [122, 131, 133, 136, 168], "timer_dur": [122, 131, 133, 136], "timer_for_respons": 172, "timer_id": [122, 131, 133, 136], "timestamp": [25, 27, 29, 31, 33, 80, 82, 88, 90, 92, 98, 109], "todo": [131, 150, 152], "togeth": [148, 149, 154, 161], "toggl": 168, "token": 177, "too": [148, 149, 151, 169], "tool": [166, 167], "toolbar": 152, "top": [148, 149, 151, 154, 161, 164, 168, 171, 174], "tornillo": 150, "torqu": 151, "total": [111, 113, 151, 154, 161, 172], "total_states_ad": 131, "touch": [151, 171], "touchscreen": [148, 149, 154, 161, 174, 177], "touchscreen_set": 16, "towerpro": 151, "track": [148, 149, 168], "tradit": [148, 149], "train": [148, 149, 150, 161, 163, 164, 168, 169, 175, 178, 180, 183], "training_protocol": 172, "training_set": 172, "trainingprotocol": 172, "transact": 67, "transform": [148, 149], "transient": [148, 149], "transit": [122, 131, 133, 136, 169, 172, 179], "transmiss": 109, "transpar": [148, 149, 151, 154, 161], "transport": [148, 149, 154, 161], "trial": [25, 27, 29, 31, 33, 119, 131, 148, 149, 168, 169, 172], "trial_data": 172, "trial_start_timestamp": 98, "trial_typ": 172, "trials_last_sess": 172, "trials_previous_sess": 172, "trigger": [109, 122, 131, 133, 136, 148, 149, 152, 168, 169, 172, 174, 179], "trigger_softcod": 109, "troubleshoot": [168, 169], "true": [72, 74, 76, 78, 80, 82, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 111, 113, 172], "truncat": [111, 113], "try": [148, 149], "tty": [25, 27, 29, 31, 33], "ttyacm": 152, "ttyacm0": 152, "ttyacm1": 152, "ttyacm2": 152, "tube": [154, 161], "tune": [148, 149], "tunnel": 151, "tup": [25, 27, 29, 31, 33, 44, 98, 122, 131, 133, 136, 172], "tupl": [122, 131, 133, 136], "turn": [168, 172], "tv": [148, 149], "two": [148, 149, 152, 154, 156, 161, 168, 169, 172, 174, 175, 179], "txt": 152, "txtline": 84, "type": [4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 16, 25, 27, 29, 31, 33, 37, 42, 44, 84, 98, 109, 119, 122, 133, 136, 146, 148, 149, 152, 154, 161, 169, 172, 174, 177, 178], "typestr": [72, 74, 76, 78, 80, 82, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104], "typic": [148, 149, 152, 174, 179], "u": [109, 148, 149, 178], "udevadm": 152, "ultim": [148, 149], "unchang": [111, 113], "unconsci": [148, 149], "undeclar": [122, 131, 133, 136], "under": [154, 161, 168], "underli": [111, 113], "understand": 152, "unexpect": [148, 149], "uniformli": [148, 149], "uniqu": [25, 27, 29, 31, 33, 122, 131, 133, 136, 180], "unless": [164, 174, 178], "unlik": [122, 131, 133, 136, 148, 149, 174], "unrespons": 169, "unsuccess": 168, "until": [111, 113, 122, 131, 133, 136, 148, 149, 169, 172], "unus": [111, 113], "unusu": 169, "up": [46, 148, 149, 151, 156, 158, 174, 177, 178], "updat": [25, 27, 29, 31, 33, 154, 161, 172], "update_state_numb": [122, 133, 136], "upgrad": 152, "upload": 27, "us": [25, 27, 29, 31, 33, 62, 111, 113, 122, 131, 133, 136, 148, 149, 150, 151, 154, 158, 161, 166, 167, 168, 169, 171, 172, 177, 183], "usag": 152, "usb": [151, 156], "usb1": 49, "usbmodem1293": [25, 27, 29, 31, 33], "use_screen": 177, "use_soundcard": 177, "user": [25, 27, 29, 31, 33, 154, 159, 161, 168, 172, 177, 179], "usernam": 152, "username_to_id_bot": 159, "usual": [54, 57, 111, 113, 152, 169, 174], "v": [109, 151, 152], "v3": 151, "vacant": 169, "valid": [122, 131, 133, 136], "valu": [4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 16, 25, 29, 31, 33, 36, 37, 44, 49, 52, 98, 102, 122, 131, 133, 136, 152, 168, 172, 174, 180], "value_nam": 102, "value_typ": 15, "valueerror": [111, 113], "valv": [25, 27, 29, 31, 33, 36, 52, 168, 172], "valve1": [25, 27, 29, 31, 33, 52, 172], "valve3": 172, "valve_opening_tim": 172, "valve_to_open": 172, "vaol": 151, "vari": [152, 174], "variabl": [27, 80, 82, 88, 90, 92, 98, 131, 136, 148, 149, 168, 172], "variat": 174, "variou": [151, 154, 161, 169], "vc4": 152, "ven": 150, "venv": 152, "veri": [148, 149, 154, 161], "verifi": [166, 167, 169, 171], "version": [25, 27, 29, 31, 33, 122, 131, 133, 136, 150, 151, 154, 161, 172], "via": [122, 131, 133, 136, 148, 149, 154, 161, 172], "video": [152, 154, 161, 168, 169], "view": [150, 154, 161, 168, 169, 180], "view_detect": 174, "viewer": 158, "villag": [148, 149, 150, 161, 163, 164, 166, 167, 168, 169, 172, 178], "village_project": 172, "virtual": [109, 131], "visual": [168, 172, 174], "volum": [168, 172], "wa": [27, 169, 172], "wai": [148, 149, 158], "wait": [148, 149, 169, 172, 179], "wait_exit": 179, "wake": [148, 149, 169], "want": [148, 149, 152, 172], "warn": [148, 149, 168, 169], "watch": 169, "water": [148, 149, 151, 168, 169, 172, 175], "water_calibr": [168, 172], "wayland": 152, "we": [148, 149, 150, 154, 158, 161, 163, 164, 168, 172, 174, 178], "web": 152, "webpag": 158, "week": [148, 149, 175], "weekend": [148, 149], "weigh": [169, 180], "weight": [148, 149, 152, 154, 161, 168, 169, 171, 180], "welcom": [131, 133], "welfar": [154, 161, 168], "well": [148, 149, 156, 168], "were": [122, 133, 136, 148, 149, 164, 169, 172], "what": [148, 149, 151], "whatev": 172, "when": [15, 16, 25, 27, 29, 31, 33, 122, 131, 133, 136, 148, 149, 151, 152, 168, 172, 174, 175], "whenc": [111, 113], "whenev": [152, 169], "where": [122, 131, 133, 136, 151, 152, 154, 161, 168, 169, 172, 174, 180], "whether": [27, 111, 113, 131, 136, 148, 149, 169, 174, 179], "which": [111, 113, 131, 133, 148, 149, 154, 161, 168, 169, 172, 178, 179], "while": [25, 27, 29, 31, 33, 136, 148, 149, 154, 161, 174, 179], "white": [151, 154, 161, 174], "whole": [131, 133, 154, 161], "whose": [98, 122, 131, 133, 136, 148, 149], "why": [148, 149], "wi": 152, "wide": [151, 152, 154, 161], "window": [158, 178], "wire": [25, 27, 29, 31, 33, 36, 151, 158], "wire1": 49, "wire2": 49, "wireless": [148, 149], "within": [148, 149, 168, 172, 174], "without": [98, 148, 149, 151, 168, 169, 171], "won": 131, "work": [148, 149, 152, 166, 167, 172, 175], "workspace_path": [25, 27, 29, 31, 33], "would": [148, 149, 172], "wrap": [154, 161], "writabl": [111, 113], "write": [25, 29, 31, 33, 109, 111, 113, 159], "write_to_modul": 109, "writelin": [111, 113], "written": [111, 113], "wrong": [169, 172], "x": [109, 148, 149, 151], "x1": 151, "x11": 152, "x2": 151, "x20": 151, "x3": 151, "x6": 151, "x7": 151, "x8": 151, "y": [146, 150, 152, 166, 167], "ye": [148, 149, 152], "yet": [131, 148, 149, 154, 161], "you": [1, 122, 131, 133, 136, 148, 149, 150, 151, 154, 158, 161, 163, 164, 166, 167, 168, 169, 172, 175, 178, 180], "your": [1, 131, 148, 149, 150, 152, 154, 158, 159, 161, 178, 180], "z": 109, "zero": [122, 131, 133, 136], "zone": 174}, "titles": ["classes", "change_hour_run", "ChangeHourRun", "enums", "Actions", "Active", "AreaActive", "Color", "Cycle", "DataTable", "Info", "ScreenActive", "State", "SuperEnum", "settings_class", "Setting", "Settings", "training", "Settings", "Training", "village.classes.training.TrainingError", "devices", "gui", "pybpodapi", "bpod", "Bpod", "bpod_base", "BpodBase", "bpod_com_protocol", "BpodCOMProtocol", "bpod_com_protocol_modules", "BpodCOMProtocolModules", "bpod_io", "BpodIO", "hardware", "channels", "ChannelName", "ChannelType", "Channels", "EventsPositions", "events", "base_eventname", "BaseEventName", "bpod_events", "EventName", "hardware", "Hardware", "input_channels", "bpod_input_channels", "InputName", "output_channels", "bpod_output_channels", "OutputChannel", "non_blockingsocketreceive", "NonBlockingSocketReceive", "village.pybpodapi.bpod.non_blockingsocketreceive.UnexpectedEndOfStream", "non_blockingstreamreader", "NonBlockingStreamReader", "village.pybpodapi.bpod.non_blockingstreamreader.UnexpectedEndOfStream", "settings", "bpod_modules", "bpod_module", "BpodModule", "bpod_modules", "BpodModules", "com", "arcom", "ArCOM", "ArduinoTypes", "DataType", "messaging", "base_message", "BaseMessage", "debug", "DebugMessage", "end_trial", "EndTrial", "error", "ErrorMessage", "event_occurrence", "EventOccurrence", "event_resume", "EventResume", "parser", "MessageParser", "session_info", "SessionInfo", "softcode_occurrence", "SoftcodeOccurrence", "state_occurrence", "StateOccurrence", "state_transition", "StateTransition", "stderr", "StderrMessage", "stdout", "StdoutMessage", "trial", "Trial", "untagged_message", "UntaggedMessage", "value", "ValueMessage", "warning", "WarningMessage", "protocol", "recv_msg_headers", "ReceiveMessageHeader", "send_msg_headers", "SendMessageHeader", "stderr_buffer", "StderrBuffer", "stdout_buffer", "StdoutBuffer", "exceptions", "bpod_error", "village.pybpodapi.exceptions.bpod_error.BpodErrorException", "protocol", "session", "Session", "StreamsWrapper", "state_machine", "StateMachine", "conditions", "Conditions", "global_counters", "GlobalCounters", "global_timers", "GlobalTimers", "state_machine_base", "village.pybpodapi.state_machine.state_machine_base.SMAError", "StateMachineBase", "state_machine_builder", "StateMachineBuilder", "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilderError", "state_machine_runner", "StateMachineRunner", "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunnerError", "utils", "csv", "Reader", "Writer", "date_parser", "parse", "screen", "behavior_window", "BehaviorWindow", "API", "&lt;no title&gt;", "FAQ", "Assembly Instructions", "List of Parts", "Software Installation", "How to Build It", "What Is The Training Village?", "Schedule Backups", "Hardware Connections", "Send Heartbeat Signals to a Remote Device", "Configure Remote Access", "Create a Telegram Bot", "Initial Configuration", "How Does It Work?", "System ISO Image", "Code Repository", "3D Printing Files", "Resources", "Temperature or Weight Sensor Connection Error", "Troubleshooting", "GUI Overview", "Receive and Respond to Telegram Alarms", "Animal Procedures", "Calibrate and Test Corridor Components", "Create a Training Protocol", "Saved Data", "Calibrate and Test Animal Detection", "Maintenance", "Create Real-Time Plots", "Initial Settings", "Getting Started", "System State Machine", "Create New Subjects", "Test a Training Protocol", "Use an Existing Training Protocol", "User Guide"], "titleterms": {"": 179, "3d": [151, 164], "A": 179, "In": 179, "It": [153, 154, 161, 178], "The": [154, 161, 172, 179], "access": [152, 158], "action": 4, "activ": 5, "after": 169, "after_tri": 172, "alarm": [159, 169], "alia": 152, "aluminium": 151, "an": [152, 159, 179, 182], "anim": [170, 174, 179], "api": 147, "arcom": [66, 67], "arduinotyp": 68, "areaact": 6, "assembli": 150, "b": 179, "backup": 155, "base_eventnam": 41, "base_messag": 71, "baseeventnam": 42, "basemessag": 72, "befor": 179, "behavior": [151, 154, 161, 174], "behavior_window": 145, "behaviorwindow": 146, "biweekli": 175, "bot": 159, "both": 179, "box": [151, 154, 161, 174, 179], "bpod": [24, 25, 55, 58, 151], "bpod_bas": 26, "bpod_com_protocol": 28, "bpod_com_protocol_modul": 30, "bpod_error": [115, 116], "bpod_ev": 43, "bpod_input_channel": 48, "bpod_io": 32, "bpod_modul": [60, 61, 63], "bpod_output_channel": 51, "bpodbas": 27, "bpodcomprotocol": 29, "bpodcomprotocolmodul": 31, "bpoderrorexcept": 116, "bpodio": 33, "bpodmodul": [62, 64], "build": [153, 178], "cabl": 164, "cage": 164, "calibr": [171, 174], "cam": 151, "camera": 164, "case": 179, "chang": 152, "change_hour_run": 1, "changehourrun": 2, "channel": [35, 38], "channelnam": 36, "channeltyp": 37, "check": [159, 169], "class": [0, 20, 147], "close": 172, "cnc": 151, "code": [163, 172], "color": 7, "com": 65, "commun": 152, "compon": 171, "condit": [123, 124], "configur": [158, 160], "connect": [156, 166, 167], "connector": 164, "consist": 152, "control": [154, 161], "corridor": [154, 161, 164, 171, 174], "creat": [152, 159, 172, 176, 180], "create_tri": 172, "csv": 139, "custom": 172, "cycl": [8, 179], "dai": 169, "daili": 175, "data": [168, 173], "datat": 9, "datatyp": 69, "date_pars": 142, "debug": 73, "debugmessag": 74, "default_training_set": 172, "detect": [169, 174], "devic": [21, 147, 152, 157], "doe": [154, 161], "door": 164, "electron": 151, "end_trial": 75, "endtrial": 76, "enum": 3, "environ": 152, "error": [77, 166, 167], "errormessag": 78, "event": 40, "event_occurr": 79, "event_resum": 81, "eventnam": 44, "eventoccurr": 80, "eventresum": 82, "eventsposit": 39, "everi": 169, "exampl": 172, "except": [114, 116], "exist": [159, 182], "extrus": 151, "faq": 149, "file": 164, "finish": 169, "first": 152, "followthelight": 172, "get": 178, "global_count": 125, "global_tim": 127, "globalcount": 126, "globaltim": 128, "gui": [22, 147, 168], "gui_tab": 172, "guid": 183, "hardwar": [34, 45, 46, 152, 156], "hat": 151, "heartbeat": 157, "homecag": 151, "hour": 169, "hous": [154, 161], "how": [153, 154, 161], "i": [154, 169], "i2c": 152, "imag": 162, "info": 10, "initi": [160, 177], "input_channel": 47, "inputnam": 49, "instal": 152, "instruct": 150, "interrog": 169, "iso": 162, "launch": [152, 178], "leav": 179, "librari": 152, "list": 151, "machin": [151, 179], "main": 168, "mainten": 175, "make": 159, "maximum": 179, "messag": 70, "messagepars": 84, "method": 172, "monitor": 168, "monthli": 175, "mount": 164, "name": 152, "need": 152, "new": 180, "non_blockingsocketrec": [53, 55], "non_blockingstreamread": [56, 58], "nonblockingsocketrec": 54, "nonblockingstreamread": 57, "normal": 179, "o": 152, "occasion": 175, "open": [154, 161], "option": [172, 179], "organ": [164, 172], "other": 147, "output_channel": 50, "outputchannel": 52, "overview": 168, "pars": 143, "parser": 83, "part": 151, "perform": 169, "pi": 152, "pin": 152, "pip": 152, "plot": 176, "port": 151, "prefer": 152, "preliminari": 178, "prepar": 169, "print": [151, 164], "procedur": 170, "project": 172, "protocol": [105, 117, 172, 181, 182], "pybpodapi": [23, 55, 58, 116, 130, 134, 137, 147], "python": 152, "raspberri": [151, 152], "reader": 140, "real": 176, "receiv": 169, "receivemessagehead": 107, "recv_msg_head": 106, "remot": [157, 158], "repositori": 163, "resourc": 165, "respond": 169, "rfid": 151, "rule": 152, "run": [152, 169], "save": 173, "schedul": 155, "screen": [144, 151, 152], "screenact": 11, "send": 157, "send_msg_head": 108, "sendmessagehead": 109, "sensor": [166, 167], "serial": 152, "servo": 152, "session": [118, 119, 179], "session_info": 85, "sessioninfo": 86, "set": [15, 16, 18, 59, 152, 168, 177], "settings_class": 14, "signal": 157, "smaerror": 130, "softcode_occurr": 87, "softcodeoccurr": 88, "softwar": 152, "sound": 151, "sourc": [154, 161], "stai": 179, "start": [172, 178], "state": [12, 179], "state_machin": [121, 130, 134, 137], "state_machine_bas": [129, 130], "state_machine_build": [132, 134], "state_machine_runn": [135, 137], "state_occurr": 89, "state_transit": 91, "statemachin": 122, "statemachinebas": 131, "statemachinebuild": 133, "statemachinebuildererror": 134, "statemachinerunn": 136, "statemachinerunnererror": 137, "stateoccurr": 90, "statetransit": 92, "stderr": 93, "stderr_buff": 110, "stderrbuff": 111, "stderrmessag": 94, "stdout": 95, "stdout_buff": 112, "stdoutbuff": 113, "stdoutmessag": 96, "step": 178, "streamswrapp": 120, "structur": 172, "subject": [169, 179, 180], "superenum": 13, "system": [152, 154, 161, 162, 164, 169, 178, 179], "task": [168, 169, 172, 179], "telegram": [159, 169], "temperatur": [166, 167], "test": [171, 174, 181], "time": [152, 176, 179], "token": 159, "train": [17, 19, 20, 151, 152, 154, 172, 181, 182], "trainingerror": 20, "trial": [97, 98], "trigger": 159, "troubleshoot": 167, "tube": [151, 164], "twice": 169, "uart": 152, "udev": 152, "unexpectedendofstream": [55, 58], "untagged_messag": 99, "untaggedmessag": 100, "until": 179, "updat": 152, "update_training_set": 172, "us": [152, 182], "usag": [154, 161], "usb": 152, "user": 183, "util": 138, "valu": 101, "valuemessag": 102, "via": 152, "villag": [20, 55, 58, 116, 130, 134, 137, 151, 152, 154], "warn": 103, "warningmessag": 104, "weekli": 175, "weight": [166, 167], "what": [152, 154], "when": 169, "while": 169, "work": [154, 161], "writer": 141, "you": 152, "your": 172, "yourself": 178}})