Search.setIndex({"alltitles": {"3D Printing Files": [[161, null]], "3D-Printed Parts": [[148, "d-printed-parts"]], "API": [[144, null]], "Accessing Pins via Hardware (for Servos) and Using UART Pin for Communication": [[149, "accessing-pins-via-hardware-for-servos-and-using-uart-pin-for-communication"]], "Actions": [[2, null]], "Active": [[3, null]], "Adjust Memory and Disk Cache Behavior": [[149, "adjust-memory-and-disk-cache-behavior"]], "Alarms": [[166, "alarms"]], "Aluminium Extrusions and Tubes": [[148, "aluminium-extrusions-and-tubes"]], "Animal Procedures": [[167, null]], "ArCOM": [[64, null]], "ArduinoTypes": [[65, null]], "AreaActive": [[4, null]], "Assembly Instructions": [[147, null]], "BaseEventName": [[39, null]], "BaseMessage": [[69, null]], "Behavioral Box": [[148, "behavioral-box"]], "Biweekly": [[172, "biweekly"]], "Bpod": [[22, null]], "Bpod + Ports": [[148, "bpod-ports"]], "BpodBase": [[24, null]], "BpodCOMProtocol": [[26, null]], "BpodCOMProtocolModules": [[28, null]], "BpodIO": [[30, null]], "BpodModule": [[59, null]], "BpodModules": [[61, null]], "Build-It-Yourself": [[175, "build-it-yourself"]], "CNC Machined Parts": [[148, "cnc-machined-parts"]], "Cable organizer": [[161, "cable-organizer"]], "Calibrate and Test Animal Detection": [[171, null]], "Calibrate and Test Corridor Components": [[168, null]], "Camera Mount": [[161, "camera-mount"]], "Changing Preferences": [[149, "changing-preferences"]], "ChannelName": [[33, null]], "ChannelType": [[34, null]], "Channels": [[35, null]], "Check the token of an existing bot": [[156, "check-the-token-of-an-existing-bot"]], "Checks Performed After the Task Finishes": [[166, "checks-performed-after-the-task-finishes"]], "Checks Performed When a Subject is Detected, and the Task is Prepared": [[166, "checks-performed-when-a-subject-is-detected-and-the-task-is-prepared"]], "Checks Performed While the Task is Running": [[166, "checks-performed-while-the-task-is-running"]], "Classes": [[144, "classes"]], "Code Organization": [[169, "code-organization"]], "Code Repository": [[160, null]], "Color": [[5, null]], "Conditions": [[121, null]], "Configure Remote Access": [[155, null]], "Connectors for tubes and cages": [[161, "connectors-for-tubes-and-cages"]], "Controller": [[6, null]], "Corridor Files": [[161, "corridor-files"]], "Create New Subjects": [[177, null]], "Create Real-Time Plots": [[173, null]], "Create a Telegram Bot": [[156, null]], "Create a Training Protocol": [[169, null]], "Create an Alias and Run the Training Village": [[149, "create-an-alias-and-run-the-training-village"]], "Creating a Python Environment and Installing pip Libraries": [[149, "creating-a-python-environment-and-installing-pip-libraries"]], "Customizing Your Training Protocol": [[169, "customizing-your-training-protocol"]], "Cycle": [[7, null]], "DATA": [[165, "data"]], "Daily": [[172, "daily"]], "DataTable": [[8, null]], "DataType": [[66, null]], "DebugMessage": [[71, null]], "Detection in the Behavioral Box": [[171, "detection-in-the-behavioral-box"]], "Detection in the Corridor": [[171, "detection-in-the-corridor"]], "Devices": [[144, "devices"]], "Door System": [[161, "door-system"]], "Electronics": [[148, "electronics"]], "EndTrial": [[73, null]], "ErrorMessage": [[75, null]], "EventName": [[41, null]], "EventOccurrence": [[77, null]], "EventResume": [[79, null]], "EventsPositions": [[36, null]], "Examples of Code Structure": [[169, "examples-of-code-structure"]], "FAQ": [[146, null]], "GUI Overview": [[165, null]], "Getting Started": [[175, null]], "GlobalCounters": [[123, null]], "GlobalTimers": [[125, null]], "Grant Permissions for Maximum Process Priority": [[149, "grant-permissions-for-maximum-process-priority"]], "Gui": [[144, "gui"]], "Hardware": [[43, null]], "Hardware Connections": [[153, null]], "Homecages": [[148, "homecages"]], "How Does It Work?": [[151, "how-does-it-work"], [158, null]], "How to Build It": [[150, null]], "I2C Communication": [[149, "i2c-communication"]], "In Both Cases": [[176, "in-both-cases"]], "Info": [[9, null]], "Initial Configuration": [[157, null]], "Initial Settings": [[174, null]], "InputName": [[46, null]], "Install Training Village": [[149, "install-training-village"]], "Installing Needed Libraries": [[149, "installing-needed-libraries"]], "Interrogate the system": [[166, "interrogate-the-system"]], "Launch Raspberry Pi OS for the First Time": [[149, "launch-raspberry-pi-os-for-the-first-time"]], "Launching the System": [[175, "launching-the-system"]], "List of Parts": [[148, null]], "MAIN": [[165, "main"]], "MONITOR": [[165, "monitor"]], "Maintenance": [[172, null]], "Make the bot triggers the alarms": [[156, "make-the-bot-triggers-the-alarms"]], "MessageParser": [[81, null]], "Monthly": [[172, "monthly"]], "NonBlockingSocketReceive": [[51, null]], "NonBlockingStreamReader": [[54, null]], "Normal Cycle for an Animal Session": [[176, "normal-cycle-for-an-animal-session"]], "Occasionally": [[172, "occasionally"]], "Open Source": [[151, "open-source"], [158, "open-source"]], "Option A: The Subject Leaves Before the Task\u2019s Maximum Time": [[176, "option-a-the-subject-leaves-before-the-tasks-maximum-time"]], "Option B: The Subject Stays in the Box Until the Maximum Time": [[176, "option-b-the-subject-stays-in-the-box-until-the-maximum-time"]], "Other": [[144, "other"]], "OutputChannel": [[49, null]], "Preliminary Steps": [[175, "preliminary-steps"]], "Project Structure": [[169, "project-structure"]], "Pybpodapi": [[144, "pybpodapi"]], "RFID": [[148, "rfid"]], "Raspberry + Cams": [[148, "raspberry-cams"]], "Reader": [[137, null]], "Receive and Respond to Telegram Alarms": [[166, null]], "ReceiveMessageHeader": [[104, null]], "Resources": [[162, null]], "SETTINGS": [[165, "settings"]], "Save": [[10, null]], "Saved Data": [[170, null]], "Schedule Backups": [[152, null]], "Screen": [[148, "screen"]], "Screen Settings": [[149, "screen-settings"]], "ScreenActive": [[11, null]], "Send Heartbeat Signals to a Remote Device": [[154, null]], "SendMessageHeader": [[106, null]], "Serial Communication": [[149, "serial-communication"]], "Session": [[116, null]], "SessionInfo": [[83, null]], "Setting": [[16, null]], "Settings": [[17, null]], "SoftcodeOccurrence": [[85, null]], "Software Installation": [[149, null]], "Sound": [[148, "sound"]], "State": [[12, null]], "StateMachine": [[119, null]], "StateMachineBase": [[128, null]], "StateMachineBuilder": [[130, null]], "StateMachineRunner": [[133, null]], "StateOccurrence": [[87, null]], "StateTransition": [[89, null]], "StderrBuffer": [[108, null]], "StderrMessage": [[91, null]], "StdoutBuffer": [[110, null]], "StdoutMessage": [[93, null]], "StreamsWrapper": [[117, null]], "Subject Checks Performed Twice a Day": [[166, "subject-checks-performed-twice-a-day"]], "SuperEnum": [[13, null]], "SyncType": [[14, null]], "System Checks Performed Every Hour": [[166, "system-checks-performed-every-hour"]], "System ISO Image": [[159, null]], "System State Machine": [[176, null]], "System usage": [[151, "system-usage"], [158, "system-usage"]], "TASKS": [[165, "tasks"]], "Tasks": [[169, "tasks"]], "Temperature or Weight Sensor Connection Error": [[163, null], [164, "temperature-or-weight-sensor-connection-error"]], "Test a Training Protocol": [[178, null]], "The Behavioral Box": [[151, "the-behavioral-box"], [158, "the-behavioral-box"]], "The Controller": [[151, "the-controller"], [158, "the-controller"]], "The Corridor": [[151, "the-corridor"], [158, "the-corridor"]], "The FollowTheLight Task": [[169, "the-followthelight-task"]], "The Housing": [[151, "the-housing"], [158, "the-housing"]], "The after_trial() Method": [[169, "the-after-trial-method"]], "The close() Method": [[169, "the-close-method"]], "The create_trial() Method": [[169, "the-create-trial-method"]], "The default_training_settings() Method": [[169, "the-default-training-settings-method"]], "The optional gui_tabs() Method": [[169, "the-optional-gui-tabs-method"]], "The start() Method": [[169, "the-start-method"]], "The update_training_settings() Method": [[169, "the-update-training-settings-method"]], "Training Protocol": [[169, "training-protocol"]], "Training Village HAT": [[148, "training-village-hat"]], "Trial": [[95, null]], "Troubleshooting": [[164, null]], "Udev Rules for Consistent USB Device Naming": [[149, "udev-rules-for-consistent-usb-device-naming"]], "UntaggedMessage": [[97, null]], "Updating the System": [[149, "updating-the-system"]], "Use an Existing Training Protocol": [[179, null]], "User Guide": [[180, null]], "ValueMessage": [[99, null]], "VideoWorker": [[143, null]], "WarningMessage": [[101, null]], "Weekly": [[172, "weekly"]], "What Is The Training Village?": [[151, null]], "What You Need": [[149, "what-you-need"]], "Writer": [[138, null]], "arcom": [[63, null]], "base_eventname": [[38, null]], "base_message": [[68, null]], "bpod": [[21, null]], "bpod_base": [[23, null]], "bpod_com_protocol": [[25, null]], "bpod_com_protocol_modules": [[27, null]], "bpod_error": [[112, null]], "bpod_events": [[40, null]], "bpod_input_channels": [[45, null]], "bpod_io": [[29, null]], "bpod_module": [[58, null]], "bpod_modules": [[57, null], [60, null]], "bpod_output_channels": [[48, null]], "channels": [[32, null]], "classes": [[0, null]], "com": [[62, null]], "conditions": [[120, null]], "csv": [[136, null]], "date_parser": [[139, null]], "debug": [[70, null]], "devices": [[18, null]], "end_trial": [[72, null]], "enums": [[1, null]], "error": [[74, null]], "event_occurrence": [[76, null]], "event_resume": [[78, null]], "events": [[37, null]], "exceptions": [[111, null]], "global_counters": [[122, null]], "global_timers": [[124, null]], "gui": [[19, null]], "hardware": [[31, null], [42, null]], "input_channels": [[44, null]], "messaging": [[67, null]], "non_blockingsocketreceive": [[50, null]], "non_blockingstreamreader": [[53, null]], "output_channels": [[47, null]], "parse": [[140, null]], "parser": [[80, null]], "protocol": [[102, null], [114, null]], "pybpodapi": [[20, null]], "recv_msg_headers": [[103, null]], "screen": [[141, null]], "send_msg_headers": [[105, null]], "session": [[115, null]], "session_info": [[82, null]], "settings": [[56, null]], "settings_class": [[15, null]], "softcode_occurrence": [[84, null]], "state_machine": [[118, null]], "state_machine_base": [[126, null]], "state_machine_builder": [[129, null]], "state_machine_runner": [[132, null]], "state_occurrence": [[86, null]], "state_transition": [[88, null]], "stderr": [[90, null]], "stderr_buffer": [[107, null]], "stdout": [[92, null]], "stdout_buffer": [[109, null]], "trial": [[94, null]], "untagged_message": [[96, null]], "utils": [[135, null]], "value": [[98, null]], "video_worker": [[142, null]], "village.pybpodapi.bpod.non_blockingsocketreceive.UnexpectedEndOfStream": [[52, null]], "village.pybpodapi.bpod.non_blockingstreamreader.UnexpectedEndOfStream": [[55, null]], "village.pybpodapi.exceptions.bpod_error.BpodErrorException": [[113, null]], "village.pybpodapi.state_machine.state_machine_base.SMAError": [[127, null]], "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilderError": [[131, null]], "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunnerError": [[134, null]], "warning": [[100, null]]}, "docnames": ["api_generated/village.classes", "api_generated/village.classes.enums", "api_generated/village.classes.enums.Actions", "api_generated/village.classes.enums.Active", "api_generated/village.classes.enums.AreaActive", "api_generated/village.classes.enums.Color", "api_generated/village.classes.enums.Controller", "api_generated/village.classes.enums.Cycle", "api_generated/village.classes.enums.DataTable", "api_generated/village.classes.enums.Info", "api_generated/village.classes.enums.Save", "api_generated/village.classes.enums.ScreenActive", "api_generated/village.classes.enums.State", "api_generated/village.classes.enums.SuperEnum", "api_generated/village.classes.enums.SyncType", "api_generated/village.classes.settings_class", "api_generated/village.classes.settings_class.Setting", "api_generated/village.classes.settings_class.Settings", "api_generated/village.devices", "api_generated/village.gui", "api_generated/village.pybpodapi", "api_generated/village.pybpodapi.bpod", "api_generated/village.pybpodapi.bpod.Bpod", "api_generated/village.pybpodapi.bpod.bpod_base", "api_generated/village.pybpodapi.bpod.bpod_base.BpodBase", "api_generated/village.pybpodapi.bpod.bpod_com_protocol", "api_generated/village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol", "api_generated/village.pybpodapi.bpod.bpod_com_protocol_modules", "api_generated/village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules", "api_generated/village.pybpodapi.bpod.bpod_io", "api_generated/village.pybpodapi.bpod.bpod_io.BpodIO", "api_generated/village.pybpodapi.bpod.hardware", "api_generated/village.pybpodapi.bpod.hardware.channels", "api_generated/village.pybpodapi.bpod.hardware.channels.ChannelName", "api_generated/village.pybpodapi.bpod.hardware.channels.ChannelType", "api_generated/village.pybpodapi.bpod.hardware.channels.Channels", "api_generated/village.pybpodapi.bpod.hardware.channels.EventsPositions", "api_generated/village.pybpodapi.bpod.hardware.events", "api_generated/village.pybpodapi.bpod.hardware.events.base_eventname", "api_generated/village.pybpodapi.bpod.hardware.events.base_eventname.BaseEventName", "api_generated/village.pybpodapi.bpod.hardware.events.bpod_events", "api_generated/village.pybpodapi.bpod.hardware.events.bpod_events.EventName", "api_generated/village.pybpodapi.bpod.hardware.hardware", "api_generated/village.pybpodapi.bpod.hardware.hardware.Hardware", "api_generated/village.pybpodapi.bpod.hardware.input_channels", "api_generated/village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels", "api_generated/village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName", "api_generated/village.pybpodapi.bpod.hardware.output_channels", "api_generated/village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels", "api_generated/village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.OutputChannel", "api_generated/village.pybpodapi.bpod.non_blockingsocketreceive", "api_generated/village.pybpodapi.bpod.non_blockingsocketreceive.NonBlockingSocketReceive", "api_generated/village.pybpodapi.bpod.non_blockingsocketreceive.UnexpectedEndOfStream", "api_generated/village.pybpodapi.bpod.non_blockingstreamreader", "api_generated/village.pybpodapi.bpod.non_blockingstreamreader.NonBlockingStreamReader", "api_generated/village.pybpodapi.bpod.non_blockingstreamreader.UnexpectedEndOfStream", "api_generated/village.pybpodapi.bpod.settings", "api_generated/village.pybpodapi.bpod_modules", "api_generated/village.pybpodapi.bpod_modules.bpod_module", "api_generated/village.pybpodapi.bpod_modules.bpod_module.BpodModule", "api_generated/village.pybpodapi.bpod_modules.bpod_modules", "api_generated/village.pybpodapi.bpod_modules.bpod_modules.BpodModules", "api_generated/village.pybpodapi.com", "api_generated/village.pybpodapi.com.arcom", "api_generated/village.pybpodapi.com.arcom.ArCOM", "api_generated/village.pybpodapi.com.arcom.ArduinoTypes", "api_generated/village.pybpodapi.com.arcom.DataType", "api_generated/village.pybpodapi.com.messaging", "api_generated/village.pybpodapi.com.messaging.base_message", "api_generated/village.pybpodapi.com.messaging.base_message.BaseMessage", "api_generated/village.pybpodapi.com.messaging.debug", "api_generated/village.pybpodapi.com.messaging.debug.DebugMessage", "api_generated/village.pybpodapi.com.messaging.end_trial", "api_generated/village.pybpodapi.com.messaging.end_trial.EndTrial", "api_generated/village.pybpodapi.com.messaging.error", "api_generated/village.pybpodapi.com.messaging.error.ErrorMessage", "api_generated/village.pybpodapi.com.messaging.event_occurrence", "api_generated/village.pybpodapi.com.messaging.event_occurrence.EventOccurrence", "api_generated/village.pybpodapi.com.messaging.event_resume", "api_generated/village.pybpodapi.com.messaging.event_resume.EventResume", "api_generated/village.pybpodapi.com.messaging.parser", "api_generated/village.pybpodapi.com.messaging.parser.MessageParser", "api_generated/village.pybpodapi.com.messaging.session_info", "api_generated/village.pybpodapi.com.messaging.session_info.SessionInfo", "api_generated/village.pybpodapi.com.messaging.softcode_occurrence", "api_generated/village.pybpodapi.com.messaging.softcode_occurrence.SoftcodeOccurrence", "api_generated/village.pybpodapi.com.messaging.state_occurrence", "api_generated/village.pybpodapi.com.messaging.state_occurrence.StateOccurrence", "api_generated/village.pybpodapi.com.messaging.state_transition", "api_generated/village.pybpodapi.com.messaging.state_transition.StateTransition", "api_generated/village.pybpodapi.com.messaging.stderr", "api_generated/village.pybpodapi.com.messaging.stderr.StderrMessage", "api_generated/village.pybpodapi.com.messaging.stdout", "api_generated/village.pybpodapi.com.messaging.stdout.StdoutMessage", "api_generated/village.pybpodapi.com.messaging.trial", "api_generated/village.pybpodapi.com.messaging.trial.Trial", "api_generated/village.pybpodapi.com.messaging.untagged_message", "api_generated/village.pybpodapi.com.messaging.untagged_message.UntaggedMessage", "api_generated/village.pybpodapi.com.messaging.value", "api_generated/village.pybpodapi.com.messaging.value.ValueMessage", "api_generated/village.pybpodapi.com.messaging.warning", "api_generated/village.pybpodapi.com.messaging.warning.WarningMessage", "api_generated/village.pybpodapi.com.protocol", "api_generated/village.pybpodapi.com.protocol.recv_msg_headers", "api_generated/village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader", "api_generated/village.pybpodapi.com.protocol.send_msg_headers", "api_generated/village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader", "api_generated/village.pybpodapi.com.stderr_buffer", "api_generated/village.pybpodapi.com.stderr_buffer.StderrBuffer", "api_generated/village.pybpodapi.com.stdout_buffer", "api_generated/village.pybpodapi.com.stdout_buffer.StdoutBuffer", "api_generated/village.pybpodapi.exceptions", "api_generated/village.pybpodapi.exceptions.bpod_error", "api_generated/village.pybpodapi.exceptions.bpod_error.BpodErrorException", "api_generated/village.pybpodapi.protocol", "api_generated/village.pybpodapi.session", "api_generated/village.pybpodapi.session.Session", "api_generated/village.pybpodapi.session.StreamsWrapper", "api_generated/village.pybpodapi.state_machine", "api_generated/village.pybpodapi.state_machine.StateMachine", "api_generated/village.pybpodapi.state_machine.conditions", "api_generated/village.pybpodapi.state_machine.conditions.Conditions", "api_generated/village.pybpodapi.state_machine.global_counters", "api_generated/village.pybpodapi.state_machine.global_counters.GlobalCounters", "api_generated/village.pybpodapi.state_machine.global_timers", "api_generated/village.pybpodapi.state_machine.global_timers.GlobalTimers", "api_generated/village.pybpodapi.state_machine.state_machine_base", "api_generated/village.pybpodapi.state_machine.state_machine_base.SMAError", "api_generated/village.pybpodapi.state_machine.state_machine_base.StateMachineBase", "api_generated/village.pybpodapi.state_machine.state_machine_builder", "api_generated/village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder", "api_generated/village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilderError", "api_generated/village.pybpodapi.state_machine.state_machine_runner", "api_generated/village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner", "api_generated/village.pybpodapi.state_machine.state_machine_runner.StateMachineRunnerError", "api_generated/village.pybpodapi.utils", "api_generated/village.pybpodapi.utils.csv", "api_generated/village.pybpodapi.utils.csv.Reader", "api_generated/village.pybpodapi.utils.csv.Writer", "api_generated/village.pybpodapi.utils.date_parser", "api_generated/village.pybpodapi.utils.date_parser.parse", "api_generated/village.screen", "api_generated/village.screen.video_worker", "api_generated/village.screen.video_worker.VideoWorker", "api_index", "faq/faq", "faq_index", "how_to_build/assembly_instructions", "how_to_build/list_of_parts", "how_to_build/software_installation", "how_to_build_index", "index", "initial_configuration/backup", "initial_configuration/hardware", "initial_configuration/heartbeat", "initial_configuration/remote", "initial_configuration/telegram", "initial_configuration_index", "main/what_is", "resources/ISO", "resources/code", "resources/print_files", "resources_index", "troubleshooting/troubleshooting", "troubleshooting_index", "user_guide/GUI", "user_guide/alarms", "user_guide/animal_procedures", "user_guide/corridor", "user_guide/create", "user_guide/data", "user_guide/detection", "user_guide/maintenance", "user_guide/plots", "user_guide/settings", "user_guide/started", "user_guide/state_machine", "user_guide/subjects", "user_guide/test", "user_guide/use", "user_guide_index"], "envversion": {"nbsphinx": 4, "sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1}, "filenames": ["api_generated/village.classes.rst", "api_generated/village.classes.enums.rst", "api_generated/village.classes.enums.Actions.rst", "api_generated/village.classes.enums.Active.rst", "api_generated/village.classes.enums.AreaActive.rst", "api_generated/village.classes.enums.Color.rst", "api_generated/village.classes.enums.Controller.rst", "api_generated/village.classes.enums.Cycle.rst", "api_generated/village.classes.enums.DataTable.rst", "api_generated/village.classes.enums.Info.rst", "api_generated/village.classes.enums.Save.rst", "api_generated/village.classes.enums.ScreenActive.rst", "api_generated/village.classes.enums.State.rst", "api_generated/village.classes.enums.SuperEnum.rst", "api_generated/village.classes.enums.SyncType.rst", "api_generated/village.classes.settings_class.rst", "api_generated/village.classes.settings_class.Setting.rst", "api_generated/village.classes.settings_class.Settings.rst", "api_generated/village.devices.rst", "api_generated/village.gui.rst", "api_generated/village.pybpodapi.rst", "api_generated/village.pybpodapi.bpod.rst", "api_generated/village.pybpodapi.bpod.Bpod.rst", "api_generated/village.pybpodapi.bpod.bpod_base.rst", "api_generated/village.pybpodapi.bpod.bpod_base.BpodBase.rst", "api_generated/village.pybpodapi.bpod.bpod_com_protocol.rst", "api_generated/village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.rst", "api_generated/village.pybpodapi.bpod.bpod_com_protocol_modules.rst", "api_generated/village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.rst", "api_generated/village.pybpodapi.bpod.bpod_io.rst", "api_generated/village.pybpodapi.bpod.bpod_io.BpodIO.rst", "api_generated/village.pybpodapi.bpod.hardware.rst", "api_generated/village.pybpodapi.bpod.hardware.channels.rst", "api_generated/village.pybpodapi.bpod.hardware.channels.ChannelName.rst", "api_generated/village.pybpodapi.bpod.hardware.channels.ChannelType.rst", "api_generated/village.pybpodapi.bpod.hardware.channels.Channels.rst", "api_generated/village.pybpodapi.bpod.hardware.channels.EventsPositions.rst", "api_generated/village.pybpodapi.bpod.hardware.events.rst", "api_generated/village.pybpodapi.bpod.hardware.events.base_eventname.rst", "api_generated/village.pybpodapi.bpod.hardware.events.base_eventname.BaseEventName.rst", "api_generated/village.pybpodapi.bpod.hardware.events.bpod_events.rst", "api_generated/village.pybpodapi.bpod.hardware.events.bpod_events.EventName.rst", "api_generated/village.pybpodapi.bpod.hardware.hardware.rst", "api_generated/village.pybpodapi.bpod.hardware.hardware.Hardware.rst", "api_generated/village.pybpodapi.bpod.hardware.input_channels.rst", "api_generated/village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.rst", "api_generated/village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.rst", "api_generated/village.pybpodapi.bpod.hardware.output_channels.rst", "api_generated/village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.rst", "api_generated/village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.OutputChannel.rst", "api_generated/village.pybpodapi.bpod.non_blockingsocketreceive.rst", "api_generated/village.pybpodapi.bpod.non_blockingsocketreceive.NonBlockingSocketReceive.rst", "api_generated/village.pybpodapi.bpod.non_blockingsocketreceive.UnexpectedEndOfStream.rst", "api_generated/village.pybpodapi.bpod.non_blockingstreamreader.rst", "api_generated/village.pybpodapi.bpod.non_blockingstreamreader.NonBlockingStreamReader.rst", "api_generated/village.pybpodapi.bpod.non_blockingstreamreader.UnexpectedEndOfStream.rst", "api_generated/village.pybpodapi.bpod.settings.rst", "api_generated/village.pybpodapi.bpod_modules.rst", "api_generated/village.pybpodapi.bpod_modules.bpod_module.rst", "api_generated/village.pybpodapi.bpod_modules.bpod_module.BpodModule.rst", "api_generated/village.pybpodapi.bpod_modules.bpod_modules.rst", "api_generated/village.pybpodapi.bpod_modules.bpod_modules.BpodModules.rst", "api_generated/village.pybpodapi.com.rst", "api_generated/village.pybpodapi.com.arcom.rst", "api_generated/village.pybpodapi.com.arcom.ArCOM.rst", "api_generated/village.pybpodapi.com.arcom.ArduinoTypes.rst", "api_generated/village.pybpodapi.com.arcom.DataType.rst", "api_generated/village.pybpodapi.com.messaging.rst", "api_generated/village.pybpodapi.com.messaging.base_message.rst", "api_generated/village.pybpodapi.com.messaging.base_message.BaseMessage.rst", "api_generated/village.pybpodapi.com.messaging.debug.rst", "api_generated/village.pybpodapi.com.messaging.debug.DebugMessage.rst", "api_generated/village.pybpodapi.com.messaging.end_trial.rst", "api_generated/village.pybpodapi.com.messaging.end_trial.EndTrial.rst", "api_generated/village.pybpodapi.com.messaging.error.rst", "api_generated/village.pybpodapi.com.messaging.error.ErrorMessage.rst", "api_generated/village.pybpodapi.com.messaging.event_occurrence.rst", "api_generated/village.pybpodapi.com.messaging.event_occurrence.EventOccurrence.rst", "api_generated/village.pybpodapi.com.messaging.event_resume.rst", "api_generated/village.pybpodapi.com.messaging.event_resume.EventResume.rst", "api_generated/village.pybpodapi.com.messaging.parser.rst", "api_generated/village.pybpodapi.com.messaging.parser.MessageParser.rst", "api_generated/village.pybpodapi.com.messaging.session_info.rst", "api_generated/village.pybpodapi.com.messaging.session_info.SessionInfo.rst", "api_generated/village.pybpodapi.com.messaging.softcode_occurrence.rst", "api_generated/village.pybpodapi.com.messaging.softcode_occurrence.SoftcodeOccurrence.rst", "api_generated/village.pybpodapi.com.messaging.state_occurrence.rst", "api_generated/village.pybpodapi.com.messaging.state_occurrence.StateOccurrence.rst", "api_generated/village.pybpodapi.com.messaging.state_transition.rst", "api_generated/village.pybpodapi.com.messaging.state_transition.StateTransition.rst", "api_generated/village.pybpodapi.com.messaging.stderr.rst", "api_generated/village.pybpodapi.com.messaging.stderr.StderrMessage.rst", "api_generated/village.pybpodapi.com.messaging.stdout.rst", "api_generated/village.pybpodapi.com.messaging.stdout.StdoutMessage.rst", "api_generated/village.pybpodapi.com.messaging.trial.rst", "api_generated/village.pybpodapi.com.messaging.trial.Trial.rst", "api_generated/village.pybpodapi.com.messaging.untagged_message.rst", "api_generated/village.pybpodapi.com.messaging.untagged_message.UntaggedMessage.rst", "api_generated/village.pybpodapi.com.messaging.value.rst", "api_generated/village.pybpodapi.com.messaging.value.ValueMessage.rst", "api_generated/village.pybpodapi.com.messaging.warning.rst", "api_generated/village.pybpodapi.com.messaging.warning.WarningMessage.rst", "api_generated/village.pybpodapi.com.protocol.rst", "api_generated/village.pybpodapi.com.protocol.recv_msg_headers.rst", "api_generated/village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader.rst", "api_generated/village.pybpodapi.com.protocol.send_msg_headers.rst", "api_generated/village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.rst", "api_generated/village.pybpodapi.com.stderr_buffer.rst", "api_generated/village.pybpodapi.com.stderr_buffer.StderrBuffer.rst", "api_generated/village.pybpodapi.com.stdout_buffer.rst", "api_generated/village.pybpodapi.com.stdout_buffer.StdoutBuffer.rst", "api_generated/village.pybpodapi.exceptions.rst", "api_generated/village.pybpodapi.exceptions.bpod_error.rst", "api_generated/village.pybpodapi.exceptions.bpod_error.BpodErrorException.rst", "api_generated/village.pybpodapi.protocol.rst", "api_generated/village.pybpodapi.session.rst", "api_generated/village.pybpodapi.session.Session.rst", "api_generated/village.pybpodapi.session.StreamsWrapper.rst", "api_generated/village.pybpodapi.state_machine.rst", "api_generated/village.pybpodapi.state_machine.StateMachine.rst", "api_generated/village.pybpodapi.state_machine.conditions.rst", "api_generated/village.pybpodapi.state_machine.conditions.Conditions.rst", "api_generated/village.pybpodapi.state_machine.global_counters.rst", "api_generated/village.pybpodapi.state_machine.global_counters.GlobalCounters.rst", "api_generated/village.pybpodapi.state_machine.global_timers.rst", "api_generated/village.pybpodapi.state_machine.global_timers.GlobalTimers.rst", "api_generated/village.pybpodapi.state_machine.state_machine_base.rst", "api_generated/village.pybpodapi.state_machine.state_machine_base.SMAError.rst", "api_generated/village.pybpodapi.state_machine.state_machine_base.StateMachineBase.rst", "api_generated/village.pybpodapi.state_machine.state_machine_builder.rst", "api_generated/village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder.rst", "api_generated/village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilderError.rst", "api_generated/village.pybpodapi.state_machine.state_machine_runner.rst", "api_generated/village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner.rst", "api_generated/village.pybpodapi.state_machine.state_machine_runner.StateMachineRunnerError.rst", "api_generated/village.pybpodapi.utils.rst", "api_generated/village.pybpodapi.utils.csv.rst", "api_generated/village.pybpodapi.utils.csv.Reader.rst", "api_generated/village.pybpodapi.utils.csv.Writer.rst", "api_generated/village.pybpodapi.utils.date_parser.rst", "api_generated/village.pybpodapi.utils.date_parser.parse.rst", "api_generated/village.screen.rst", "api_generated/village.screen.video_worker.rst", "api_generated/village.screen.video_worker.VideoWorker.rst", "api_index.rst", "faq/faq.md", "faq_index.rst", "how_to_build/assembly_instructions.md", "how_to_build/list_of_parts.md", "how_to_build/software_installation.md", "how_to_build_index.rst", "index.rst", "initial_configuration/backup.md", "initial_configuration/hardware.md", "initial_configuration/heartbeat.md", "initial_configuration/remote.md", "initial_configuration/telegram.md", "initial_configuration_index.rst", "main/what_is.md", "resources/ISO.md", "resources/code.md", "resources/print_files.md", "resources_index.rst", "troubleshooting/troubleshooting.md", "troubleshooting_index.rst", "user_guide/GUI.md", "user_guide/alarms.md", "user_guide/animal_procedures.md", "user_guide/corridor.md", "user_guide/create.md", "user_guide/data.md", "user_guide/detection.md", "user_guide/maintenance.md", "user_guide/plots.md", "user_guide/settings.md", "user_guide/started.md", "user_guide/state_machine.md", "user_guide/subjects.md", "user_guide/test.md", "user_guide/use.md", "user_guide_index.rst"], "indexentries": {"__init__() (actions method)": [[2, "village.classes.enums.Actions.__init__", false]], "__init__() (active method)": [[3, "village.classes.enums.Active.__init__", false]], "__init__() (arcom method)": [[64, "village.pybpodapi.com.arcom.ArCOM.__init__", false]], "__init__() (arduinotypes method)": [[65, "village.pybpodapi.com.arcom.ArduinoTypes.__init__", false]], "__init__() (areaactive method)": [[4, "village.classes.enums.AreaActive.__init__", false]], "__init__() (baseeventname method)": [[39, "village.pybpodapi.bpod.hardware.events.base_eventname.BaseEventName.__init__", false]], "__init__() (basemessage method)": [[69, "village.pybpodapi.com.messaging.base_message.BaseMessage.__init__", false]], "__init__() (bpod method)": [[22, "village.pybpodapi.bpod.Bpod.__init__", false]], "__init__() (bpodbase method)": [[24, "village.pybpodapi.bpod.bpod_base.BpodBase.__init__", false]], "__init__() (bpodcomprotocol method)": [[26, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.__init__", false]], "__init__() (bpodcomprotocolmodules method)": [[28, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.__init__", false]], "__init__() (bpodio method)": [[30, "village.pybpodapi.bpod.bpod_io.BpodIO.__init__", false]], "__init__() (bpodmodule method)": [[59, "village.pybpodapi.bpod_modules.bpod_module.BpodModule.__init__", false]], "__init__() (bpodmodules method)": [[61, "village.pybpodapi.bpod_modules.bpod_modules.BpodModules.__init__", false]], "__init__() (channelname method)": [[33, "village.pybpodapi.bpod.hardware.channels.ChannelName.__init__", false]], "__init__() (channels method)": [[35, "village.pybpodapi.bpod.hardware.channels.Channels.__init__", false]], "__init__() (channeltype method)": [[34, "village.pybpodapi.bpod.hardware.channels.ChannelType.__init__", false]], "__init__() (color method)": [[5, "village.classes.enums.Color.__init__", false]], "__init__() (conditions method)": [[121, "village.pybpodapi.state_machine.conditions.Conditions.__init__", false]], "__init__() (controller method)": [[6, "village.classes.enums.Controller.__init__", false]], "__init__() (cycle method)": [[7, "village.classes.enums.Cycle.__init__", false]], "__init__() (datatable method)": [[8, "village.classes.enums.DataTable.__init__", false]], "__init__() (datatype method)": [[66, "village.pybpodapi.com.arcom.DataType.__init__", false]], "__init__() (debugmessage method)": [[71, "village.pybpodapi.com.messaging.debug.DebugMessage.__init__", false]], "__init__() (endtrial method)": [[73, "village.pybpodapi.com.messaging.end_trial.EndTrial.__init__", false]], "__init__() (errormessage method)": [[75, "village.pybpodapi.com.messaging.error.ErrorMessage.__init__", false]], "__init__() (eventname method)": [[41, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.__init__", false]], "__init__() (eventoccurrence method)": [[77, "village.pybpodapi.com.messaging.event_occurrence.EventOccurrence.__init__", false]], "__init__() (eventresume method)": [[79, "village.pybpodapi.com.messaging.event_resume.EventResume.__init__", false]], "__init__() (eventspositions method)": [[36, "village.pybpodapi.bpod.hardware.channels.EventsPositions.__init__", false]], "__init__() (globalcounters method)": [[123, "village.pybpodapi.state_machine.global_counters.GlobalCounters.__init__", false]], "__init__() (globaltimers method)": [[125, "village.pybpodapi.state_machine.global_timers.GlobalTimers.__init__", false]], "__init__() (hardware method)": [[43, "village.pybpodapi.bpod.hardware.hardware.Hardware.__init__", false]], "__init__() (info method)": [[9, "village.classes.enums.Info.__init__", false]], "__init__() (inputname method)": [[46, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.__init__", false]], "__init__() (messageparser method)": [[81, "village.pybpodapi.com.messaging.parser.MessageParser.__init__", false]], "__init__() (nonblockingsocketreceive method)": [[51, "village.pybpodapi.bpod.non_blockingsocketreceive.NonBlockingSocketReceive.__init__", false]], "__init__() (nonblockingstreamreader method)": [[54, "village.pybpodapi.bpod.non_blockingstreamreader.NonBlockingStreamReader.__init__", false]], "__init__() (outputchannel method)": [[49, "village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.OutputChannel.__init__", false]], "__init__() (reader method)": [[137, "village.pybpodapi.utils.csv.Reader.__init__", false]], "__init__() (receivemessageheader method)": [[104, "village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader.__init__", false]], "__init__() (save method)": [[10, "village.classes.enums.Save.__init__", false]], "__init__() (screenactive method)": [[11, "village.classes.enums.ScreenActive.__init__", false]], "__init__() (sendmessageheader method)": [[106, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.__init__", false]], "__init__() (session method)": [[116, "village.pybpodapi.session.Session.__init__", false]], "__init__() (sessioninfo method)": [[83, "village.pybpodapi.com.messaging.session_info.SessionInfo.__init__", false]], "__init__() (setting method)": [[16, "village.classes.settings_class.Setting.__init__", false]], "__init__() (settings method)": [[17, "village.classes.settings_class.Settings.__init__", false]], "__init__() (softcodeoccurrence method)": [[85, "village.pybpodapi.com.messaging.softcode_occurrence.SoftcodeOccurrence.__init__", false]], "__init__() (state method)": [[12, "village.classes.enums.State.__init__", false]], "__init__() (statemachine method)": [[119, "village.pybpodapi.state_machine.StateMachine.__init__", false]], "__init__() (statemachinebase method)": [[128, "village.pybpodapi.state_machine.state_machine_base.StateMachineBase.__init__", false]], "__init__() (statemachinebuilder method)": [[130, "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder.__init__", false]], "__init__() (statemachinerunner method)": [[133, "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner.__init__", false]], "__init__() (stateoccurrence method)": [[87, "village.pybpodapi.com.messaging.state_occurrence.StateOccurrence.__init__", false]], "__init__() (statetransition method)": [[89, "village.pybpodapi.com.messaging.state_transition.StateTransition.__init__", false]], "__init__() (stderrbuffer method)": [[108, "village.pybpodapi.com.stderr_buffer.StderrBuffer.__init__", false]], "__init__() (stderrmessage method)": [[91, "village.pybpodapi.com.messaging.stderr.StderrMessage.__init__", false]], "__init__() (stdoutbuffer method)": [[110, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.__init__", false]], "__init__() (stdoutmessage method)": [[93, "village.pybpodapi.com.messaging.stdout.StdoutMessage.__init__", false]], "__init__() (streamswrapper method)": [[117, "village.pybpodapi.session.StreamsWrapper.__init__", false]], "__init__() (superenum method)": [[13, "village.classes.enums.SuperEnum.__init__", false]], "__init__() (synctype method)": [[14, "village.classes.enums.SyncType.__init__", false]], "__init__() (trial method)": [[95, "village.pybpodapi.com.messaging.trial.Trial.__init__", false]], "__init__() (untaggedmessage method)": [[97, "village.pybpodapi.com.messaging.untagged_message.UntaggedMessage.__init__", false]], "__init__() (valuemessage method)": [[99, "village.pybpodapi.com.messaging.value.ValueMessage.__init__", false]], "__init__() (videoworker method)": [[143, "village.screen.video_worker.VideoWorker.__init__", false]], "__init__() (warningmessage method)": [[101, "village.pybpodapi.com.messaging.warning.WarningMessage.__init__", false]], "__init__() (writer method)": [[138, "village.pybpodapi.utils.csv.Writer.__init__", false]], "actions (class in village.classes.enums)": [[2, "village.classes.enums.Actions", false]], "active (class in village.classes.enums)": [[3, "village.classes.enums.Active", false]], "add_state() (statemachine method)": [[119, "village.pybpodapi.state_machine.StateMachine.add_state", false]], "add_state() (statemachinebase method)": [[128, "village.pybpodapi.state_machine.state_machine_base.StateMachineBase.add_state", false]], "add_state() (statemachinebuilder method)": [[130, "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder.add_state", false]], "add_state() (statemachinerunner method)": [[133, "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner.add_state", false]], "arcom (class in village.pybpodapi.com.arcom)": [[64, "village.pybpodapi.com.arcom.ArCOM", false]], "arduinotypes (class in village.pybpodapi.com.arcom)": [[65, "village.pybpodapi.com.arcom.ArduinoTypes", false]], "areaactive (class in village.classes.enums)": [[4, "village.classes.enums.AreaActive", false]], "baseeventname (class in village.pybpodapi.bpod.hardware.events.base_eventname)": [[39, "village.pybpodapi.bpod.hardware.events.base_eventname.BaseEventName", false]], "basemessage (class in village.pybpodapi.com.messaging.base_message)": [[69, "village.pybpodapi.com.messaging.base_message.BaseMessage", false]], "bnc (bpod.channelnames attribute)": [[22, "village.pybpodapi.bpod.Bpod.ChannelNames.BNC", false]], "bnc (bpodbase.channelnames attribute)": [[24, "village.pybpodapi.bpod.bpod_base.BpodBase.ChannelNames.BNC", false]], "bnc (bpodcomprotocol.channelnames attribute)": [[26, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.ChannelNames.BNC", false]], "bnc (bpodcomprotocolmodules.channelnames attribute)": [[28, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.ChannelNames.BNC", false]], "bnc (bpodio.channelnames attribute)": [[30, "village.pybpodapi.bpod.bpod_io.BpodIO.ChannelNames.BNC", false]], "bnc (channelname attribute)": [[33, "village.pybpodapi.bpod.hardware.channels.ChannelName.BNC", false]], "bnc1 (inputname attribute)": [[46, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.BNC1", false]], "bnc1high (bpod.events attribute)": [[22, "village.pybpodapi.bpod.Bpod.Events.BNC1High", false]], "bnc1high (bpod.outputchannels attribute)": [[22, "village.pybpodapi.bpod.Bpod.OutputChannels.BNC1High", false]], "bnc1high (bpodbase.events attribute)": [[24, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.BNC1High", false]], "bnc1high (bpodbase.outputchannels attribute)": [[24, "village.pybpodapi.bpod.bpod_base.BpodBase.OutputChannels.BNC1High", false]], "bnc1high (bpodcomprotocol.events attribute)": [[26, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.BNC1High", false]], "bnc1high (bpodcomprotocol.outputchannels attribute)": [[26, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.OutputChannels.BNC1High", false]], "bnc1high (bpodcomprotocolmodules.events attribute)": [[28, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.BNC1High", false]], "bnc1high (bpodcomprotocolmodules.outputchannels attribute)": [[28, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.OutputChannels.BNC1High", false]], "bnc1high (bpodio.events attribute)": [[30, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.BNC1High", false]], "bnc1high (bpodio.outputchannels attribute)": [[30, "village.pybpodapi.bpod.bpod_io.BpodIO.OutputChannels.BNC1High", false]], "bnc1high (eventname attribute)": [[41, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.BNC1High", false]], "bnc1high (outputchannel attribute)": [[49, "village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.OutputChannel.BNC1High", false]], "bnc2 (inputname attribute)": [[46, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.BNC2", false]], "bpod (class in village.pybpodapi.bpod)": [[22, "village.pybpodapi.bpod.Bpod", false]], "bpod.channelnames (class in village.pybpodapi.bpod)": [[22, "village.pybpodapi.bpod.Bpod.ChannelNames", false]], "bpod.channeltypes (class in village.pybpodapi.bpod)": [[22, "village.pybpodapi.bpod.Bpod.ChannelTypes", false]], "bpod.events (class in village.pybpodapi.bpod)": [[22, "village.pybpodapi.bpod.Bpod.Events", false]], "bpod.outputchannels (class in village.pybpodapi.bpod)": [[22, "village.pybpodapi.bpod.Bpod.OutputChannels", false]], "bpodbase (class in village.pybpodapi.bpod.bpod_base)": [[24, "village.pybpodapi.bpod.bpod_base.BpodBase", false]], "bpodbase.channelnames (class in village.pybpodapi.bpod.bpod_base)": [[24, "village.pybpodapi.bpod.bpod_base.BpodBase.ChannelNames", false]], "bpodbase.channeltypes (class in village.pybpodapi.bpod.bpod_base)": [[24, "village.pybpodapi.bpod.bpod_base.BpodBase.ChannelTypes", false]], "bpodbase.events (class in village.pybpodapi.bpod.bpod_base)": [[24, "village.pybpodapi.bpod.bpod_base.BpodBase.Events", false]], "bpodbase.outputchannels (class in village.pybpodapi.bpod.bpod_base)": [[24, "village.pybpodapi.bpod.bpod_base.BpodBase.OutputChannels", false]], "bpodcomprotocol (class in village.pybpodapi.bpod.bpod_com_protocol)": [[26, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol", false]], "bpodcomprotocol.channelnames (class in village.pybpodapi.bpod.bpod_com_protocol)": [[26, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.ChannelNames", false]], "bpodcomprotocol.channeltypes (class in village.pybpodapi.bpod.bpod_com_protocol)": [[26, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.ChannelTypes", false]], "bpodcomprotocol.events (class in village.pybpodapi.bpod.bpod_com_protocol)": [[26, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events", false]], "bpodcomprotocol.outputchannels (class in village.pybpodapi.bpod.bpod_com_protocol)": [[26, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.OutputChannels", false]], "bpodcomprotocolmodules (class in village.pybpodapi.bpod.bpod_com_protocol_modules)": [[28, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules", false]], "bpodcomprotocolmodules.channelnames (class in village.pybpodapi.bpod.bpod_com_protocol_modules)": [[28, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.ChannelNames", false]], "bpodcomprotocolmodules.channeltypes (class in village.pybpodapi.bpod.bpod_com_protocol_modules)": [[28, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.ChannelTypes", false]], "bpodcomprotocolmodules.events (class in village.pybpodapi.bpod.bpod_com_protocol_modules)": [[28, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events", false]], "bpodcomprotocolmodules.outputchannels (class in village.pybpodapi.bpod.bpod_com_protocol_modules)": [[28, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.OutputChannels", false]], "bpoderrorexception": [[113, "village.pybpodapi.exceptions.bpod_error.BpodErrorException", false]], "bpodio (class in village.pybpodapi.bpod.bpod_io)": [[30, "village.pybpodapi.bpod.bpod_io.BpodIO", false]], "bpodio.channelnames (class in village.pybpodapi.bpod.bpod_io)": [[30, "village.pybpodapi.bpod.bpod_io.BpodIO.ChannelNames", false]], "bpodio.channeltypes (class in village.pybpodapi.bpod.bpod_io)": [[30, "village.pybpodapi.bpod.bpod_io.BpodIO.ChannelTypes", false]], "bpodio.events (class in village.pybpodapi.bpod.bpod_io)": [[30, "village.pybpodapi.bpod.bpod_io.BpodIO.Events", false]], "bpodio.outputchannels (class in village.pybpodapi.bpod.bpod_io)": [[30, "village.pybpodapi.bpod.bpod_io.BpodIO.OutputChannels", false]], "bpodmodule (class in village.pybpodapi.bpod_modules.bpod_module)": [[59, "village.pybpodapi.bpod_modules.bpod_module.BpodModule", false]], "bpodmodules (class in village.pybpodapi.bpod_modules.bpod_modules)": [[61, "village.pybpodapi.bpod_modules.bpod_modules.BpodModules", false]], "build_message() (statemachine method)": [[119, "village.pybpodapi.state_machine.StateMachine.build_message", false]], "build_message() (statemachinebuilder method)": [[130, "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder.build_message", false]], "build_message() (statemachinerunner method)": [[133, "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner.build_message", false]], "build_message_32_bits() (statemachine method)": [[119, "village.pybpodapi.state_machine.StateMachine.build_message_32_bits", false]], "build_message_32_bits() (statemachinebuilder method)": [[130, "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder.build_message_32_bits", false]], "build_message_32_bits() (statemachinerunner method)": [[133, "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner.build_message_32_bits", false]], "bytes_available() (arcom method)": [[64, "village.pybpodapi.com.arcom.ArCOM.bytes_available", false]], "channelname (class in village.pybpodapi.bpod.hardware.channels)": [[33, "village.pybpodapi.bpod.hardware.channels.ChannelName", false]], "channels (class in village.pybpodapi.bpod.hardware.channels)": [[35, "village.pybpodapi.bpod.hardware.channels.Channels", false]], "channeltype (class in village.pybpodapi.bpod.hardware.channels)": [[34, "village.pybpodapi.bpod.hardware.channels.ChannelType", false]], "check_type() (basemessage class method)": [[69, "village.pybpodapi.com.messaging.base_message.BaseMessage.check_type", false]], "check_type() (debugmessage class method)": [[71, "village.pybpodapi.com.messaging.debug.DebugMessage.check_type", false]], "check_type() (endtrial class method)": [[73, "village.pybpodapi.com.messaging.end_trial.EndTrial.check_type", false]], "check_type() (errormessage class method)": [[75, "village.pybpodapi.com.messaging.error.ErrorMessage.check_type", false]], "check_type() (eventoccurrence class method)": [[77, "village.pybpodapi.com.messaging.event_occurrence.EventOccurrence.check_type", false]], "check_type() (eventresume class method)": [[79, "village.pybpodapi.com.messaging.event_resume.EventResume.check_type", false]], "check_type() (sessioninfo class method)": [[83, "village.pybpodapi.com.messaging.session_info.SessionInfo.check_type", false]], "check_type() (softcodeoccurrence class method)": [[85, "village.pybpodapi.com.messaging.softcode_occurrence.SoftcodeOccurrence.check_type", false]], "check_type() (stateoccurrence class method)": [[87, "village.pybpodapi.com.messaging.state_occurrence.StateOccurrence.check_type", false]], "check_type() (statetransition class method)": [[89, "village.pybpodapi.com.messaging.state_transition.StateTransition.check_type", false]], "check_type() (stderrmessage class method)": [[91, "village.pybpodapi.com.messaging.stderr.StderrMessage.check_type", false]], "check_type() (stdoutmessage class method)": [[93, "village.pybpodapi.com.messaging.stdout.StdoutMessage.check_type", false]], "check_type() (trial class method)": [[95, "village.pybpodapi.com.messaging.trial.Trial.check_type", false]], "check_type() (untaggedmessage class method)": [[97, "village.pybpodapi.com.messaging.untagged_message.UntaggedMessage.check_type", false]], "check_type() (valuemessage class method)": [[99, "village.pybpodapi.com.messaging.value.ValueMessage.check_type", false]], "check_type() (warningmessage class method)": [[101, "village.pybpodapi.com.messaging.warning.WarningMessage.check_type", false]], "close() (arcom method)": [[64, "village.pybpodapi.com.arcom.ArCOM.close", false]], "close() (bpod method)": [[22, "village.pybpodapi.bpod.Bpod.close", false]], "close() (bpodbase method)": [[24, "village.pybpodapi.bpod.bpod_base.BpodBase.close", false]], "close() (bpodcomprotocol method)": [[26, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.close", false]], "close() (bpodcomprotocolmodules method)": [[28, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.close", false]], "close() (bpodio method)": [[30, "village.pybpodapi.bpod.bpod_io.BpodIO.close", false]], "close() (stderrbuffer method)": [[108, "village.pybpodapi.com.stderr_buffer.StderrBuffer.close", false]], "close() (stdoutbuffer method)": [[110, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.close", false]], "color (class in village.classes.enums)": [[5, "village.classes.enums.Color", false]], "condition1 (bpod.events attribute)": [[22, "village.pybpodapi.bpod.Bpod.Events.Condition1", false]], "condition1 (bpodbase.events attribute)": [[24, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.Condition1", false]], "condition1 (bpodcomprotocol.events attribute)": [[26, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.Condition1", false]], "condition1 (bpodcomprotocolmodules.events attribute)": [[28, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.Condition1", false]], "condition1 (bpodio.events attribute)": [[30, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.Condition1", false]], "condition1 (eventname attribute)": [[41, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.Condition1", false]], "conditions (class in village.pybpodapi.state_machine.conditions)": [[121, "village.pybpodapi.state_machine.conditions.Conditions", false]], "controller (class in village.classes.enums)": [[6, "village.classes.enums.Controller", false]], "current_trial (session property)": [[116, "village.pybpodapi.session.Session.current_trial", false]], "cycle (class in village.classes.enums)": [[7, "village.classes.enums.Cycle", false]], "data_available() (bpod method)": [[22, "village.pybpodapi.bpod.Bpod.data_available", false]], "data_available() (bpodcomprotocol method)": [[26, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.data_available", false]], "data_available() (bpodcomprotocolmodules method)": [[28, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.data_available", false]], "data_available() (bpodio method)": [[30, "village.pybpodapi.bpod.bpod_io.BpodIO.data_available", false]], "datatable (class in village.classes.enums)": [[8, "village.classes.enums.DataTable", false]], "datatype (class in village.pybpodapi.com.arcom)": [[66, "village.pybpodapi.com.arcom.DataType", false]], "debugmessage (class in village.pybpodapi.com.messaging.debug)": [[71, "village.pybpodapi.com.messaging.debug.DebugMessage", false]], "detach() (stderrbuffer method)": [[108, "village.pybpodapi.com.stderr_buffer.StderrBuffer.detach", false]], "detach() (stdoutbuffer method)": [[110, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.detach", false]], "disconnect (sendmessageheader attribute)": [[106, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.DISCONNECT", false]], "echo_softcode (sendmessageheader attribute)": [[106, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.ECHO_SOFTCODE", false]], "enable_ports (sendmessageheader attribute)": [[106, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.ENABLE_PORTS", false]], "enable_ports_ok (receivemessageheader attribute)": [[104, "village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader.ENABLE_PORTS_OK", false]], "encoding (stderrbuffer attribute)": [[108, "village.pybpodapi.com.stderr_buffer.StderrBuffer.encoding", false]], "encoding (stdoutbuffer attribute)": [[110, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.encoding", false]], "endtrial (class in village.pybpodapi.com.messaging.end_trial)": [[73, "village.pybpodapi.com.messaging.end_trial.EndTrial", false]], "errormessage (class in village.pybpodapi.com.messaging.error)": [[75, "village.pybpodapi.com.messaging.error.ErrorMessage", false]], "errors (stderrbuffer attribute)": [[108, "village.pybpodapi.com.stderr_buffer.StderrBuffer.errors", false]], "errors (stdoutbuffer attribute)": [[110, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.errors", false]], "eventname (class in village.pybpodapi.bpod.hardware.events.bpod_events)": [[41, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName", false]], "eventoccurrence (class in village.pybpodapi.com.messaging.event_occurrence)": [[77, "village.pybpodapi.com.messaging.event_occurrence.EventOccurrence", false]], "eventresume (class in village.pybpodapi.com.messaging.event_resume)": [[79, "village.pybpodapi.com.messaging.event_resume.EventResume", false]], "eventspositions (class in village.pybpodapi.bpod.hardware.channels)": [[36, "village.pybpodapi.bpod.hardware.channels.EventsPositions", false]], "exit_and_return (sendmessageheader attribute)": [[106, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.EXIT_AND_RETURN", false]], "fileno() (stderrbuffer method)": [[108, "village.pybpodapi.com.stderr_buffer.StderrBuffer.fileno", false]], "fileno() (stdoutbuffer method)": [[110, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.fileno", false]], "find_module_by_name() (bpod method)": [[22, "village.pybpodapi.bpod.Bpod.find_module_by_name", false]], "find_module_by_name() (bpodbase method)": [[24, "village.pybpodapi.bpod.bpod_base.BpodBase.find_module_by_name", false]], "find_module_by_name() (bpodcomprotocol method)": [[26, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.find_module_by_name", false]], "find_module_by_name() (bpodcomprotocolmodules method)": [[28, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.find_module_by_name", false]], "find_module_by_name() (bpodio method)": [[30, "village.pybpodapi.bpod.bpod_io.BpodIO.find_module_by_name", false]], "firmware_version (sendmessageheader attribute)": [[106, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.FIRMWARE_VERSION", false]], "flush() (stderrbuffer method)": [[108, "village.pybpodapi.com.stderr_buffer.StderrBuffer.flush", false]], "flush() (stdoutbuffer method)": [[110, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.flush", false]], "fromlist() (basemessage class method)": [[69, "village.pybpodapi.com.messaging.base_message.BaseMessage.fromlist", false]], "fromlist() (debugmessage class method)": [[71, "village.pybpodapi.com.messaging.debug.DebugMessage.fromlist", false]], "fromlist() (endtrial class method)": [[73, "village.pybpodapi.com.messaging.end_trial.EndTrial.fromlist", false]], "fromlist() (errormessage class method)": [[75, "village.pybpodapi.com.messaging.error.ErrorMessage.fromlist", false]], "fromlist() (eventoccurrence class method)": [[77, "village.pybpodapi.com.messaging.event_occurrence.EventOccurrence.fromlist", false]], "fromlist() (eventresume class method)": [[79, "village.pybpodapi.com.messaging.event_resume.EventResume.fromlist", false]], "fromlist() (messageparser method)": [[81, "village.pybpodapi.com.messaging.parser.MessageParser.fromlist", false]], "fromlist() (sessioninfo class method)": [[83, "village.pybpodapi.com.messaging.session_info.SessionInfo.fromlist", false]], "fromlist() (softcodeoccurrence class method)": [[85, "village.pybpodapi.com.messaging.softcode_occurrence.SoftcodeOccurrence.fromlist", false]], "fromlist() (stateoccurrence class method)": [[87, "village.pybpodapi.com.messaging.state_occurrence.StateOccurrence.fromlist", false]], "fromlist() (statetransition class method)": [[89, "village.pybpodapi.com.messaging.state_transition.StateTransition.fromlist", false]], "fromlist() (stderrmessage class method)": [[91, "village.pybpodapi.com.messaging.stderr.StderrMessage.fromlist", false]], "fromlist() (stdoutmessage class method)": [[93, "village.pybpodapi.com.messaging.stdout.StdoutMessage.fromlist", false]], "fromlist() (trial class method)": [[95, "village.pybpodapi.com.messaging.trial.Trial.fromlist", false]], "fromlist() (untaggedmessage class method)": [[97, "village.pybpodapi.com.messaging.untagged_message.UntaggedMessage.fromlist", false]], "fromlist() (valuemessage class method)": [[99, "village.pybpodapi.com.messaging.value.ValueMessage.fromlist", false]], "fromlist() (warningmessage class method)": [[101, "village.pybpodapi.com.messaging.warning.WarningMessage.fromlist", false]], "get() (settings method)": [[17, "village.classes.settings_class.Settings.get", false]], "get_all_timestamps_by_event() (trial method)": [[95, "village.pybpodapi.com.messaging.trial.Trial.get_all_timestamps_by_event", false]], "get_description() (settings method)": [[17, "village.classes.settings_class.Settings.get_description", false]], "get_event_name() (channels method)": [[35, "village.pybpodapi.bpod.hardware.channels.Channels.get_event_name", false]], "get_events_names() (trial method)": [[95, "village.pybpodapi.com.messaging.trial.Trial.get_events_names", false]], "get_index() (settings method)": [[17, "village.classes.settings_class.Settings.get_index", false]], "get_indices() (settings method)": [[17, "village.classes.settings_class.Settings.get_indices", false]], "get_modules (sendmessageheader attribute)": [[106, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.GET_MODULES", false]], "get_text() (settings method)": [[17, "village.classes.settings_class.Settings.get_text", false]], "get_timestamp_transmission (sendmessageheader attribute)": [[106, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.GET_TIMESTAMP_TRANSMISSION", false]], "get_timestamps_by_event_name() (trial method)": [[95, "village.pybpodapi.com.messaging.trial.Trial.get_timestamps_by_event_name", false]], "get_type() (settings method)": [[17, "village.classes.settings_class.Settings.get_type", false]], "get_values() (settings method)": [[17, "village.classes.settings_class.Settings.get_values", false]], "getvalue() (stderrbuffer method)": [[108, "village.pybpodapi.com.stderr_buffer.StderrBuffer.getvalue", false]], "getvalue() (stdoutbuffer method)": [[110, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.getvalue", false]], "globalcounter1end (bpod.events attribute)": [[22, "village.pybpodapi.bpod.Bpod.Events.GlobalCounter1End", false]], "globalcounter1end (bpodbase.events attribute)": [[24, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.GlobalCounter1End", false]], "globalcounter1end (bpodcomprotocol.events attribute)": [[26, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.GlobalCounter1End", false]], "globalcounter1end (bpodcomprotocolmodules.events attribute)": [[28, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.GlobalCounter1End", false]], "globalcounter1end (bpodio.events attribute)": [[30, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.GlobalCounter1End", false]], "globalcounter1end (eventname attribute)": [[41, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.GlobalCounter1End", false]], "globalcounter1reset (bpod.outputchannels attribute)": [[22, "village.pybpodapi.bpod.Bpod.OutputChannels.GlobalCounter1Reset", false]], "globalcounter1reset (bpodbase.outputchannels attribute)": [[24, "village.pybpodapi.bpod.bpod_base.BpodBase.OutputChannels.GlobalCounter1Reset", false]], "globalcounter1reset (bpodcomprotocol.outputchannels attribute)": [[26, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.OutputChannels.GlobalCounter1Reset", false]], "globalcounter1reset (bpodcomprotocolmodules.outputchannels attribute)": [[28, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.OutputChannels.GlobalCounter1Reset", false]], "globalcounter1reset (bpodio.outputchannels attribute)": [[30, "village.pybpodapi.bpod.bpod_io.BpodIO.OutputChannels.GlobalCounter1Reset", false]], "globalcounter1reset (outputchannel attribute)": [[49, "village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.OutputChannel.GlobalCounter1Reset", false]], "globalcounters (class in village.pybpodapi.state_machine.global_counters)": [[123, "village.pybpodapi.state_machine.global_counters.GlobalCounters", false]], "globaltimer1cancel (bpod.outputchannels attribute)": [[22, "village.pybpodapi.bpod.Bpod.OutputChannels.GlobalTimer1Cancel", false]], "globaltimer1cancel (bpodbase.outputchannels attribute)": [[24, "village.pybpodapi.bpod.bpod_base.BpodBase.OutputChannels.GlobalTimer1Cancel", false]], "globaltimer1cancel (bpodcomprotocol.outputchannels attribute)": [[26, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.OutputChannels.GlobalTimer1Cancel", false]], "globaltimer1cancel (bpodcomprotocolmodules.outputchannels attribute)": [[28, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.OutputChannels.GlobalTimer1Cancel", false]], "globaltimer1cancel (bpodio.outputchannels attribute)": [[30, "village.pybpodapi.bpod.bpod_io.BpodIO.OutputChannels.GlobalTimer1Cancel", false]], "globaltimer1cancel (outputchannel attribute)": [[49, "village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.OutputChannel.GlobalTimer1Cancel", false]], "globaltimer1end (bpod.events attribute)": [[22, "village.pybpodapi.bpod.Bpod.Events.GlobalTimer1End", false]], "globaltimer1end (bpodbase.events attribute)": [[24, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.GlobalTimer1End", false]], "globaltimer1end (bpodcomprotocol.events attribute)": [[26, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.GlobalTimer1End", false]], "globaltimer1end (bpodcomprotocolmodules.events attribute)": [[28, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.GlobalTimer1End", false]], "globaltimer1end (bpodio.events attribute)": [[30, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.GlobalTimer1End", false]], "globaltimer1end (eventname attribute)": [[41, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.GlobalTimer1End", false]], "globaltimer1start (bpod.events attribute)": [[22, "village.pybpodapi.bpod.Bpod.Events.GlobalTimer1Start", false]], "globaltimer1start (bpodbase.events attribute)": [[24, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.GlobalTimer1Start", false]], "globaltimer1start (bpodcomprotocol.events attribute)": [[26, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.GlobalTimer1Start", false]], "globaltimer1start (bpodcomprotocolmodules.events attribute)": [[28, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.GlobalTimer1Start", false]], "globaltimer1start (bpodio.events attribute)": [[30, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.GlobalTimer1Start", false]], "globaltimer1start (eventname attribute)": [[41, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.GlobalTimer1Start", false]], "globaltimer1trig (bpod.outputchannels attribute)": [[22, "village.pybpodapi.bpod.Bpod.OutputChannels.GlobalTimer1Trig", false]], "globaltimer1trig (bpodbase.outputchannels attribute)": [[24, "village.pybpodapi.bpod.bpod_base.BpodBase.OutputChannels.GlobalTimer1Trig", false]], "globaltimer1trig (bpodcomprotocol.outputchannels attribute)": [[26, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.OutputChannels.GlobalTimer1Trig", false]], "globaltimer1trig (bpodcomprotocolmodules.outputchannels attribute)": [[28, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.OutputChannels.GlobalTimer1Trig", false]], "globaltimer1trig (bpodio.outputchannels attribute)": [[30, "village.pybpodapi.bpod.bpod_io.BpodIO.OutputChannels.GlobalTimer1Trig", false]], "globaltimer1trig (outputchannel attribute)": [[49, "village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.OutputChannel.GlobalTimer1Trig", false]], "globaltimers (class in village.pybpodapi.state_machine.global_timers)": [[125, "village.pybpodapi.state_machine.global_timers.GlobalTimers", false]], "handshake (sendmessageheader attribute)": [[106, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.HANDSHAKE", false]], "handshake_ok (receivemessageheader attribute)": [[104, "village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader.HANDSHAKE_OK", false]], "hardware (class in village.pybpodapi.bpod.hardware.hardware)": [[43, "village.pybpodapi.bpod.hardware.hardware.Hardware", false]], "hardware_description (sendmessageheader attribute)": [[106, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.HARDWARE_DESCRIPTION", false]], "info (class in village.classes.enums)": [[9, "village.classes.enums.Info", false]], "input (bpod.channeltypes attribute)": [[22, "village.pybpodapi.bpod.Bpod.ChannelTypes.INPUT", false]], "input (bpodbase.channeltypes attribute)": [[24, "village.pybpodapi.bpod.bpod_base.BpodBase.ChannelTypes.INPUT", false]], "input (bpodcomprotocol.channeltypes attribute)": [[26, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.ChannelTypes.INPUT", false]], "input (bpodcomprotocolmodules.channeltypes attribute)": [[28, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.ChannelTypes.INPUT", false]], "input (bpodio.channeltypes attribute)": [[30, "village.pybpodapi.bpod.bpod_io.BpodIO.ChannelTypes.INPUT", false]], "input (channeltype attribute)": [[34, "village.pybpodapi.bpod.hardware.channels.ChannelType.INPUT", false]], "inputname (class in village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels)": [[46, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName", false]], "is_condition() (baseeventname static method)": [[39, "village.pybpodapi.bpod.hardware.events.base_eventname.BaseEventName.is_condition", false]], "is_condition() (bpod.events static method)": [[22, "village.pybpodapi.bpod.Bpod.Events.is_condition", false]], "is_condition() (bpodbase.events static method)": [[24, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.is_condition", false]], "is_condition() (bpodcomprotocol.events static method)": [[26, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.is_condition", false]], "is_condition() (bpodcomprotocolmodules.events static method)": [[28, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.is_condition", false]], "is_condition() (bpodio.events static method)": [[30, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.is_condition", false]], "is_condition() (eventname static method)": [[41, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.is_condition", false]], "is_global_counter_end() (baseeventname static method)": [[39, "village.pybpodapi.bpod.hardware.events.base_eventname.BaseEventName.is_global_counter_end", false]], "is_global_counter_end() (bpod.events static method)": [[22, "village.pybpodapi.bpod.Bpod.Events.is_global_counter_end", false]], "is_global_counter_end() (bpodbase.events static method)": [[24, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.is_global_counter_end", false]], "is_global_counter_end() (bpodcomprotocol.events static method)": [[26, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.is_global_counter_end", false]], "is_global_counter_end() (bpodcomprotocolmodules.events static method)": [[28, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.is_global_counter_end", false]], "is_global_counter_end() (bpodio.events static method)": [[30, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.is_global_counter_end", false]], "is_global_counter_end() (eventname static method)": [[41, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.is_global_counter_end", false]], "is_global_timer_cancel() (baseeventname static method)": [[39, "village.pybpodapi.bpod.hardware.events.base_eventname.BaseEventName.is_global_timer_cancel", false]], "is_global_timer_cancel() (bpod.events static method)": [[22, "village.pybpodapi.bpod.Bpod.Events.is_global_timer_cancel", false]], "is_global_timer_cancel() (bpodbase.events static method)": [[24, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.is_global_timer_cancel", false]], "is_global_timer_cancel() (bpodcomprotocol.events static method)": [[26, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.is_global_timer_cancel", false]], "is_global_timer_cancel() (bpodcomprotocolmodules.events static method)": [[28, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.is_global_timer_cancel", false]], "is_global_timer_cancel() (bpodio.events static method)": [[30, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.is_global_timer_cancel", false]], "is_global_timer_cancel() (eventname static method)": [[41, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.is_global_timer_cancel", false]], "is_global_timer_end() (baseeventname static method)": [[39, "village.pybpodapi.bpod.hardware.events.base_eventname.BaseEventName.is_global_timer_end", false]], "is_global_timer_end() (bpod.events static method)": [[22, "village.pybpodapi.bpod.Bpod.Events.is_global_timer_end", false]], "is_global_timer_end() (bpodbase.events static method)": [[24, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.is_global_timer_end", false]], "is_global_timer_end() (bpodcomprotocol.events static method)": [[26, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.is_global_timer_end", false]], "is_global_timer_end() (bpodcomprotocolmodules.events static method)": [[28, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.is_global_timer_end", false]], "is_global_timer_end() (bpodio.events static method)": [[30, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.is_global_timer_end", false]], "is_global_timer_end() (eventname static method)": [[41, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.is_global_timer_end", false]], "is_global_timer_start() (baseeventname static method)": [[39, "village.pybpodapi.bpod.hardware.events.base_eventname.BaseEventName.is_global_timer_start", false]], "is_global_timer_start() (bpod.events static method)": [[22, "village.pybpodapi.bpod.Bpod.Events.is_global_timer_start", false]], "is_global_timer_start() (bpodbase.events static method)": [[24, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.is_global_timer_start", false]], "is_global_timer_start() (bpodcomprotocol.events static method)": [[26, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.is_global_timer_start", false]], "is_global_timer_start() (bpodcomprotocolmodules.events static method)": [[28, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.is_global_timer_start", false]], "is_global_timer_start() (bpodio.events static method)": [[30, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.is_global_timer_start", false]], "is_global_timer_start() (eventname static method)": [[41, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.is_global_timer_start", false]], "is_global_timer_trigger() (baseeventname static method)": [[39, "village.pybpodapi.bpod.hardware.events.base_eventname.BaseEventName.is_global_timer_trigger", false]], "is_global_timer_trigger() (bpod.events static method)": [[22, "village.pybpodapi.bpod.Bpod.Events.is_global_timer_trigger", false]], "is_global_timer_trigger() (bpodbase.events static method)": [[24, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.is_global_timer_trigger", false]], "is_global_timer_trigger() (bpodcomprotocol.events static method)": [[26, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.is_global_timer_trigger", false]], "is_global_timer_trigger() (bpodcomprotocolmodules.events static method)": [[28, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.is_global_timer_trigger", false]], "is_global_timer_trigger() (bpodio.events static method)": [[30, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.is_global_timer_trigger", false]], "is_global_timer_trigger() (eventname static method)": [[41, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.is_global_timer_trigger", false]], "is_state_timer() (baseeventname static method)": [[39, "village.pybpodapi.bpod.hardware.events.base_eventname.BaseEventName.is_state_timer", false]], "is_state_timer() (bpod.events static method)": [[22, "village.pybpodapi.bpod.Bpod.Events.is_state_timer", false]], "is_state_timer() (bpodbase.events static method)": [[24, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.is_state_timer", false]], "is_state_timer() (bpodcomprotocol.events static method)": [[26, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.is_state_timer", false]], "is_state_timer() (bpodcomprotocolmodules.events static method)": [[28, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.is_state_timer", false]], "is_state_timer() (bpodio.events static method)": [[30, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.is_state_timer", false]], "is_state_timer() (eventname static method)": [[41, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.is_state_timer", false]], "isatty() (stderrbuffer method)": [[108, "village.pybpodapi.com.stderr_buffer.StderrBuffer.isatty", false]], "isatty() (stdoutbuffer method)": [[110, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.isatty", false]], "load_message() (bpodmodule method)": [[59, "village.pybpodapi.bpod_modules.bpod_module.BpodModule.load_message", false]], "load_serial_message (sendmessageheader attribute)": [[106, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.LOAD_SERIAL_MESSAGE", false]], "load_serial_message() (bpod method)": [[22, "village.pybpodapi.bpod.Bpod.load_serial_message", false]], "load_serial_message() (bpodbase method)": [[24, "village.pybpodapi.bpod.bpod_base.BpodBase.load_serial_message", false]], "load_serial_message() (bpodcomprotocol method)": [[26, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.load_serial_message", false]], "load_serial_message() (bpodcomprotocolmodules method)": [[28, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.load_serial_message", false]], "load_serial_message() (bpodio method)": [[30, "village.pybpodapi.bpod.bpod_io.BpodIO.load_serial_message", false]], "load_serial_message_ok (receivemessageheader attribute)": [[104, "village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader.LOAD_SERIAL_MESSAGE_OK", false]], "loop_handler() (bpod method)": [[22, "village.pybpodapi.bpod.Bpod.loop_handler", false]], "loop_handler() (bpodbase method)": [[24, "village.pybpodapi.bpod.bpod_base.BpodBase.loop_handler", false]], "loop_handler() (bpodcomprotocol method)": [[26, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.loop_handler", false]], "loop_handler() (bpodcomprotocolmodules method)": [[28, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.loop_handler", false]], "loop_handler() (bpodio method)": [[30, "village.pybpodapi.bpod.bpod_io.BpodIO.loop_handler", false]], "manual_override() (bpod method)": [[22, "village.pybpodapi.bpod.Bpod.manual_override", false]], "manual_override() (bpodcomprotocol method)": [[26, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.manual_override", false]], "manual_override() (bpodcomprotocolmodules method)": [[28, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.manual_override", false]], "manual_override() (bpodio method)": [[30, "village.pybpodapi.bpod.bpod_io.BpodIO.manual_override", false]], "manual_override_exec_event (sendmessageheader attribute)": [[106, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.MANUAL_OVERRIDE_EXEC_EVENT", false]], "messageparser (class in village.pybpodapi.com.messaging.parser)": [[81, "village.pybpodapi.com.messaging.parser.MessageParser", false]], "module": [[0, "module-village.classes", false], [1, "module-village.classes.enums", false], [15, "module-village.classes.settings_class", false], [18, "module-village.devices", false], [19, "module-village.gui", false], [20, "module-village.pybpodapi", false], [21, "module-village.pybpodapi.bpod", false], [23, "module-village.pybpodapi.bpod.bpod_base", false], [25, "module-village.pybpodapi.bpod.bpod_com_protocol", false], [27, "module-village.pybpodapi.bpod.bpod_com_protocol_modules", false], [29, "module-village.pybpodapi.bpod.bpod_io", false], [31, "module-village.pybpodapi.bpod.hardware", false], [32, "module-village.pybpodapi.bpod.hardware.channels", false], [37, "module-village.pybpodapi.bpod.hardware.events", false], [38, "module-village.pybpodapi.bpod.hardware.events.base_eventname", false], [40, "module-village.pybpodapi.bpod.hardware.events.bpod_events", false], [42, "module-village.pybpodapi.bpod.hardware.hardware", false], [44, "module-village.pybpodapi.bpod.hardware.input_channels", false], [45, "module-village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels", false], [47, "module-village.pybpodapi.bpod.hardware.output_channels", false], [48, "module-village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels", false], [50, "module-village.pybpodapi.bpod.non_blockingsocketreceive", false], [53, "module-village.pybpodapi.bpod.non_blockingstreamreader", false], [56, "module-village.pybpodapi.bpod.settings", false], [57, "module-village.pybpodapi.bpod_modules", false], [58, "module-village.pybpodapi.bpod_modules.bpod_module", false], [60, "module-village.pybpodapi.bpod_modules.bpod_modules", false], [62, "module-village.pybpodapi.com", false], [63, "module-village.pybpodapi.com.arcom", false], [67, "module-village.pybpodapi.com.messaging", false], [68, "module-village.pybpodapi.com.messaging.base_message", false], [70, "module-village.pybpodapi.com.messaging.debug", false], [72, "module-village.pybpodapi.com.messaging.end_trial", false], [74, "module-village.pybpodapi.com.messaging.error", false], [76, "module-village.pybpodapi.com.messaging.event_occurrence", false], [78, "module-village.pybpodapi.com.messaging.event_resume", false], [80, "module-village.pybpodapi.com.messaging.parser", false], [82, "module-village.pybpodapi.com.messaging.session_info", false], [84, "module-village.pybpodapi.com.messaging.softcode_occurrence", false], [86, "module-village.pybpodapi.com.messaging.state_occurrence", false], [88, "module-village.pybpodapi.com.messaging.state_transition", false], [90, "module-village.pybpodapi.com.messaging.stderr", false], [92, "module-village.pybpodapi.com.messaging.stdout", false], [94, "module-village.pybpodapi.com.messaging.trial", false], [96, "module-village.pybpodapi.com.messaging.untagged_message", false], [98, "module-village.pybpodapi.com.messaging.value", false], [100, "module-village.pybpodapi.com.messaging.warning", false], [102, "module-village.pybpodapi.com.protocol", false], [103, "module-village.pybpodapi.com.protocol.recv_msg_headers", false], [105, "module-village.pybpodapi.com.protocol.send_msg_headers", false], [107, "module-village.pybpodapi.com.stderr_buffer", false], [109, "module-village.pybpodapi.com.stdout_buffer", false], [111, "module-village.pybpodapi.exceptions", false], [112, "module-village.pybpodapi.exceptions.bpod_error", false], [114, "module-village.pybpodapi.protocol", false], [115, "module-village.pybpodapi.session", false], [118, "module-village.pybpodapi.state_machine", false], [120, "module-village.pybpodapi.state_machine.conditions", false], [122, "module-village.pybpodapi.state_machine.global_counters", false], [124, "module-village.pybpodapi.state_machine.global_timers", false], [126, "module-village.pybpodapi.state_machine.state_machine_base", false], [129, "module-village.pybpodapi.state_machine.state_machine_builder", false], [132, "module-village.pybpodapi.state_machine.state_machine_runner", false], [135, "module-village.pybpodapi.utils", false], [136, "module-village.pybpodapi.utils.csv", false], [139, "module-village.pybpodapi.utils.date_parser", false], [141, "module-village.screen", false], [142, "module-village.screen.video_worker", false]], "module_event_names (receivemessageheader attribute)": [[104, "village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader.MODULE_EVENT_NAMES", false]], "module_requested_event (receivemessageheader attribute)": [[104, "village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader.MODULE_REQUESTED_EVENT", false]], "new_state_matrix (sendmessageheader attribute)": [[106, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.NEW_STATE_MATRIX", false]], "newlines (stderrbuffer attribute)": [[108, "village.pybpodapi.com.stderr_buffer.StderrBuffer.newlines", false]], "newlines (stdoutbuffer attribute)": [[110, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.newlines", false]], "nonblockingsocketreceive (class in village.pybpodapi.bpod.non_blockingsocketreceive)": [[51, "village.pybpodapi.bpod.non_blockingsocketreceive.NonBlockingSocketReceive", false]], "nonblockingstreamreader (class in village.pybpodapi.bpod.non_blockingstreamreader)": [[54, "village.pybpodapi.bpod.non_blockingstreamreader.NonBlockingStreamReader", false]], "open() (arcom method)": [[64, "village.pybpodapi.com.arcom.ArCOM.open", false]], "open() (bpod method)": [[22, "village.pybpodapi.bpod.Bpod.open", false]], "open() (bpodbase method)": [[24, "village.pybpodapi.bpod.bpod_base.BpodBase.open", false]], "open() (bpodcomprotocol method)": [[26, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.open", false]], "open() (bpodcomprotocolmodules method)": [[28, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.open", false]], "open() (bpodio method)": [[30, "village.pybpodapi.bpod.bpod_io.BpodIO.open", false]], "output (bpod.channeltypes attribute)": [[22, "village.pybpodapi.bpod.Bpod.ChannelTypes.OUTPUT", false]], "output (bpodbase.channeltypes attribute)": [[24, "village.pybpodapi.bpod.bpod_base.BpodBase.ChannelTypes.OUTPUT", false]], "output (bpodcomprotocol.channeltypes attribute)": [[26, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.ChannelTypes.OUTPUT", false]], "output (bpodcomprotocolmodules.channeltypes attribute)": [[28, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.ChannelTypes.OUTPUT", false]], "output (bpodio.channeltypes attribute)": [[30, "village.pybpodapi.bpod.bpod_io.BpodIO.ChannelTypes.OUTPUT", false]], "output (channeltype attribute)": [[34, "village.pybpodapi.bpod.hardware.channels.ChannelType.OUTPUT", false]], "outputchannel (class in village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels)": [[49, "village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.OutputChannel", false]], "override_digital_hw_state (sendmessageheader attribute)": [[106, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.OVERRIDE_DIGITAL_HW_STATE", false]], "pa1_port1in (bpod.events attribute)": [[22, "village.pybpodapi.bpod.Bpod.Events.PA1_Port1In", false]], "pa1_port1in (bpodbase.events attribute)": [[24, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.PA1_Port1In", false]], "pa1_port1in (bpodcomprotocol.events attribute)": [[26, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.PA1_Port1In", false]], "pa1_port1in (bpodcomprotocolmodules.events attribute)": [[28, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.PA1_Port1In", false]], "pa1_port1in (bpodio.events attribute)": [[30, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.PA1_Port1In", false]], "pa1_port1in (eventname attribute)": [[41, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.PA1_Port1In", false]], "parse() (in module village.pybpodapi.utils.date_parser)": [[140, "village.pybpodapi.utils.date_parser.parse", false]], "port1 (inputname attribute)": [[46, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Port1", false]], "port1in (bpod.events attribute)": [[22, "village.pybpodapi.bpod.Bpod.Events.Port1In", false]], "port1in (bpodbase.events attribute)": [[24, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.Port1In", false]], "port1in (bpodcomprotocol.events attribute)": [[26, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.Port1In", false]], "port1in (bpodcomprotocolmodules.events attribute)": [[28, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.Port1In", false]], "port1in (bpodio.events attribute)": [[30, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.Port1In", false]], "port1in (eventname attribute)": [[41, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.Port1In", false]], "port2 (inputname attribute)": [[46, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Port2", false]], "port3 (inputname attribute)": [[46, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Port3", false]], "port4 (inputname attribute)": [[46, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Port4", false]], "port5 (inputname attribute)": [[46, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Port5", false]], "port6 (inputname attribute)": [[46, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Port6", false]], "port7 (inputname attribute)": [[46, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Port7", false]], "port8 (inputname attribute)": [[46, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Port8", false]], "pwm (bpod.channelnames attribute)": [[22, "village.pybpodapi.bpod.Bpod.ChannelNames.PWM", false]], "pwm (bpodbase.channelnames attribute)": [[24, "village.pybpodapi.bpod.bpod_base.BpodBase.ChannelNames.PWM", false]], "pwm (bpodcomprotocol.channelnames attribute)": [[26, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.ChannelNames.PWM", false]], "pwm (bpodcomprotocolmodules.channelnames attribute)": [[28, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.ChannelNames.PWM", false]], "pwm (bpodio.channelnames attribute)": [[30, "village.pybpodapi.bpod.bpod_io.BpodIO.ChannelNames.PWM", false]], "pwm (channelname attribute)": [[33, "village.pybpodapi.bpod.hardware.channels.ChannelName.PWM", false]], "read() (stderrbuffer method)": [[108, "village.pybpodapi.com.stderr_buffer.StderrBuffer.read", false]], "read() (stdoutbuffer method)": [[110, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.read", false]], "readable() (stderrbuffer method)": [[108, "village.pybpodapi.com.stderr_buffer.StderrBuffer.readable", false]], "readable() (stdoutbuffer method)": [[110, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.readable", false]], "reader (class in village.pybpodapi.utils.csv)": [[137, "village.pybpodapi.utils.csv.Reader", false]], "readline() (stderrbuffer method)": [[108, "village.pybpodapi.com.stderr_buffer.StderrBuffer.readline", false]], "readline() (stdoutbuffer method)": [[110, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.readline", false]], "readlines() (stderrbuffer method)": [[108, "village.pybpodapi.com.stderr_buffer.StderrBuffer.readlines", false]], "readlines() (stdoutbuffer method)": [[110, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.readlines", false]], "receivemessageheader (class in village.pybpodapi.com.protocol.recv_msg_headers)": [[104, "village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader", false]], "reset_clock (sendmessageheader attribute)": [[106, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.RESET_CLOCK", false]], "reset_serial_messages (receivemessageheader attribute)": [[104, "village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader.RESET_SERIAL_MESSAGES", false]], "reset_serial_messages (sendmessageheader attribute)": [[106, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.RESET_SERIAL_MESSAGES", false]], "reset_serial_messages() (bpod method)": [[22, "village.pybpodapi.bpod.Bpod.reset_serial_messages", false]], "reset_serial_messages() (bpodbase method)": [[24, "village.pybpodapi.bpod.bpod_base.BpodBase.reset_serial_messages", false]], "reset_serial_messages() (bpodcomprotocol method)": [[26, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.reset_serial_messages", false]], "reset_serial_messages() (bpodcomprotocolmodules method)": [[28, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.reset_serial_messages", false]], "reset_serial_messages() (bpodio method)": [[30, "village.pybpodapi.bpod.bpod_io.BpodIO.reset_serial_messages", false]], "run_state_machine (sendmessageheader attribute)": [[106, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.RUN_STATE_MACHINE", false]], "run_state_machine() (bpod method)": [[22, "village.pybpodapi.bpod.Bpod.run_state_machine", false]], "run_state_machine() (bpodbase method)": [[24, "village.pybpodapi.bpod.bpod_base.BpodBase.run_state_machine", false]], "run_state_machine() (bpodcomprotocol method)": [[26, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.run_state_machine", false]], "run_state_machine() (bpodcomprotocolmodules method)": [[28, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.run_state_machine", false]], "run_state_machine() (bpodio method)": [[30, "village.pybpodapi.bpod.bpod_io.BpodIO.run_state_machine", false]], "save (class in village.classes.enums)": [[10, "village.classes.enums.Save", false]], "screenactive (class in village.classes.enums)": [[11, "village.classes.enums.ScreenActive", false]], "seek() (stderrbuffer method)": [[108, "village.pybpodapi.com.stderr_buffer.StderrBuffer.seek", false]], "seek() (stdoutbuffer method)": [[110, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.seek", false]], "seekable() (stderrbuffer method)": [[108, "village.pybpodapi.com.stderr_buffer.StderrBuffer.seekable", false]], "seekable() (stdoutbuffer method)": [[110, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.seekable", false]], "send_state_machine() (bpod method)": [[22, "village.pybpodapi.bpod.Bpod.send_state_machine", false]], "send_state_machine() (bpodbase method)": [[24, "village.pybpodapi.bpod.bpod_base.BpodBase.send_state_machine", false]], "send_state_machine() (bpodcomprotocol method)": [[26, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.send_state_machine", false]], "send_state_machine() (bpodcomprotocolmodules method)": [[28, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.send_state_machine", false]], "send_state_machine() (bpodio method)": [[30, "village.pybpodapi.bpod.bpod_io.BpodIO.send_state_machine", false]], "send_to_hw_serial (sendmessageheader attribute)": [[106, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.SEND_TO_HW_SERIAL", false]], "sendmessageheader (class in village.pybpodapi.com.protocol.send_msg_headers)": [[106, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader", false]], "serial (bpod.channelnames attribute)": [[22, "village.pybpodapi.bpod.Bpod.ChannelNames.SERIAL", false]], "serial (bpodbase.channelnames attribute)": [[24, "village.pybpodapi.bpod.bpod_base.BpodBase.ChannelNames.SERIAL", false]], "serial (bpodcomprotocol.channelnames attribute)": [[26, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.ChannelNames.SERIAL", false]], "serial (bpodcomprotocolmodules.channelnames attribute)": [[28, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.ChannelNames.SERIAL", false]], "serial (bpodio.channelnames attribute)": [[30, "village.pybpodapi.bpod.bpod_io.BpodIO.ChannelNames.SERIAL", false]], "serial (channelname attribute)": [[33, "village.pybpodapi.bpod.hardware.channels.ChannelName.SERIAL", false]], "serial1 (bpod.outputchannels attribute)": [[22, "village.pybpodapi.bpod.Bpod.OutputChannels.Serial1", false]], "serial1 (bpodbase.outputchannels attribute)": [[24, "village.pybpodapi.bpod.bpod_base.BpodBase.OutputChannels.Serial1", false]], "serial1 (bpodcomprotocol.outputchannels attribute)": [[26, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.OutputChannels.Serial1", false]], "serial1 (bpodcomprotocolmodules.outputchannels attribute)": [[28, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.OutputChannels.Serial1", false]], "serial1 (bpodio.outputchannels attribute)": [[30, "village.pybpodapi.bpod.bpod_io.BpodIO.OutputChannels.Serial1", false]], "serial1 (inputname attribute)": [[46, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Serial1", false]], "serial1 (outputchannel attribute)": [[49, "village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.OutputChannel.Serial1", false]], "serial2 (inputname attribute)": [[46, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Serial2", false]], "serial3 (inputname attribute)": [[46, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Serial3", false]], "session (class in village.pybpodapi.session)": [[116, "village.pybpodapi.session.Session", false]], "sessioninfo (class in village.pybpodapi.com.messaging.session_info)": [[83, "village.pybpodapi.com.messaging.session_info.SessionInfo", false]], "set_condition() (statemachine method)": [[119, "village.pybpodapi.state_machine.StateMachine.set_condition", false]], "set_condition() (statemachinebase method)": [[128, "village.pybpodapi.state_machine.state_machine_base.StateMachineBase.set_condition", false]], "set_condition() (statemachinebuilder method)": [[130, "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder.set_condition", false]], "set_condition() (statemachinerunner method)": [[133, "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner.set_condition", false]], "set_global_counter() (statemachine method)": [[119, "village.pybpodapi.state_machine.StateMachine.set_global_counter", false]], "set_global_counter() (statemachinebase method)": [[128, "village.pybpodapi.state_machine.state_machine_base.StateMachineBase.set_global_counter", false]], "set_global_counter() (statemachinebuilder method)": [[130, "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder.set_global_counter", false]], "set_global_counter() (statemachinerunner method)": [[133, "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner.set_global_counter", false]], "set_global_timer() (statemachine method)": [[119, "village.pybpodapi.state_machine.StateMachine.set_global_timer", false]], "set_global_timer() (statemachinebase method)": [[128, "village.pybpodapi.state_machine.state_machine_base.StateMachineBase.set_global_timer", false]], "set_global_timer() (statemachinebuilder method)": [[130, "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder.set_global_timer", false]], "set_global_timer() (statemachinerunner method)": [[133, "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner.set_global_timer", false]], "set_global_timer_legacy() (statemachine method)": [[119, "village.pybpodapi.state_machine.StateMachine.set_global_timer_legacy", false]], "set_global_timer_legacy() (statemachinebase method)": [[128, "village.pybpodapi.state_machine.state_machine_base.StateMachineBase.set_global_timer_legacy", false]], "set_global_timer_legacy() (statemachinebuilder method)": [[130, "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder.set_global_timer_legacy", false]], "set_global_timer_legacy() (statemachinerunner method)": [[133, "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner.set_global_timer_legacy", false]], "set_module_relay (sendmessageheader attribute)": [[106, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.SET_MODULE_RELAY", false]], "setting (class in village.classes.settings_class)": [[16, "village.classes.settings_class.Setting", false]], "settings (class in village.classes.settings_class)": [[17, "village.classes.settings_class.Settings", false]], "setup() (hardware method)": [[43, "village.pybpodapi.bpod.hardware.hardware.Hardware.setup", false]], "setup_input_channels() (channels method)": [[35, "village.pybpodapi.bpod.hardware.channels.Channels.setup_input_channels", false]], "setup_output_channels() (channels method)": [[35, "village.pybpodapi.bpod.hardware.channels.Channels.setup_output_channels", false]], "smaerror": [[127, "village.pybpodapi.state_machine.state_machine_base.SMAError", false]], "softcode1 (bpod.outputchannels attribute)": [[22, "village.pybpodapi.bpod.Bpod.OutputChannels.SoftCode1", false]], "softcode1 (bpodbase.outputchannels attribute)": [[24, "village.pybpodapi.bpod.bpod_base.BpodBase.OutputChannels.SoftCode1", false]], "softcode1 (bpodcomprotocol.outputchannels attribute)": [[26, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.OutputChannels.SoftCode1", false]], "softcode1 (bpodcomprotocolmodules.outputchannels attribute)": [[28, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.OutputChannels.SoftCode1", false]], "softcode1 (bpodio.outputchannels attribute)": [[30, "village.pybpodapi.bpod.bpod_io.BpodIO.OutputChannels.SoftCode1", false]], "softcode1 (outputchannel attribute)": [[49, "village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.OutputChannel.SoftCode1", false]], "softcode_handler_function() (bpod method)": [[22, "village.pybpodapi.bpod.Bpod.softcode_handler_function", false]], "softcode_handler_function() (bpodbase method)": [[24, "village.pybpodapi.bpod.bpod_base.BpodBase.softcode_handler_function", false]], "softcode_handler_function() (bpodcomprotocol method)": [[26, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.softcode_handler_function", false]], "softcode_handler_function() (bpodcomprotocolmodules method)": [[28, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.softcode_handler_function", false]], "softcode_handler_function() (bpodio method)": [[30, "village.pybpodapi.bpod.bpod_io.BpodIO.softcode_handler_function", false]], "softcodeoccurrence (class in village.pybpodapi.com.messaging.softcode_occurrence)": [[85, "village.pybpodapi.com.messaging.softcode_occurrence.SoftcodeOccurrence", false]], "state (class in village.classes.enums)": [[12, "village.classes.enums.State", false]], "state_machine_installation_status (receivemessageheader attribute)": [[104, "village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader.STATE_MACHINE_INSTALLATION_STATUS", false]], "statemachine (class in village.pybpodapi.state_machine)": [[119, "village.pybpodapi.state_machine.StateMachine", false]], "statemachinebase (class in village.pybpodapi.state_machine.state_machine_base)": [[128, "village.pybpodapi.state_machine.state_machine_base.StateMachineBase", false]], "statemachinebuilder (class in village.pybpodapi.state_machine.state_machine_builder)": [[130, "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder", false]], "statemachinebuildererror": [[131, "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilderError", false]], "statemachinerunner (class in village.pybpodapi.state_machine.state_machine_runner)": [[133, "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner", false]], "statemachinerunnererror": [[134, "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunnerError", false]], "stateoccurrence (class in village.pybpodapi.com.messaging.state_occurrence)": [[87, "village.pybpodapi.com.messaging.state_occurrence.StateOccurrence", false]], "statetransition (class in village.pybpodapi.com.messaging.state_transition)": [[89, "village.pybpodapi.com.messaging.state_transition.StateTransition", false]], "stderrbuffer (class in village.pybpodapi.com.stderr_buffer)": [[108, "village.pybpodapi.com.stderr_buffer.StderrBuffer", false]], "stderrmessage (class in village.pybpodapi.com.messaging.stderr)": [[91, "village.pybpodapi.com.messaging.stderr.StderrMessage", false]], "stdoutbuffer (class in village.pybpodapi.com.stdout_buffer)": [[110, "village.pybpodapi.com.stdout_buffer.StdoutBuffer", false]], "stdoutmessage (class in village.pybpodapi.com.messaging.stdout)": [[93, "village.pybpodapi.com.messaging.stdout.StdoutMessage", false]], "streamswrapper (class in village.pybpodapi.session)": [[117, "village.pybpodapi.session.StreamsWrapper", false]], "superenum (class in village.classes.enums)": [[13, "village.classes.enums.SuperEnum", false]], "sync_channel_mode (sendmessageheader attribute)": [[106, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.SYNC_CHANNEL_MODE", false]], "sync_channel_mode_ok (receivemessageheader attribute)": [[104, "village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader.SYNC_CHANNEL_MODE_OK", false]], "synctype (class in village.classes.enums)": [[14, "village.classes.enums.SyncType", false]], "tell() (stderrbuffer method)": [[108, "village.pybpodapi.com.stderr_buffer.StderrBuffer.tell", false]], "tell() (stdoutbuffer method)": [[110, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.tell", false]], "trial (class in village.pybpodapi.com.messaging.trial)": [[95, "village.pybpodapi.com.messaging.trial.Trial", false]], "trigger_softcode (sendmessageheader attribute)": [[106, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.TRIGGER_SOFTCODE", false]], "truncate() (stderrbuffer method)": [[108, "village.pybpodapi.com.stderr_buffer.StderrBuffer.truncate", false]], "truncate() (stdoutbuffer method)": [[110, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.truncate", false]], "tup (bpod.events attribute)": [[22, "village.pybpodapi.bpod.Bpod.Events.Tup", false]], "tup (bpodbase.events attribute)": [[24, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.Tup", false]], "tup (bpodcomprotocol.events attribute)": [[26, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.Tup", false]], "tup (bpodcomprotocolmodules.events attribute)": [[28, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.Tup", false]], "tup (bpodio.events attribute)": [[30, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.Tup", false]], "tup (eventname attribute)": [[41, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.Tup", false]], "unexpectedendofstream": [[52, "village.pybpodapi.bpod.non_blockingsocketreceive.UnexpectedEndOfStream", false], [55, "village.pybpodapi.bpod.non_blockingstreamreader.UnexpectedEndOfStream", false]], "untaggedmessage (class in village.pybpodapi.com.messaging.untagged_message)": [[97, "village.pybpodapi.com.messaging.untagged_message.UntaggedMessage", false]], "update_state_numbers() (statemachine method)": [[119, "village.pybpodapi.state_machine.StateMachine.update_state_numbers", false]], "update_state_numbers() (statemachinebuilder method)": [[130, "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder.update_state_numbers", false]], "update_state_numbers() (statemachinerunner method)": [[133, "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner.update_state_numbers", false]], "usb1 (inputname attribute)": [[46, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.USB1", false]], "valuemessage (class in village.pybpodapi.com.messaging.value)": [[99, "village.pybpodapi.com.messaging.value.ValueMessage", false]], "valve (bpod.channelnames attribute)": [[22, "village.pybpodapi.bpod.Bpod.ChannelNames.VALVE", false]], "valve (bpodbase.channelnames attribute)": [[24, "village.pybpodapi.bpod.bpod_base.BpodBase.ChannelNames.VALVE", false]], "valve (bpodcomprotocol.channelnames attribute)": [[26, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.ChannelNames.VALVE", false]], "valve (bpodcomprotocolmodules.channelnames attribute)": [[28, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.ChannelNames.VALVE", false]], "valve (bpodio.channelnames attribute)": [[30, "village.pybpodapi.bpod.bpod_io.BpodIO.ChannelNames.VALVE", false]], "valve (channelname attribute)": [[33, "village.pybpodapi.bpod.hardware.channels.ChannelName.VALVE", false]], "valve1 (bpod.outputchannels attribute)": [[22, "village.pybpodapi.bpod.Bpod.OutputChannels.Valve1", false]], "valve1 (bpodbase.outputchannels attribute)": [[24, "village.pybpodapi.bpod.bpod_base.BpodBase.OutputChannels.Valve1", false]], "valve1 (bpodcomprotocol.outputchannels attribute)": [[26, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.OutputChannels.Valve1", false]], "valve1 (bpodcomprotocolmodules.outputchannels attribute)": [[28, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.OutputChannels.Valve1", false]], "valve1 (bpodio.outputchannels attribute)": [[30, "village.pybpodapi.bpod.bpod_io.BpodIO.OutputChannels.Valve1", false]], "valve1 (outputchannel attribute)": [[49, "village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.OutputChannel.Valve1", false]], "videoworker (class in village.screen.video_worker)": [[143, "village.screen.video_worker.VideoWorker", false]], "village.classes": [[0, "module-village.classes", false]], "village.classes.enums": [[1, "module-village.classes.enums", false]], "village.classes.settings_class": [[15, "module-village.classes.settings_class", false]], "village.devices": [[18, "module-village.devices", false]], "village.gui": [[19, "module-village.gui", false]], "village.pybpodapi": [[20, "module-village.pybpodapi", false]], "village.pybpodapi.bpod": [[21, "module-village.pybpodapi.bpod", false]], "village.pybpodapi.bpod.bpod_base": [[23, "module-village.pybpodapi.bpod.bpod_base", false]], "village.pybpodapi.bpod.bpod_com_protocol": [[25, "module-village.pybpodapi.bpod.bpod_com_protocol", false]], "village.pybpodapi.bpod.bpod_com_protocol_modules": [[27, "module-village.pybpodapi.bpod.bpod_com_protocol_modules", false]], "village.pybpodapi.bpod.bpod_io": [[29, "module-village.pybpodapi.bpod.bpod_io", false]], "village.pybpodapi.bpod.hardware": [[31, "module-village.pybpodapi.bpod.hardware", false]], "village.pybpodapi.bpod.hardware.channels": [[32, "module-village.pybpodapi.bpod.hardware.channels", false]], "village.pybpodapi.bpod.hardware.events": [[37, "module-village.pybpodapi.bpod.hardware.events", false]], "village.pybpodapi.bpod.hardware.events.base_eventname": [[38, "module-village.pybpodapi.bpod.hardware.events.base_eventname", false]], "village.pybpodapi.bpod.hardware.events.bpod_events": [[40, "module-village.pybpodapi.bpod.hardware.events.bpod_events", false]], "village.pybpodapi.bpod.hardware.hardware": [[42, "module-village.pybpodapi.bpod.hardware.hardware", false]], "village.pybpodapi.bpod.hardware.input_channels": [[44, "module-village.pybpodapi.bpod.hardware.input_channels", false]], "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels": [[45, "module-village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels", false]], "village.pybpodapi.bpod.hardware.output_channels": [[47, "module-village.pybpodapi.bpod.hardware.output_channels", false]], "village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels": [[48, "module-village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels", false]], "village.pybpodapi.bpod.non_blockingsocketreceive": [[50, "module-village.pybpodapi.bpod.non_blockingsocketreceive", false]], "village.pybpodapi.bpod.non_blockingstreamreader": [[53, "module-village.pybpodapi.bpod.non_blockingstreamreader", false]], "village.pybpodapi.bpod.settings": [[56, "module-village.pybpodapi.bpod.settings", false]], "village.pybpodapi.bpod_modules": [[57, "module-village.pybpodapi.bpod_modules", false]], "village.pybpodapi.bpod_modules.bpod_module": [[58, "module-village.pybpodapi.bpod_modules.bpod_module", false]], "village.pybpodapi.bpod_modules.bpod_modules": [[60, "module-village.pybpodapi.bpod_modules.bpod_modules", false]], "village.pybpodapi.com": [[62, "module-village.pybpodapi.com", false]], "village.pybpodapi.com.arcom": [[63, "module-village.pybpodapi.com.arcom", false]], "village.pybpodapi.com.messaging": [[67, "module-village.pybpodapi.com.messaging", false]], "village.pybpodapi.com.messaging.base_message": [[68, "module-village.pybpodapi.com.messaging.base_message", false]], "village.pybpodapi.com.messaging.debug": [[70, "module-village.pybpodapi.com.messaging.debug", false]], "village.pybpodapi.com.messaging.end_trial": [[72, "module-village.pybpodapi.com.messaging.end_trial", false]], "village.pybpodapi.com.messaging.error": [[74, "module-village.pybpodapi.com.messaging.error", false]], "village.pybpodapi.com.messaging.event_occurrence": [[76, "module-village.pybpodapi.com.messaging.event_occurrence", false]], "village.pybpodapi.com.messaging.event_resume": [[78, "module-village.pybpodapi.com.messaging.event_resume", false]], "village.pybpodapi.com.messaging.parser": [[80, "module-village.pybpodapi.com.messaging.parser", false]], "village.pybpodapi.com.messaging.session_info": [[82, "module-village.pybpodapi.com.messaging.session_info", false]], "village.pybpodapi.com.messaging.softcode_occurrence": [[84, "module-village.pybpodapi.com.messaging.softcode_occurrence", false]], "village.pybpodapi.com.messaging.state_occurrence": [[86, "module-village.pybpodapi.com.messaging.state_occurrence", false]], "village.pybpodapi.com.messaging.state_transition": [[88, "module-village.pybpodapi.com.messaging.state_transition", false]], "village.pybpodapi.com.messaging.stderr": [[90, "module-village.pybpodapi.com.messaging.stderr", false]], "village.pybpodapi.com.messaging.stdout": [[92, "module-village.pybpodapi.com.messaging.stdout", false]], "village.pybpodapi.com.messaging.trial": [[94, "module-village.pybpodapi.com.messaging.trial", false]], "village.pybpodapi.com.messaging.untagged_message": [[96, "module-village.pybpodapi.com.messaging.untagged_message", false]], "village.pybpodapi.com.messaging.value": [[98, "module-village.pybpodapi.com.messaging.value", false]], "village.pybpodapi.com.messaging.warning": [[100, "module-village.pybpodapi.com.messaging.warning", false]], "village.pybpodapi.com.protocol": [[102, "module-village.pybpodapi.com.protocol", false]], "village.pybpodapi.com.protocol.recv_msg_headers": [[103, "module-village.pybpodapi.com.protocol.recv_msg_headers", false]], "village.pybpodapi.com.protocol.send_msg_headers": [[105, "module-village.pybpodapi.com.protocol.send_msg_headers", false]], "village.pybpodapi.com.stderr_buffer": [[107, "module-village.pybpodapi.com.stderr_buffer", false]], "village.pybpodapi.com.stdout_buffer": [[109, "module-village.pybpodapi.com.stdout_buffer", false]], "village.pybpodapi.exceptions": [[111, "module-village.pybpodapi.exceptions", false]], "village.pybpodapi.exceptions.bpod_error": [[112, "module-village.pybpodapi.exceptions.bpod_error", false]], "village.pybpodapi.protocol": [[114, "module-village.pybpodapi.protocol", false]], "village.pybpodapi.session": [[115, "module-village.pybpodapi.session", false]], "village.pybpodapi.state_machine": [[118, "module-village.pybpodapi.state_machine", false]], "village.pybpodapi.state_machine.conditions": [[120, "module-village.pybpodapi.state_machine.conditions", false]], "village.pybpodapi.state_machine.global_counters": [[122, "module-village.pybpodapi.state_machine.global_counters", false]], "village.pybpodapi.state_machine.global_timers": [[124, "module-village.pybpodapi.state_machine.global_timers", false]], "village.pybpodapi.state_machine.state_machine_base": [[126, "module-village.pybpodapi.state_machine.state_machine_base", false]], "village.pybpodapi.state_machine.state_machine_builder": [[129, "module-village.pybpodapi.state_machine.state_machine_builder", false]], "village.pybpodapi.state_machine.state_machine_runner": [[132, "module-village.pybpodapi.state_machine.state_machine_runner", false]], "village.pybpodapi.utils": [[135, "module-village.pybpodapi.utils", false]], "village.pybpodapi.utils.csv": [[136, "module-village.pybpodapi.utils.csv", false]], "village.pybpodapi.utils.date_parser": [[139, "module-village.pybpodapi.utils.date_parser", false]], "village.screen": [[141, "module-village.screen", false]], "village.screen.video_worker": [[142, "module-village.screen.video_worker", false]], "warningmessage (class in village.pybpodapi.com.messaging.warning)": [[101, "village.pybpodapi.com.messaging.warning.WarningMessage", false]], "wire (bpod.channelnames attribute)": [[22, "village.pybpodapi.bpod.Bpod.ChannelNames.WIRE", false]], "wire (bpodbase.channelnames attribute)": [[24, "village.pybpodapi.bpod.bpod_base.BpodBase.ChannelNames.WIRE", false]], "wire (bpodcomprotocol.channelnames attribute)": [[26, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.ChannelNames.WIRE", false]], "wire (bpodcomprotocolmodules.channelnames attribute)": [[28, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.ChannelNames.WIRE", false]], "wire (bpodio.channelnames attribute)": [[30, "village.pybpodapi.bpod.bpod_io.BpodIO.ChannelNames.WIRE", false]], "wire (channelname attribute)": [[33, "village.pybpodapi.bpod.hardware.channels.ChannelName.WIRE", false]], "wire1 (inputname attribute)": [[46, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Wire1", false]], "wire2 (inputname attribute)": [[46, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Wire2", false]], "writable() (stderrbuffer method)": [[108, "village.pybpodapi.com.stderr_buffer.StderrBuffer.writable", false]], "writable() (stdoutbuffer method)": [[110, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.writable", false]], "write() (stderrbuffer method)": [[108, "village.pybpodapi.com.stderr_buffer.StderrBuffer.write", false]], "write() (stdoutbuffer method)": [[110, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.write", false]], "write_to_module (sendmessageheader attribute)": [[106, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.WRITE_TO_MODULE", false]], "writelines() (stderrbuffer method)": [[108, "village.pybpodapi.com.stderr_buffer.StderrBuffer.writelines", false]], "writelines() (stdoutbuffer method)": [[110, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.writelines", false]], "writer (class in village.pybpodapi.utils.csv)": [[138, "village.pybpodapi.utils.csv.Writer", false]]}, "objects": {"village": [[0, 0, 0, "-", "classes"], [18, 0, 0, "-", "devices"], [19, 0, 0, "-", "gui"], [20, 0, 0, "-", "pybpodapi"], [141, 0, 0, "-", "screen"]], "village.classes": [[1, 0, 0, "-", "enums"], [15, 0, 0, "-", "settings_class"]], "village.classes.enums": [[2, 1, 1, "", "Actions"], [3, 1, 1, "", "Active"], [4, 1, 1, "", "AreaActive"], [5, 1, 1, "", "Color"], [6, 1, 1, "", "Controller"], [7, 1, 1, "", "Cycle"], [8, 1, 1, "", "DataTable"], [9, 1, 1, "", "Info"], [10, 1, 1, "", "Save"], [11, 1, 1, "", "ScreenActive"], [12, 1, 1, "", "State"], [13, 1, 1, "", "SuperEnum"], [14, 1, 1, "", "SyncType"]], "village.classes.enums.Actions": [[2, 2, 1, "", "__init__"]], "village.classes.enums.Active": [[3, 2, 1, "", "__init__"]], "village.classes.enums.AreaActive": [[4, 2, 1, "", "__init__"]], "village.classes.enums.Color": [[5, 2, 1, "", "__init__"]], "village.classes.enums.Controller": [[6, 2, 1, "", "__init__"]], "village.classes.enums.Cycle": [[7, 2, 1, "", "__init__"]], "village.classes.enums.DataTable": [[8, 2, 1, "", "__init__"]], "village.classes.enums.Info": [[9, 2, 1, "", "__init__"]], "village.classes.enums.Save": [[10, 2, 1, "", "__init__"]], "village.classes.enums.ScreenActive": [[11, 2, 1, "", "__init__"]], "village.classes.enums.State": [[12, 2, 1, "", "__init__"]], "village.classes.enums.SuperEnum": [[13, 2, 1, "", "__init__"]], "village.classes.enums.SyncType": [[14, 2, 1, "", "__init__"]], "village.classes.settings_class": [[16, 1, 1, "", "Setting"], [17, 1, 1, "", "Settings"]], "village.classes.settings_class.Setting": [[16, 2, 1, "", "__init__"]], "village.classes.settings_class.Settings": [[17, 2, 1, "", "__init__"], [17, 2, 1, "", "get"], [17, 2, 1, "", "get_description"], [17, 2, 1, "", "get_index"], [17, 2, 1, "", "get_indices"], [17, 2, 1, "", "get_text"], [17, 2, 1, "", "get_type"], [17, 2, 1, "", "get_values"]], "village.pybpodapi": [[21, 0, 0, "-", "bpod"], [57, 0, 0, "-", "bpod_modules"], [62, 0, 0, "-", "com"], [111, 0, 0, "-", "exceptions"], [114, 0, 0, "-", "protocol"], [115, 0, 0, "-", "session"], [118, 0, 0, "-", "state_machine"], [135, 0, 0, "-", "utils"]], "village.pybpodapi.bpod": [[22, 1, 1, "", "Bpod"], [23, 0, 0, "-", "bpod_base"], [25, 0, 0, "-", "bpod_com_protocol"], [27, 0, 0, "-", "bpod_com_protocol_modules"], [29, 0, 0, "-", "bpod_io"], [31, 0, 0, "-", "hardware"], [50, 0, 0, "-", "non_blockingsocketreceive"], [53, 0, 0, "-", "non_blockingstreamreader"], [56, 0, 0, "-", "settings"]], "village.pybpodapi.bpod.Bpod": [[22, 1, 1, "", "ChannelNames"], [22, 1, 1, "", "ChannelTypes"], [22, 1, 1, "", "Events"], [22, 1, 1, "", "OutputChannels"], [22, 2, 1, "", "__init__"], [22, 2, 1, "", "close"], [22, 2, 1, "", "data_available"], [22, 2, 1, "", "find_module_by_name"], [22, 2, 1, "", "load_serial_message"], [22, 2, 1, "", "loop_handler"], [22, 2, 1, "", "manual_override"], [22, 2, 1, "", "open"], [22, 2, 1, "", "reset_serial_messages"], [22, 2, 1, "", "run_state_machine"], [22, 2, 1, "", "send_state_machine"], [22, 2, 1, "", "softcode_handler_function"]], "village.pybpodapi.bpod.Bpod.ChannelNames": [[22, 3, 1, "", "BNC"], [22, 3, 1, "", "PWM"], [22, 3, 1, "", "SERIAL"], [22, 3, 1, "", "VALVE"], [22, 3, 1, "", "WIRE"]], "village.pybpodapi.bpod.Bpod.ChannelTypes": [[22, 3, 1, "", "INPUT"], [22, 3, 1, "", "OUTPUT"]], "village.pybpodapi.bpod.Bpod.Events": [[22, 3, 1, "", "BNC1High"], [22, 3, 1, "", "Condition1"], [22, 3, 1, "", "GlobalCounter1End"], [22, 3, 1, "", "GlobalTimer1End"], [22, 3, 1, "", "GlobalTimer1Start"], [22, 3, 1, "", "PA1_Port1In"], [22, 3, 1, "", "Port1In"], [22, 3, 1, "", "Tup"], [22, 2, 1, "", "is_condition"], [22, 2, 1, "", "is_global_counter_end"], [22, 2, 1, "", "is_global_timer_cancel"], [22, 2, 1, "", "is_global_timer_end"], [22, 2, 1, "", "is_global_timer_start"], [22, 2, 1, "", "is_global_timer_trigger"], [22, 2, 1, "", "is_state_timer"]], "village.pybpodapi.bpod.Bpod.OutputChannels": [[22, 3, 1, "", "BNC1High"], [22, 3, 1, "", "GlobalCounter1Reset"], [22, 3, 1, "", "GlobalTimer1Cancel"], [22, 3, 1, "", "GlobalTimer1Trig"], [22, 3, 1, "", "Serial1"], [22, 3, 1, "", "SoftCode1"], [22, 3, 1, "", "Valve1"]], "village.pybpodapi.bpod.bpod_base": [[24, 1, 1, "", "BpodBase"]], "village.pybpodapi.bpod.bpod_base.BpodBase": [[24, 1, 1, "", "ChannelNames"], [24, 1, 1, "", "ChannelTypes"], [24, 1, 1, "", "Events"], [24, 1, 1, "", "OutputChannels"], [24, 2, 1, "", "__init__"], [24, 2, 1, "", "close"], [24, 2, 1, "", "find_module_by_name"], [24, 2, 1, "", "load_serial_message"], [24, 2, 1, "", "loop_handler"], [24, 2, 1, "", "open"], [24, 2, 1, "", "reset_serial_messages"], [24, 2, 1, "", "run_state_machine"], [24, 2, 1, "", "send_state_machine"], [24, 2, 1, "", "softcode_handler_function"]], "village.pybpodapi.bpod.bpod_base.BpodBase.ChannelNames": [[24, 3, 1, "", "BNC"], [24, 3, 1, "", "PWM"], [24, 3, 1, "", "SERIAL"], [24, 3, 1, "", "VALVE"], [24, 3, 1, "", "WIRE"]], "village.pybpodapi.bpod.bpod_base.BpodBase.ChannelTypes": [[24, 3, 1, "", "INPUT"], [24, 3, 1, "", "OUTPUT"]], "village.pybpodapi.bpod.bpod_base.BpodBase.Events": [[24, 3, 1, "", "BNC1High"], [24, 3, 1, "", "Condition1"], [24, 3, 1, "", "GlobalCounter1End"], [24, 3, 1, "", "GlobalTimer1End"], [24, 3, 1, "", "GlobalTimer1Start"], [24, 3, 1, "", "PA1_Port1In"], [24, 3, 1, "", "Port1In"], [24, 3, 1, "", "Tup"], [24, 2, 1, "", "is_condition"], [24, 2, 1, "", "is_global_counter_end"], [24, 2, 1, "", "is_global_timer_cancel"], [24, 2, 1, "", "is_global_timer_end"], [24, 2, 1, "", "is_global_timer_start"], [24, 2, 1, "", "is_global_timer_trigger"], [24, 2, 1, "", "is_state_timer"]], "village.pybpodapi.bpod.bpod_base.BpodBase.OutputChannels": [[24, 3, 1, "", "BNC1High"], [24, 3, 1, "", "GlobalCounter1Reset"], [24, 3, 1, "", "GlobalTimer1Cancel"], [24, 3, 1, "", "GlobalTimer1Trig"], [24, 3, 1, "", "Serial1"], [24, 3, 1, "", "SoftCode1"], [24, 3, 1, "", "Valve1"]], "village.pybpodapi.bpod.bpod_com_protocol": [[26, 1, 1, "", "BpodCOMProtocol"]], "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol": [[26, 1, 1, "", "ChannelNames"], [26, 1, 1, "", "ChannelTypes"], [26, 1, 1, "", "Events"], [26, 1, 1, "", "OutputChannels"], [26, 2, 1, "", "__init__"], [26, 2, 1, "", "close"], [26, 2, 1, "", "data_available"], [26, 2, 1, "", "find_module_by_name"], [26, 2, 1, "", "load_serial_message"], [26, 2, 1, "", "loop_handler"], [26, 2, 1, "", "manual_override"], [26, 2, 1, "", "open"], [26, 2, 1, "", "reset_serial_messages"], [26, 2, 1, "", "run_state_machine"], [26, 2, 1, "", "send_state_machine"], [26, 2, 1, "", "softcode_handler_function"]], "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.ChannelNames": [[26, 3, 1, "", "BNC"], [26, 3, 1, "", "PWM"], [26, 3, 1, "", "SERIAL"], [26, 3, 1, "", "VALVE"], [26, 3, 1, "", "WIRE"]], "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.ChannelTypes": [[26, 3, 1, "", "INPUT"], [26, 3, 1, "", "OUTPUT"]], "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events": [[26, 3, 1, "", "BNC1High"], [26, 3, 1, "", "Condition1"], [26, 3, 1, "", "GlobalCounter1End"], [26, 3, 1, "", "GlobalTimer1End"], [26, 3, 1, "", "GlobalTimer1Start"], [26, 3, 1, "", "PA1_Port1In"], [26, 3, 1, "", "Port1In"], [26, 3, 1, "", "Tup"], [26, 2, 1, "", "is_condition"], [26, 2, 1, "", "is_global_counter_end"], [26, 2, 1, "", "is_global_timer_cancel"], [26, 2, 1, "", "is_global_timer_end"], [26, 2, 1, "", "is_global_timer_start"], [26, 2, 1, "", "is_global_timer_trigger"], [26, 2, 1, "", "is_state_timer"]], "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.OutputChannels": [[26, 3, 1, "", "BNC1High"], [26, 3, 1, "", "GlobalCounter1Reset"], [26, 3, 1, "", "GlobalTimer1Cancel"], [26, 3, 1, "", "GlobalTimer1Trig"], [26, 3, 1, "", "Serial1"], [26, 3, 1, "", "SoftCode1"], [26, 3, 1, "", "Valve1"]], "village.pybpodapi.bpod.bpod_com_protocol_modules": [[28, 1, 1, "", "BpodCOMProtocolModules"]], "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules": [[28, 1, 1, "", "ChannelNames"], [28, 1, 1, "", "ChannelTypes"], [28, 1, 1, "", "Events"], [28, 1, 1, "", "OutputChannels"], [28, 2, 1, "", "__init__"], [28, 2, 1, "", "close"], [28, 2, 1, "", "data_available"], [28, 2, 1, "", "find_module_by_name"], [28, 2, 1, "", "load_serial_message"], [28, 2, 1, "", "loop_handler"], [28, 2, 1, "", "manual_override"], [28, 2, 1, "", "open"], [28, 2, 1, "", "reset_serial_messages"], [28, 2, 1, "", "run_state_machine"], [28, 2, 1, "", "send_state_machine"], [28, 2, 1, "", "softcode_handler_function"]], "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.ChannelNames": [[28, 3, 1, "", "BNC"], [28, 3, 1, "", "PWM"], [28, 3, 1, "", "SERIAL"], [28, 3, 1, "", "VALVE"], [28, 3, 1, "", "WIRE"]], "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.ChannelTypes": [[28, 3, 1, "", "INPUT"], [28, 3, 1, "", "OUTPUT"]], "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events": [[28, 3, 1, "", "BNC1High"], [28, 3, 1, "", "Condition1"], [28, 3, 1, "", "GlobalCounter1End"], [28, 3, 1, "", "GlobalTimer1End"], [28, 3, 1, "", "GlobalTimer1Start"], [28, 3, 1, "", "PA1_Port1In"], [28, 3, 1, "", "Port1In"], [28, 3, 1, "", "Tup"], [28, 2, 1, "", "is_condition"], [28, 2, 1, "", "is_global_counter_end"], [28, 2, 1, "", "is_global_timer_cancel"], [28, 2, 1, "", "is_global_timer_end"], [28, 2, 1, "", "is_global_timer_start"], [28, 2, 1, "", "is_global_timer_trigger"], [28, 2, 1, "", "is_state_timer"]], "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.OutputChannels": [[28, 3, 1, "", "BNC1High"], [28, 3, 1, "", "GlobalCounter1Reset"], [28, 3, 1, "", "GlobalTimer1Cancel"], [28, 3, 1, "", "GlobalTimer1Trig"], [28, 3, 1, "", "Serial1"], [28, 3, 1, "", "SoftCode1"], [28, 3, 1, "", "Valve1"]], "village.pybpodapi.bpod.bpod_io": [[30, 1, 1, "", "BpodIO"]], "village.pybpodapi.bpod.bpod_io.BpodIO": [[30, 1, 1, "", "ChannelNames"], [30, 1, 1, "", "ChannelTypes"], [30, 1, 1, "", "Events"], [30, 1, 1, "", "OutputChannels"], [30, 2, 1, "", "__init__"], [30, 2, 1, "", "close"], [30, 2, 1, "", "data_available"], [30, 2, 1, "", "find_module_by_name"], [30, 2, 1, "", "load_serial_message"], [30, 2, 1, "", "loop_handler"], [30, 2, 1, "", "manual_override"], [30, 2, 1, "", "open"], [30, 2, 1, "", "reset_serial_messages"], [30, 2, 1, "", "run_state_machine"], [30, 2, 1, "", "send_state_machine"], [30, 2, 1, "", "softcode_handler_function"]], "village.pybpodapi.bpod.bpod_io.BpodIO.ChannelNames": [[30, 3, 1, "", "BNC"], [30, 3, 1, "", "PWM"], [30, 3, 1, "", "SERIAL"], [30, 3, 1, "", "VALVE"], [30, 3, 1, "", "WIRE"]], "village.pybpodapi.bpod.bpod_io.BpodIO.ChannelTypes": [[30, 3, 1, "", "INPUT"], [30, 3, 1, "", "OUTPUT"]], "village.pybpodapi.bpod.bpod_io.BpodIO.Events": [[30, 3, 1, "", "BNC1High"], [30, 3, 1, "", "Condition1"], [30, 3, 1, "", "GlobalCounter1End"], [30, 3, 1, "", "GlobalTimer1End"], [30, 3, 1, "", "GlobalTimer1Start"], [30, 3, 1, "", "PA1_Port1In"], [30, 3, 1, "", "Port1In"], [30, 3, 1, "", "Tup"], [30, 2, 1, "", "is_condition"], [30, 2, 1, "", "is_global_counter_end"], [30, 2, 1, "", "is_global_timer_cancel"], [30, 2, 1, "", "is_global_timer_end"], [30, 2, 1, "", "is_global_timer_start"], [30, 2, 1, "", "is_global_timer_trigger"], [30, 2, 1, "", "is_state_timer"]], "village.pybpodapi.bpod.bpod_io.BpodIO.OutputChannels": [[30, 3, 1, "", "BNC1High"], [30, 3, 1, "", "GlobalCounter1Reset"], [30, 3, 1, "", "GlobalTimer1Cancel"], [30, 3, 1, "", "GlobalTimer1Trig"], [30, 3, 1, "", "Serial1"], [30, 3, 1, "", "SoftCode1"], [30, 3, 1, "", "Valve1"]], "village.pybpodapi.bpod.hardware": [[32, 0, 0, "-", "channels"], [37, 0, 0, "-", "events"], [42, 0, 0, "-", "hardware"], [44, 0, 0, "-", "input_channels"], [47, 0, 0, "-", "output_channels"]], "village.pybpodapi.bpod.hardware.channels": [[33, 1, 1, "", "ChannelName"], [34, 1, 1, "", "ChannelType"], [35, 1, 1, "", "Channels"], [36, 1, 1, "", "EventsPositions"]], "village.pybpodapi.bpod.hardware.channels.ChannelName": [[33, 3, 1, "", "BNC"], [33, 3, 1, "", "PWM"], [33, 3, 1, "", "SERIAL"], [33, 3, 1, "", "VALVE"], [33, 3, 1, "", "WIRE"], [33, 2, 1, "", "__init__"]], "village.pybpodapi.bpod.hardware.channels.ChannelType": [[34, 3, 1, "", "INPUT"], [34, 3, 1, "", "OUTPUT"], [34, 2, 1, "", "__init__"]], "village.pybpodapi.bpod.hardware.channels.Channels": [[35, 2, 1, "", "__init__"], [35, 2, 1, "", "get_event_name"], [35, 2, 1, "", "setup_input_channels"], [35, 2, 1, "", "setup_output_channels"]], "village.pybpodapi.bpod.hardware.channels.EventsPositions": [[36, 2, 1, "", "__init__"]], "village.pybpodapi.bpod.hardware.events": [[38, 0, 0, "-", "base_eventname"], [40, 0, 0, "-", "bpod_events"]], "village.pybpodapi.bpod.hardware.events.base_eventname": [[39, 1, 1, "", "BaseEventName"]], "village.pybpodapi.bpod.hardware.events.base_eventname.BaseEventName": [[39, 2, 1, "", "__init__"], [39, 2, 1, "", "is_condition"], [39, 2, 1, "", "is_global_counter_end"], [39, 2, 1, "", "is_global_timer_cancel"], [39, 2, 1, "", "is_global_timer_end"], [39, 2, 1, "", "is_global_timer_start"], [39, 2, 1, "", "is_global_timer_trigger"], [39, 2, 1, "", "is_state_timer"]], "village.pybpodapi.bpod.hardware.events.bpod_events": [[41, 1, 1, "", "EventName"]], "village.pybpodapi.bpod.hardware.events.bpod_events.EventName": [[41, 3, 1, "", "BNC1High"], [41, 3, 1, "", "Condition1"], [41, 3, 1, "", "GlobalCounter1End"], [41, 3, 1, "", "GlobalTimer1End"], [41, 3, 1, "", "GlobalTimer1Start"], [41, 3, 1, "", "PA1_Port1In"], [41, 3, 1, "", "Port1In"], [41, 3, 1, "", "Tup"], [41, 2, 1, "", "__init__"], [41, 2, 1, "", "is_condition"], [41, 2, 1, "", "is_global_counter_end"], [41, 2, 1, "", "is_global_timer_cancel"], [41, 2, 1, "", "is_global_timer_end"], [41, 2, 1, "", "is_global_timer_start"], [41, 2, 1, "", "is_global_timer_trigger"], [41, 2, 1, "", "is_state_timer"]], "village.pybpodapi.bpod.hardware.hardware": [[43, 1, 1, "", "Hardware"]], "village.pybpodapi.bpod.hardware.hardware.Hardware": [[43, 2, 1, "", "__init__"], [43, 2, 1, "", "setup"]], "village.pybpodapi.bpod.hardware.input_channels": [[45, 0, 0, "-", "bpod_input_channels"]], "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels": [[46, 1, 1, "", "InputName"]], "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName": [[46, 3, 1, "", "BNC1"], [46, 3, 1, "", "BNC2"], [46, 3, 1, "", "Port1"], [46, 3, 1, "", "Port2"], [46, 3, 1, "", "Port3"], [46, 3, 1, "", "Port4"], [46, 3, 1, "", "Port5"], [46, 3, 1, "", "Port6"], [46, 3, 1, "", "Port7"], [46, 3, 1, "", "Port8"], [46, 3, 1, "", "Serial1"], [46, 3, 1, "", "Serial2"], [46, 3, 1, "", "Serial3"], [46, 3, 1, "", "USB1"], [46, 3, 1, "", "Wire1"], [46, 3, 1, "", "Wire2"], [46, 2, 1, "", "__init__"]], "village.pybpodapi.bpod.hardware.output_channels": [[48, 0, 0, "-", "bpod_output_channels"]], "village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels": [[49, 1, 1, "", "OutputChannel"]], "village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.OutputChannel": [[49, 3, 1, "", "BNC1High"], [49, 3, 1, "", "GlobalCounter1Reset"], [49, 3, 1, "", "GlobalTimer1Cancel"], [49, 3, 1, "", "GlobalTimer1Trig"], [49, 3, 1, "", "Serial1"], [49, 3, 1, "", "SoftCode1"], [49, 3, 1, "", "Valve1"], [49, 2, 1, "", "__init__"]], "village.pybpodapi.bpod.non_blockingsocketreceive": [[51, 1, 1, "", "NonBlockingSocketReceive"], [52, 4, 1, "", "UnexpectedEndOfStream"]], "village.pybpodapi.bpod.non_blockingsocketreceive.NonBlockingSocketReceive": [[51, 2, 1, "", "__init__"]], "village.pybpodapi.bpod.non_blockingstreamreader": [[54, 1, 1, "", "NonBlockingStreamReader"], [55, 4, 1, "", "UnexpectedEndOfStream"]], "village.pybpodapi.bpod.non_blockingstreamreader.NonBlockingStreamReader": [[54, 2, 1, "", "__init__"]], "village.pybpodapi.bpod_modules": [[58, 0, 0, "-", "bpod_module"], [60, 0, 0, "-", "bpod_modules"]], "village.pybpodapi.bpod_modules.bpod_module": [[59, 1, 1, "", "BpodModule"]], "village.pybpodapi.bpod_modules.bpod_module.BpodModule": [[59, 2, 1, "", "__init__"], [59, 2, 1, "", "load_message"]], "village.pybpodapi.bpod_modules.bpod_modules": [[61, 1, 1, "", "BpodModules"]], "village.pybpodapi.bpod_modules.bpod_modules.BpodModules": [[61, 2, 1, "", "__init__"]], "village.pybpodapi.com": [[63, 0, 0, "-", "arcom"], [67, 0, 0, "-", "messaging"], [102, 0, 0, "-", "protocol"], [107, 0, 0, "-", "stderr_buffer"], [109, 0, 0, "-", "stdout_buffer"]], "village.pybpodapi.com.arcom": [[64, 1, 1, "", "ArCOM"], [65, 1, 1, "", "ArduinoTypes"], [66, 1, 1, "", "DataType"]], "village.pybpodapi.com.arcom.ArCOM": [[64, 2, 1, "", "__init__"], [64, 2, 1, "", "bytes_available"], [64, 2, 1, "", "close"], [64, 2, 1, "", "open"]], "village.pybpodapi.com.arcom.ArduinoTypes": [[65, 2, 1, "", "__init__"]], "village.pybpodapi.com.arcom.DataType": [[66, 2, 1, "", "__init__"]], "village.pybpodapi.com.messaging": [[68, 0, 0, "-", "base_message"], [70, 0, 0, "-", "debug"], [72, 0, 0, "-", "end_trial"], [74, 0, 0, "-", "error"], [76, 0, 0, "-", "event_occurrence"], [78, 0, 0, "-", "event_resume"], [80, 0, 0, "-", "parser"], [82, 0, 0, "-", "session_info"], [84, 0, 0, "-", "softcode_occurrence"], [86, 0, 0, "-", "state_occurrence"], [88, 0, 0, "-", "state_transition"], [90, 0, 0, "-", "stderr"], [92, 0, 0, "-", "stdout"], [94, 0, 0, "-", "trial"], [96, 0, 0, "-", "untagged_message"], [98, 0, 0, "-", "value"], [100, 0, 0, "-", "warning"]], "village.pybpodapi.com.messaging.base_message": [[69, 1, 1, "", "BaseMessage"]], "village.pybpodapi.com.messaging.base_message.BaseMessage": [[69, 2, 1, "", "__init__"], [69, 2, 1, "", "check_type"], [69, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.debug": [[71, 1, 1, "", "DebugMessage"]], "village.pybpodapi.com.messaging.debug.DebugMessage": [[71, 2, 1, "", "__init__"], [71, 2, 1, "", "check_type"], [71, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.end_trial": [[73, 1, 1, "", "EndTrial"]], "village.pybpodapi.com.messaging.end_trial.EndTrial": [[73, 2, 1, "", "__init__"], [73, 2, 1, "", "check_type"], [73, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.error": [[75, 1, 1, "", "ErrorMessage"]], "village.pybpodapi.com.messaging.error.ErrorMessage": [[75, 2, 1, "", "__init__"], [75, 2, 1, "", "check_type"], [75, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.event_occurrence": [[77, 1, 1, "", "EventOccurrence"]], "village.pybpodapi.com.messaging.event_occurrence.EventOccurrence": [[77, 2, 1, "", "__init__"], [77, 2, 1, "", "check_type"], [77, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.event_resume": [[79, 1, 1, "", "EventResume"]], "village.pybpodapi.com.messaging.event_resume.EventResume": [[79, 2, 1, "", "__init__"], [79, 2, 1, "", "check_type"], [79, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.parser": [[81, 1, 1, "", "MessageParser"]], "village.pybpodapi.com.messaging.parser.MessageParser": [[81, 2, 1, "", "__init__"], [81, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.session_info": [[83, 1, 1, "", "SessionInfo"]], "village.pybpodapi.com.messaging.session_info.SessionInfo": [[83, 2, 1, "", "__init__"], [83, 2, 1, "", "check_type"], [83, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.softcode_occurrence": [[85, 1, 1, "", "SoftcodeOccurrence"]], "village.pybpodapi.com.messaging.softcode_occurrence.SoftcodeOccurrence": [[85, 2, 1, "", "__init__"], [85, 2, 1, "", "check_type"], [85, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.state_occurrence": [[87, 1, 1, "", "StateOccurrence"]], "village.pybpodapi.com.messaging.state_occurrence.StateOccurrence": [[87, 2, 1, "", "__init__"], [87, 2, 1, "", "check_type"], [87, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.state_transition": [[89, 1, 1, "", "StateTransition"]], "village.pybpodapi.com.messaging.state_transition.StateTransition": [[89, 2, 1, "", "__init__"], [89, 2, 1, "", "check_type"], [89, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.stderr": [[91, 1, 1, "", "StderrMessage"]], "village.pybpodapi.com.messaging.stderr.StderrMessage": [[91, 2, 1, "", "__init__"], [91, 2, 1, "", "check_type"], [91, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.stdout": [[93, 1, 1, "", "StdoutMessage"]], "village.pybpodapi.com.messaging.stdout.StdoutMessage": [[93, 2, 1, "", "__init__"], [93, 2, 1, "", "check_type"], [93, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.trial": [[95, 1, 1, "", "Trial"]], "village.pybpodapi.com.messaging.trial.Trial": [[95, 2, 1, "", "__init__"], [95, 2, 1, "", "check_type"], [95, 2, 1, "", "fromlist"], [95, 2, 1, "", "get_all_timestamps_by_event"], [95, 2, 1, "", "get_events_names"], [95, 2, 1, "", "get_timestamps_by_event_name"]], "village.pybpodapi.com.messaging.untagged_message": [[97, 1, 1, "", "UntaggedMessage"]], "village.pybpodapi.com.messaging.untagged_message.UntaggedMessage": [[97, 2, 1, "", "__init__"], [97, 2, 1, "", "check_type"], [97, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.value": [[99, 1, 1, "", "ValueMessage"]], "village.pybpodapi.com.messaging.value.ValueMessage": [[99, 2, 1, "", "__init__"], [99, 2, 1, "", "check_type"], [99, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.warning": [[101, 1, 1, "", "WarningMessage"]], "village.pybpodapi.com.messaging.warning.WarningMessage": [[101, 2, 1, "", "__init__"], [101, 2, 1, "", "check_type"], [101, 2, 1, "", "fromlist"]], "village.pybpodapi.com.protocol": [[103, 0, 0, "-", "recv_msg_headers"], [105, 0, 0, "-", "send_msg_headers"]], "village.pybpodapi.com.protocol.recv_msg_headers": [[104, 1, 1, "", "ReceiveMessageHeader"]], "village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader": [[104, 3, 1, "", "ENABLE_PORTS_OK"], [104, 3, 1, "", "HANDSHAKE_OK"], [104, 3, 1, "", "LOAD_SERIAL_MESSAGE_OK"], [104, 3, 1, "", "MODULE_EVENT_NAMES"], [104, 3, 1, "", "MODULE_REQUESTED_EVENT"], [104, 3, 1, "", "RESET_SERIAL_MESSAGES"], [104, 3, 1, "", "STATE_MACHINE_INSTALLATION_STATUS"], [104, 3, 1, "", "SYNC_CHANNEL_MODE_OK"], [104, 2, 1, "", "__init__"]], "village.pybpodapi.com.protocol.send_msg_headers": [[106, 1, 1, "", "SendMessageHeader"]], "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader": [[106, 3, 1, "", "DISCONNECT"], [106, 3, 1, "", "ECHO_SOFTCODE"], [106, 3, 1, "", "ENABLE_PORTS"], [106, 3, 1, "", "EXIT_AND_RETURN"], [106, 3, 1, "", "FIRMWARE_VERSION"], [106, 3, 1, "", "GET_MODULES"], [106, 3, 1, "", "GET_TIMESTAMP_TRANSMISSION"], [106, 3, 1, "", "HANDSHAKE"], [106, 3, 1, "", "HARDWARE_DESCRIPTION"], [106, 3, 1, "", "LOAD_SERIAL_MESSAGE"], [106, 3, 1, "", "MANUAL_OVERRIDE_EXEC_EVENT"], [106, 3, 1, "", "NEW_STATE_MATRIX"], [106, 3, 1, "", "OVERRIDE_DIGITAL_HW_STATE"], [106, 3, 1, "", "RESET_CLOCK"], [106, 3, 1, "", "RESET_SERIAL_MESSAGES"], [106, 3, 1, "", "RUN_STATE_MACHINE"], [106, 3, 1, "", "SEND_TO_HW_SERIAL"], [106, 3, 1, "", "SET_MODULE_RELAY"], [106, 3, 1, "", "SYNC_CHANNEL_MODE"], [106, 3, 1, "", "TRIGGER_SOFTCODE"], [106, 3, 1, "", "WRITE_TO_MODULE"], [106, 2, 1, "", "__init__"]], "village.pybpodapi.com.stderr_buffer": [[108, 1, 1, "", "StderrBuffer"]], "village.pybpodapi.com.stderr_buffer.StderrBuffer": [[108, 2, 1, "", "__init__"], [108, 2, 1, "", "close"], [108, 2, 1, "", "detach"], [108, 3, 1, "", "encoding"], [108, 3, 1, "", "errors"], [108, 2, 1, "", "fileno"], [108, 2, 1, "", "flush"], [108, 2, 1, "", "getvalue"], [108, 2, 1, "", "isatty"], [108, 3, 1, "", "newlines"], [108, 2, 1, "", "read"], [108, 2, 1, "", "readable"], [108, 2, 1, "", "readline"], [108, 2, 1, "", "readlines"], [108, 2, 1, "", "seek"], [108, 2, 1, "", "seekable"], [108, 2, 1, "", "tell"], [108, 2, 1, "", "truncate"], [108, 2, 1, "", "writable"], [108, 2, 1, "", "write"], [108, 2, 1, "", "writelines"]], "village.pybpodapi.com.stdout_buffer": [[110, 1, 1, "", "StdoutBuffer"]], "village.pybpodapi.com.stdout_buffer.StdoutBuffer": [[110, 2, 1, "", "__init__"], [110, 2, 1, "", "close"], [110, 2, 1, "", "detach"], [110, 3, 1, "", "encoding"], [110, 3, 1, "", "errors"], [110, 2, 1, "", "fileno"], [110, 2, 1, "", "flush"], [110, 2, 1, "", "getvalue"], [110, 2, 1, "", "isatty"], [110, 3, 1, "", "newlines"], [110, 2, 1, "", "read"], [110, 2, 1, "", "readable"], [110, 2, 1, "", "readline"], [110, 2, 1, "", "readlines"], [110, 2, 1, "", "seek"], [110, 2, 1, "", "seekable"], [110, 2, 1, "", "tell"], [110, 2, 1, "", "truncate"], [110, 2, 1, "", "writable"], [110, 2, 1, "", "write"], [110, 2, 1, "", "writelines"]], "village.pybpodapi.exceptions": [[112, 0, 0, "-", "bpod_error"]], "village.pybpodapi.exceptions.bpod_error": [[113, 4, 1, "", "BpodErrorException"]], "village.pybpodapi.session": [[116, 1, 1, "", "Session"], [117, 1, 1, "", "StreamsWrapper"]], "village.pybpodapi.session.Session": [[116, 2, 1, "", "__init__"], [116, 5, 1, "", "current_trial"]], "village.pybpodapi.session.StreamsWrapper": [[117, 2, 1, "", "__init__"]], "village.pybpodapi.state_machine": [[119, 1, 1, "", "StateMachine"], [120, 0, 0, "-", "conditions"], [122, 0, 0, "-", "global_counters"], [124, 0, 0, "-", "global_timers"], [126, 0, 0, "-", "state_machine_base"], [129, 0, 0, "-", "state_machine_builder"], [132, 0, 0, "-", "state_machine_runner"]], "village.pybpodapi.state_machine.StateMachine": [[119, 2, 1, "", "__init__"], [119, 2, 1, "", "add_state"], [119, 2, 1, "", "build_message"], [119, 2, 1, "", "build_message_32_bits"], [119, 2, 1, "", "set_condition"], [119, 2, 1, "", "set_global_counter"], [119, 2, 1, "", "set_global_timer"], [119, 2, 1, "", "set_global_timer_legacy"], [119, 2, 1, "", "update_state_numbers"]], "village.pybpodapi.state_machine.conditions": [[121, 1, 1, "", "Conditions"]], "village.pybpodapi.state_machine.conditions.Conditions": [[121, 2, 1, "", "__init__"]], "village.pybpodapi.state_machine.global_counters": [[123, 1, 1, "", "GlobalCounters"]], "village.pybpodapi.state_machine.global_counters.GlobalCounters": [[123, 2, 1, "", "__init__"]], "village.pybpodapi.state_machine.global_timers": [[125, 1, 1, "", "GlobalTimers"]], "village.pybpodapi.state_machine.global_timers.GlobalTimers": [[125, 2, 1, "", "__init__"]], "village.pybpodapi.state_machine.state_machine_base": [[127, 4, 1, "", "SMAError"], [128, 1, 1, "", "StateMachineBase"]], "village.pybpodapi.state_machine.state_machine_base.StateMachineBase": [[128, 2, 1, "", "__init__"], [128, 2, 1, "", "add_state"], [128, 2, 1, "", "set_condition"], [128, 2, 1, "", "set_global_counter"], [128, 2, 1, "", "set_global_timer"], [128, 2, 1, "", "set_global_timer_legacy"]], "village.pybpodapi.state_machine.state_machine_builder": [[130, 1, 1, "", "StateMachineBuilder"], [131, 4, 1, "", "StateMachineBuilderError"]], "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder": [[130, 2, 1, "", "__init__"], [130, 2, 1, "", "add_state"], [130, 2, 1, "", "build_message"], [130, 2, 1, "", "build_message_32_bits"], [130, 2, 1, "", "set_condition"], [130, 2, 1, "", "set_global_counter"], [130, 2, 1, "", "set_global_timer"], [130, 2, 1, "", "set_global_timer_legacy"], [130, 2, 1, "", "update_state_numbers"]], "village.pybpodapi.state_machine.state_machine_runner": [[133, 1, 1, "", "StateMachineRunner"], [134, 4, 1, "", "StateMachineRunnerError"]], "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner": [[133, 2, 1, "", "__init__"], [133, 2, 1, "", "add_state"], [133, 2, 1, "", "build_message"], [133, 2, 1, "", "build_message_32_bits"], [133, 2, 1, "", "set_condition"], [133, 2, 1, "", "set_global_counter"], [133, 2, 1, "", "set_global_timer"], [133, 2, 1, "", "set_global_timer_legacy"], [133, 2, 1, "", "update_state_numbers"]], "village.pybpodapi.utils": [[136, 0, 0, "-", "csv"], [139, 0, 0, "-", "date_parser"]], "village.pybpodapi.utils.csv": [[137, 1, 1, "", "Reader"], [138, 1, 1, "", "Writer"]], "village.pybpodapi.utils.csv.Reader": [[137, 2, 1, "", "__init__"]], "village.pybpodapi.utils.csv.Writer": [[138, 2, 1, "", "__init__"]], "village.pybpodapi.utils.date_parser": [[140, 6, 1, "", "parse"]], "village.screen": [[142, 0, 0, "-", "video_worker"]], "village.screen.video_worker": [[143, 1, 1, "", "VideoWorker"]], "village.screen.video_worker.VideoWorker": [[143, 2, 1, "", "__init__"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "exception", "Python exception"], "5": ["py", "property", "Python property"], "6": ["py", "function", "Python function"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:exception", "5": "py:property", "6": "py:function"}, "terms": {"": [51, 106, 119, 128, 130, 133, 145, 146, 149, 151, 153, 155, 158, 165, 166, 169, 171, 177], "0": [22, 24, 26, 28, 30, 59, 108, 110, 119, 128, 130, 133, 148, 149, 169], "000": 166, "05": 169, "07": 169, "08": 169, "0x4": [22, 24, 26, 28, 30, 106], "0x45": [163, 164], "0x64": [163, 164], "1": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 22, 24, 26, 28, 30, 34, 46, 64, 104, 106, 108, 110, 119, 128, 130, 133, 148, 149, 151, 158, 161, 163, 164, 166, 169, 171, 176], "10": [145, 146, 148, 149, 161, 166, 169], "100": [148, 166, 169], "100u": [119, 128, 130, 133], "11": [148, 149], "110": 148, "115200": 64, "12": [145, 146, 148, 149, 166], "120": [145, 146], "125": 148, "125khz": 148, "1280x720": [149, 155], "128gb": 149, "12h": 166, "12v": 148, "13": 149, "14": [151, 158], "142": 148, "145": [145, 146], "1495": 148, "15": [161, 169, 171], "15g": 161, "16": [145, 146, 151, 158], "160": 148, "1600x900": 149, "17": 148, "1800": 171, "19": 148, "1kg": 161, "2": [22, 24, 26, 28, 30, 34, 46, 108, 110, 145, 146, 148, 149, 151, 158, 161, 166, 169, 171, 176], "20": [148, 151, 158], "200": 148, "2000": [145, 146], "20cm": 148, "20la": 148, "20x20": 148, "220": [145, 146], "228": 148, "24": [145, 146, 148, 151, 158, 166], "24h": 166, "25": [119, 128, 130, 133], "250": 128, "2500": 171, "255": [22, 24, 26, 28, 30, 119, 128, 130, 133, 169], "256gb": 148, "2600": 171, "2800": 171, "29": 148, "2a": 148, "2afc_protocol": [22, 24, 26, 28, 30], "2chan": 149, "2m": 148, "2mm": 148, "3": [22, 24, 26, 28, 30, 46, 106, 145, 146, 149, 151, 158, 166, 169, 171, 172], "30": [145, 146, 148], "3000": [145, 146], "300g": 161, "30x30": 148, "32": [119, 130, 133, 148], "35": 104, "3600": [119, 128, 130, 133, 169, 171], "37": 148, "3d": [145, 146, 147, 151, 158, 162, 175], "3gwy4": 148, "3mf": 161, "3mm": 148, "4": [22, 24, 26, 28, 30, 46, 106, 145, 146, 148, 149, 151, 158, 166, 169, 171], "40": [145, 146, 151, 158, 161, 171], "429496": 95, "4300": 148, "4mm": 148, "5": [46, 104, 119, 128, 130, 133, 148, 149, 161, 165], "50": [148, 149, 169, 171], "500": [145, 146, 148, 171], "50cm": 148, "50g": 161, "54": 148, "5m": 148, "5mm": 148, "5v": 148, "6": [46, 106, 148, 166], "600": 169, "60d": 149, "69": 104, "6h": 166, "6mm": 148, "7": [46, 145, 146, 148, 151, 158], "70": [151, 158], "700g": 161, "7295": 95, "79": 148, "8": [46, 148, 151, 158], "80": 148, "85": 169, "8gb": [148, 149], "9": 148, "90": [145, 146], "900": 169, "90g": 161, "95": 148, "98": 148, "99": [148, 149], "A": [16, 119, 128, 130, 133, 145, 146, 149, 165, 166, 169, 171], "AND": [151, 158], "As": [145, 146, 166], "At": [171, 176], "But": [145, 146], "By": [145, 146, 151, 158, 171, 177], "For": [145, 146, 148, 149, 155, 161, 165, 166, 169, 171, 174], "If": [108, 110, 119, 128, 130, 133, 145, 146, 148, 149, 163, 164, 165, 166, 169, 171, 174, 175, 176], "In": [145, 146, 149, 151, 155, 158, 165, 166, 169, 171], "It": [69, 145, 146, 166, 169, 171], "No": [145, 146, 166, 169], "Not": 166, "ON": [165, 177], "On": [145, 146, 151, 158, 165], "One": 169, "Or": [145, 146], "That": [145, 146], "The": [16, 17, 22, 24, 26, 28, 30, 104, 106, 108, 110, 119, 128, 130, 133, 145, 146, 148, 149, 155, 161, 163, 164, 165, 166, 168, 171, 172, 177], "Then": [145, 146, 149], "There": [148, 155], "These": [33, 34, 41, 46, 49, 145, 146, 148, 149, 151, 158, 166, 169, 171], "To": [149, 151, 158, 166, 169, 171, 177], "With": [151, 158], "__init__": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 22, 24, 26, 28, 30, 33, 34, 35, 36, 39, 41, 43, 46, 49, 51, 54, 59, 61, 64, 65, 66, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 104, 106, 108, 110, 116, 117, 119, 121, 123, 125, 128, 130, 133, 137, 138, 143, 169], "_arcom": [26, 28], "_bpodbase__process_opcod": [22, 24, 26, 28, 30], "_bpodbase__update_timestamp": [22, 24, 26, 28, 30], "abl": [145, 146, 156], "about": [116, 145, 146, 151, 158, 161, 169], "abov": [145, 146, 165, 171], "absolut": [108, 110], "abstract": 24, "academi": 156, "access": [145, 146, 151, 153, 157, 158, 165, 166, 169, 174, 175, 176, 177], "accident": [145, 146, 174], "accord": [33, 34, 41, 46, 49], "accordingli": [22, 24, 26, 28, 30, 165], "account": [155, 171], "accur": [165, 166, 171], "accuraci": [161, 169, 171], "achiev": 149, "acid": [145, 146, 172], "acquir": 169, "acquisit": [145, 146], "across": [145, 146], "acryl": [148, 151, 158], "action": [26, 28, 119, 128, 130, 133, 165, 168, 169], "activ": [145, 146, 149, 156, 165, 166, 171, 175, 177], "actual": [119, 130, 133, 149], "actualizar": 147, "ad": [108, 110, 128, 145, 146], "adapt": [151, 158], "add": [22, 24, 26, 28, 30, 119, 128, 130, 133, 145, 146, 147, 149, 155, 177], "add_stat": [119, 128, 130, 133, 169], "addict": [145, 146], "addit": [149, 165, 169, 171], "addition": [151, 158], "address": [155, 163, 164], "adequ": 169, "adjust": [145, 146, 151, 158, 166, 169, 171, 174], "admin": 156, "administ": [145, 146], "administr": [145, 146, 156], "advanc": [145, 146, 149, 169], "advantag": [145, 146], "advis": [145, 146], "affect": [128, 130, 171], "after": [108, 110, 145, 146, 149, 169, 171, 176], "again": 169, "aim": [145, 146], "al": 169, "alarm": [145, 146, 165, 169, 171, 172, 176, 180], "alert": [151, 158], "algorithm": 171, "align": 171, "all": [108, 110, 119, 128, 130, 133, 145, 146, 148, 149, 151, 156, 158, 161, 165, 166, 169, 171, 172, 175, 176, 177], "allow": [145, 146, 149, 151, 155, 156, 158, 165, 166, 168, 169, 171, 176, 177], "along": [149, 165, 175], "alreadi": [24, 108, 110, 169, 174], "also": [145, 146, 151, 153, 155, 158, 161, 166, 169, 171, 177], "altern": [147, 155], "although": [151, 158, 165], "alwai": [108, 110, 145, 146, 165, 166, 169], "am": [145, 146], "amazon": [145, 146], "amount": [145, 146, 169], "an": [16, 43, 59, 64, 77, 79, 85, 101, 108, 110, 119, 128, 130, 133, 143, 145, 146, 151, 155, 158, 160, 161, 165, 166, 169, 171, 175, 180], "analog": [22, 24, 26, 28, 30, 33], "angl": 168, "ani": [17, 108, 110, 119, 128, 130, 133, 145, 146, 149, 151, 155, 158, 165, 169, 171], "anim": [145, 146, 151, 158, 165, 166, 169, 174, 177, 180], "anoth": [145, 146, 151, 158, 165], "antenna": 171, "anyon": [128, 130], "apart": 169, "api": [24, 81], "appear": [149, 165, 166, 169, 177], "append": 169, "appli": 149, "applic": [108, 110], "approach": [145, 146, 169], "appropri": 171, "approxim": [145, 146], "apt": [149, 163, 164], "ar": [17, 22, 24, 26, 28, 30, 95, 108, 110, 119, 128, 130, 133, 145, 146, 148, 149, 151, 155, 158, 163, 164, 165, 166, 169, 171, 174, 176, 177], "arcom": [26, 28], "arduino": 64, "area": [166, 171, 177], "area4": 166, "areas3": 166, "arg": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 169], "argument": [108, 110], "around": [145, 146, 151, 158, 171], "arrang": 161, "arrow": 176, "artifact": 171, "ask": 149, "asleep": [145, 146, 166], "assembl": [148, 175], "assembli": [148, 150, 175], "assess": [145, 146, 172], "assign": [119, 128, 130, 133, 149, 165, 177], "associ": [59, 77, 79, 85, 119, 128, 130, 133, 149], "assum": [145, 146], "attach": [151, 158], "attempt": [108, 110, 165, 166, 176], "attend": [145, 146], "attribut": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 22, 24, 26, 28, 30, 33, 34, 41, 43, 46, 49, 61, 65, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 104, 106, 108, 110, 116, 119, 133], "auditori": [151, 158], "author": 174, "auto": [149, 165], "autom": [151, 158, 171], "automat": [119, 128, 130, 133, 145, 146, 151, 155, 158, 165, 169, 174, 176], "automatis": [145, 146, 151, 158], "avail": [33, 46, 49, 148, 151, 158, 165, 169], "averag": [151, 158, 166], "avers": [145, 146], "aw": [145, 146], "awai": [145, 146], "b": [145, 146], "back": [145, 146, 169, 176], "background": 165, "backup": [157, 175], "bahsrc": 149, "balanc": [151, 158], "bambu": 161, "bambulab": 161, "ban": [145, 146], "basal_weight": [165, 177], "base": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 22, 24, 26, 28, 30, 33, 34, 35, 36, 39, 41, 43, 46, 49, 51, 54, 59, 61, 64, 65, 66, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 104, 106, 108, 110, 116, 117, 119, 121, 123, 125, 128, 130, 133, 137, 138, 143, 145, 146, 148, 151, 158, 165, 169, 171], "base_messag": [91, 93], "baseeventnam": 41, "baselin": [165, 166, 177], "basemessag": [71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101], "bashrc": 149, "basic": [148, 149], "batch": [145, 146], "batteri": [145, 146], "baudrat": [22, 24, 26, 28, 30, 64], "bcontrol": [151, 158], "becaus": [145, 146, 151, 158, 166], "been": [69, 108, 110, 128, 145, 146, 151, 158, 166, 171], "befor": [119, 128, 130, 133, 155, 169, 171, 174], "begin": [171, 176], "behavior": [145, 146, 153, 165, 166, 169, 172, 174, 175, 176, 177], "behavioral_task": 169, "being": [128, 133, 174], "below": [147, 148, 166, 169, 171, 172], "benefit": [145, 146], "best": [145, 146, 151, 158], "better": [145, 146, 149, 151, 158], "between": [22, 24, 26, 28, 30, 64, 119, 128, 130, 133, 145, 146, 165, 166, 169, 171, 174], "bias": [145, 146], "bigger": [22, 24, 26, 28, 30], "bin": 149, "binari": [119, 128, 130, 133], "bit": [119, 130, 133], "black": [171, 176], "blank": 149, "blind": [145, 146], "block": [108, 110, 145, 146], "blocker": 148, "blue": [171, 176], "bnc": [22, 24, 26, 28, 30, 33, 41, 49, 174], "bnc1": 46, "bnc1high": [22, 24, 26, 28, 30, 41, 49], "bnc2": 46, "board": [22, 24, 26, 28, 30, 69, 71, 77, 79, 85, 148], "board_messag": [73, 75, 83, 97, 99], "board_timestamp": [77, 79, 85], "boardmessag": [73, 75, 83, 91, 93, 97, 99], "bonsai": [151, 158], "bool": [22, 24, 26, 28, 30, 39, 41, 128, 133, 169], "boot": [149, 155], "bore": [145, 146, 151, 158], "bot": [145, 146, 149, 157, 166, 174], "botfath": 156, "both": [149, 165, 166, 169, 171, 175], "bottl": [148, 172], "bottom": [148, 153, 161, 165, 177], "boundari": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14], "box": [22, 24, 26, 28, 30, 46, 119, 128, 130, 133, 145, 146, 149, 161, 165, 166, 169, 172, 175, 177], "bpod": [24, 26, 28, 30, 33, 34, 35, 41, 43, 46, 49, 59, 61, 77, 79, 85, 93, 104, 106, 116, 119, 128, 130, 133, 145, 146, 149, 151, 153, 158, 169, 174], "bpod_bas": [22, 24, 26, 28, 30], "bpod_set": 17, "bpod_workspac": [22, 24, 26, 28, 30], "bpodbas": [22, 26, 28, 30], "bpodcomprotocol": 28, "bpodcomprotocolmodul": 30, "bpodio": 22, "brain": [151, 158], "braincircuitsbehaviorlab": 149, "briefli": [145, 146], "bright": 171, "brighter": 169, "browser": [147, 149], "buffer": [108, 110], "bui": 148, "build": [22, 24, 26, 28, 30, 106, 119, 130, 133, 147, 148, 151, 158, 161], "build_messag": [119, 130, 133], "build_message_32_bit": [119, 130, 133], "builder": 130, "built": [171, 175], "button": [165, 168, 177], "buzzer": [145, 146], "byte": [22, 24, 26, 28, 30, 104, 106, 108, 110], "bytes_avail": 64, "c": [106, 145, 146], "cabl": [148, 149, 155], "cad": 148, "cage": [145, 146, 148, 151, 158, 166, 172, 176], "calcul": 169, "calibr": [165, 166, 169, 172, 180], "call": [145, 146, 169], "cam": 166, "cam_framerate_set": 17, "camelcas": 169, "camera": [145, 146, 148, 149, 151, 153, 158, 165, 166, 171, 174], "camera_set": 17, "can": [16, 22, 24, 26, 28, 30, 108, 110, 119, 128, 130, 133, 145, 146, 147, 148, 149, 151, 158, 165, 166, 169, 171, 172, 174, 175, 176, 177], "cannot": [145, 146, 148, 165, 176], "cannula": [145, 146], "cap": [145, 146], "cap_sys_nic": 149, "capac": [151, 158], "capsul": [148, 177], "captur": [119, 128, 130, 133, 165], "card": [149, 175], "carri": [145, 146, 151, 158], "case": [145, 146, 149, 166, 169, 171], "catch": [145, 146], "categori": 17, "caus": [119, 128, 130, 133, 145, 146, 151, 158, 166, 176], "cd": 149, "center": [165, 169], "central": [148, 151, 158, 161, 169], "certain": [151, 158, 166, 169], "challeng": 149, "chamber": [145, 146, 148, 151, 158], "chang": [77, 79, 85, 108, 110, 119, 128, 130, 133, 163, 164, 168, 169, 172, 174, 176, 177], "channel": [22, 24, 26, 28, 30, 33, 34, 46, 49, 106, 119, 128, 130, 133, 166], "channel_nam": [22, 26, 28, 30], "channel_numb": [22, 26, 28, 30], "channel_typ": [22, 26, 28, 30], "channel_valu": [119, 128, 130, 133], "channelnam": [22, 24, 26, 28, 30], "channeltyp": [22, 24, 26, 28, 30], "charact": [104, 106, 108, 110, 119, 128, 130, 133], "chat": [156, 166, 174], "check": [145, 146, 149, 151, 158, 163, 164, 165, 168, 169, 171, 172, 177], "check_typ": [69, 71, 73, 75, 77, 79, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101], "choic": [151, 158, 169], "choos": [149, 169], "chromium": 149, "circuit": [151, 158], "circumst": [145, 146], "citric": [145, 146, 172], "class": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 132, 133, 136, 137, 138, 142, 143, 169], "classmethod": [69, 71, 73, 75, 77, 79, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101], "clean": 172, "clear": 166, "click": [149, 165, 166, 177], "clock": 106, "clone": [149, 169], "close": [22, 24, 26, 28, 30, 64, 108, 110, 145, 146, 166, 168, 176], "close_door2": 176, "closest": 153, "cloud": [145, 146], "cm": 148, "cmdline": 149, "code": [22, 24, 26, 28, 30, 41, 104, 106, 128, 145, 146, 149, 151, 155, 158, 162, 163, 164, 166], "cognit": [145, 146, 151, 158], "collabor": 160, "collect": [151, 158], "color": [171, 174, 176], "columns_head": 138, "com": [26, 28, 73, 75, 83, 91, 93, 97, 99, 148, 149, 151, 158], "combin": [145, 146, 169, 171], "come": [145, 146, 151, 158, 169, 171], "comfort": 149, "command": [22, 24, 26, 28, 30, 104, 149, 156, 165, 166, 175], "comment": 148, "commerci": 155, "common": [145, 146, 166], "commun": [24, 26, 28], "compar": [145, 146, 151, 158, 169], "compat": [128, 130, 145, 146], "competit": [145, 146], "complet": [119, 128, 130, 133, 151, 158, 165, 166, 169, 175, 177], "complex": [151, 158, 169], "compon": [147, 148, 151, 158, 165, 180], "compos": [151, 158], "comprehens": 147, "compress": 106, "comput": [151, 155, 158, 175], "condit": [22, 24, 26, 28, 30, 41, 119, 128, 130, 133, 145, 146, 151, 158, 165, 171], "condition1": [22, 24, 26, 28, 30, 41], "condition_channel": [119, 128, 130, 133], "condition_numb": [119, 128, 130, 133], "conf": 149, "config": 149, "configur": [22, 24, 26, 28, 30, 106, 149, 151, 158, 163, 164, 165, 166, 171, 174, 175, 176], "confirm": [149, 171], "connect": [22, 24, 26, 28, 30, 33, 43, 59, 64, 106, 145, 146, 148, 149, 151, 155, 157, 158, 165, 166, 175], "connector": [148, 151, 158], "consecut": 169, "consequ": [145, 146], "consid": 166, "consist": [151, 158, 169], "constant": [145, 146], "constantli": [145, 146], "construct": 171, "consult": 166, "consum": [22, 24, 26, 28, 30, 143, 166, 169], "consumpt": [151, 158, 169], "contact": [145, 146, 151, 158], "contain": [16, 119, 128, 130, 133, 149, 166, 169, 171, 175], "content": [69, 71, 73, 75, 91, 93, 97, 101, 108, 110], "continu": [145, 146, 151, 158, 165, 169, 171, 176], "contrast": [145, 146], "control": [108, 110, 145, 146, 149, 153, 165], "controller_set": 17, "convent": 169, "convers": 156, "convert": 171, "copi": [149, 156, 175], "correct": [163, 164, 169], "correctli": [163, 164, 166, 168], "correspond": [87, 89, 95, 163, 164, 165, 166, 169], "corridor": [145, 146, 148, 153, 165, 166, 172, 174, 176, 177, 180], "corridor_set": 17, "cost": [145, 146, 148, 151, 158], "could": [145, 146, 166, 169], "count": [119, 128, 130, 133, 166, 171], "counter": [119, 128, 130, 133], "counter_numb": [119, 128, 130, 133], "countri": 149, "cover": [148, 166, 171], "cpu": 149, "cqrobot": [148, 163, 164], "creat": [22, 24, 26, 28, 30, 95, 155, 157, 165, 171, 180], "credenti": 155, "criteria": [145, 146, 169], "critic": 166, "crouch": 171, "csv": [165, 166, 169, 177], "cual": 147, "cue": [145, 146], "current": [22, 24, 26, 28, 30, 43, 108, 110, 116, 133, 145, 146, 151, 155, 158, 165, 166, 169], "current_st": 133, "current_tri": [116, 169], "custom": [149, 151, 158], "cut": [148, 151, 158], "cycl": [165, 174], "cycle_alarm_set": 17, "d": [145, 146, 149, 160], "dac": [149, 174], "dai": [145, 146, 151, 158, 161, 165, 171, 174], "daili": [145, 146], "damag": [145, 146], "dark": [171, 174], "darker": [171, 176], "data": [22, 24, 26, 28, 30, 64, 106, 119, 128, 130, 133, 145, 146, 149, 151, 158, 166, 169, 176, 177, 180], "data_avail": [22, 26, 28, 30], "datafram": [166, 169], "dataset": [151, 158], "date": [140, 177], "dateutil": 149, "daytim": [151, 158, 174], "dc": 148, "de": [145, 146], "debug": 165, "decid": [145, 146], "decis": [145, 146, 169], "decod": [108, 110], "decreas": [145, 146, 151, 158, 169], "def": 169, "default": [16, 108, 110, 165, 166, 169, 177], "defin": [26, 28, 34, 104, 106, 145, 146, 165, 169, 171, 177], "dehydr": [145, 146], "del": 147, "delai": [151, 158], "deliv": [151, 158, 165, 169], "deliveri": 172, "demand": [151, 158], "demo_project": 169, "depend": [145, 146, 148, 149, 151, 158, 169, 171], "depriv": [145, 146], "descript": [12, 16, 17, 22, 24, 26, 28, 30, 43, 119, 128, 130, 133, 165, 176], "descriptor": [108, 110], "design": [145, 146, 149, 151, 153, 158, 166, 171], "desir": [149, 176], "desktop": [22, 24, 26, 28, 30], "detach": [108, 110], "detail": [145, 146, 148, 149, 155, 165], "detect": [145, 146, 163, 164, 165, 174, 176, 177, 180], "determin": [108, 110, 151, 158, 166, 169, 171, 176], "dev": [22, 24, 26, 28, 30, 149], "develop": [151, 158], "devic": [26, 28, 43, 104, 106, 148, 151, 155, 157, 158, 163, 164, 174, 175], "device_set": 17, "df": 169, "df_follow_the_light": 169, "df_habitu": 169, "df_last_sess": 169, "df_previous_sess": 169, "dfrobot": [163, 164], "diagram": 176, "diamet": 148, "dibujo": 147, "dict": [95, 119, 128, 130, 133, 169], "dictionari": [95, 119, 128, 130, 133], "differ": [17, 145, 146, 149, 151, 155, 158, 163, 164, 165, 169, 171], "difficulti": [151, 158, 169], "digit": 106, "direct": [151, 158], "directli": [22, 24, 26, 28, 30, 147], "directori": 149, "directory_set": 17, "dirt": 166, "disabl": [149, 165, 166], "disconnect": [106, 148, 153, 166, 175], "dispens": 148, "displai": [149, 155, 165, 166, 175, 177], "distribut": [145, 146, 149], "dmesg": 149, "do": [145, 146, 155], "doe": [108, 110, 145, 146, 147, 165, 166, 176], "domin": [145, 146], "don": 161, "done": 172, "door": [145, 146, 148, 151, 158, 165, 166, 168, 171, 176], "door2": 169, "down": 156, "download": [147, 148, 149, 160, 175], "drop": [166, 172], "dropbox": 169, "drug": [145, 146], "dtoverlai": 149, "due": [151, 155, 158, 166, 171], "durabl": 148, "durat": [119, 128, 130, 133, 145, 146, 151, 158, 169, 171], "dure": [145, 146, 148, 155, 166, 169, 171], "duti": 172, "dynam": 149, "e": [22, 24, 26, 28, 30, 33, 106, 145, 146, 149, 151, 158, 166], "each": [108, 110, 128, 145, 146, 148, 151, 158, 165, 166, 168, 169, 171], "easi": [145, 146, 161], "easier": 171, "easiest": 155, "easili": 175, "echo": 106, "echo_softcod": 106, "eco": [151, 158], "edit": [149, 156, 165, 177], "effect": [108, 110, 145, 146, 151, 158], "effici": [151, 158], "eip": 149, "either": [147, 165, 169, 175], "el": 147, "elaps": [166, 176], "electrod": [145, 146], "electron": [147, 151, 158], "electrophysiolog": [145, 146], "electrophysiologi": [145, 146], "element": [151, 158, 168], "elev": 171, "elif": 169, "els": [145, 146, 169], "email": 169, "emitt": 148, "empti": [108, 110, 149, 166, 171, 176], "empty_limit": 171, "en": 147, "enabl": [22, 24, 26, 28, 30, 106, 145, 146, 149, 165, 174], "enable_port": [104, 106], "enable_ports_ok": 104, "enable_uart": 149, "encod": [108, 110], "encount": 155, "end": [87, 89, 106, 108, 110, 145, 146, 149, 165, 166, 171], "end_tim": 83, "end_timestamp": 87, "engag": [145, 146], "english": 149, "enhanc": [128, 130], "enough": [171, 172], "enrich": 172, "ensur": [128, 148, 149, 151, 158, 165, 166, 174, 177], "enter": [119, 128, 130, 133, 145, 146, 151, 158, 165, 166, 169, 171, 174, 176], "entir": [108, 110, 148, 151, 158, 175], "entranc": [145, 146, 151, 158, 166], "entri": [81, 151, 158, 165, 171], "enum": [13, 16, 17], "env": [149, 175], "environ": 175, "eof": [108, 110], "equal": [108, 110, 169], "equip": [151, 158], "equival": [22, 24, 26, 28, 30, 106], "error": [101, 108, 110, 166, 171, 176], "escap": [145, 146, 148], "especi": 149, "essenti": [165, 166, 169, 171], "esta": 147, "establish": 165, "estim": [148, 161], "etc": [22, 26, 28, 30, 71, 145, 146, 149, 165, 169], "ethernet": [149, 153, 155], "evalu": 166, "even": [128, 145, 146, 149], "event": [22, 24, 26, 28, 30, 35, 41, 77, 79, 85, 95, 104, 106, 119, 128, 130, 133, 145, 146, 165, 166, 169, 176, 177], "event_id": [77, 79, 85], "event_idx": 35, "event_list": 169, "event_nam": [22, 24, 26, 28, 30, 39, 41, 77, 79, 85, 95], "eventnam": [22, 24, 26, 28, 30], "eventoccurr": 95, "events_nam": 59, "events_occurr": 95, "everi": [22, 24, 26, 28, 30, 145, 146, 149, 169, 172], "everyth": 175, "ex": [119, 128, 130, 133], "exact": 149, "exampl": [22, 24, 26, 28, 30, 95, 119, 128, 130, 133, 171], "exce": [108, 110, 119, 128, 130, 133, 171], "exceed": 166, "excel": [151, 158], "except": [50, 52, 53, 55, 112, 126, 127, 129, 131, 132, 134, 151, 158, 169], "execut": [22, 24, 26, 28, 30, 106, 119, 128, 130, 133, 145, 146, 165, 166], "exhaust": [151, 158], "exist": [108, 110, 119, 128, 130, 133, 180], "exit": [106, 119, 128, 130, 133, 145, 146, 148, 149, 165, 166, 169], "exit_and_return": 106, "exit_sav": 176, "exit_unsav": 176, "expect": 171, "experi": [24, 71, 145, 146, 151, 158, 165, 169], "experiment": [145, 146, 151, 158, 169], "explain": [145, 146, 165], "explan": [149, 165], "explor": [145, 146, 169], "exploratori": [145, 146], "export": [22, 24, 26, 28, 30], "extend": [130, 133, 171], "extens": [22, 24, 26, 28, 30, 41, 145, 146, 148, 166], "extern": [145, 146, 148, 155, 166, 175], "extra_set": [17, 163, 164], "extrem": [145, 146], "ez": 148, "f": [106, 145, 146], "facil": [145, 146], "fact": [145, 146], "facto": [145, 146], "factori": 16, "factory_valu": 16, "fail": [145, 146, 166], "failur": [145, 146, 166], "fall": [145, 146, 169], "fals": [59, 108, 110, 166, 169], "fan": 149, "far": [108, 110], "faster": 149, "faulti": 166, "feed": 165, "feedback": 171, "feel": 148, "fell": 166, "few": [145, 146, 166], "fewer": [151, 158, 166], "fi": 149, "fig1": [145, 146], "filament": [161, 171], "file": [22, 24, 26, 28, 30, 81, 108, 110, 148, 149, 151, 158, 162, 165, 166, 169, 174, 175, 177], "filenam": 169, "fileno": [108, 110], "filestream": [137, 138], "final": [22, 24, 26, 28, 30, 145, 146, 169], "final_task": 169, "find": [22, 26, 28, 30, 151, 158, 169], "find_first_occurr": 169, "find_module_by_nam": [22, 24, 26, 28, 30], "finish": [145, 146, 169], "finit": 128, "fire": 149, "firmwar": [22, 24, 26, 28, 30, 33, 34, 41, 46, 49, 106, 149], "firmware_vers": [59, 106], "first": [104, 106, 119, 128, 130, 133, 145, 146, 155, 166, 169, 171], "first_pok": 169, "fit": 148, "fix": [145, 146, 172], "flex": 148, "flexibl": [145, 146], "flip": [22, 24, 26, 28, 30], "float": [16, 77, 79, 85, 95, 119, 128, 130, 133], "floor": 171, "fluctuat": [145, 146], "flush": [108, 110], "focus": 165, "folder": [22, 24, 26, 28, 30, 149, 169, 174, 177], "follow": [119, 128, 130, 133, 148, 149, 155, 156, 161, 163, 164, 165, 166, 169, 174, 175, 176, 177], "follow_the_light": 169, "food": [145, 146, 148, 151, 158, 172], "footag": 166, "forag": [145, 146, 151, 158], "forc": [145, 146], "force_hotplug": 149, "force_stop": 169, "forcibli": 155, "format": 165, "found": [165, 169], "foundat": 148, "four": [145, 146, 171], "frame": [143, 148], "free": [145, 146, 148, 155, 171], "freeli": [145, 146, 151, 158], "freez": 166, "frequent": 166, "fri": [145, 146], "from": [22, 24, 26, 28, 30, 43, 51, 54, 69, 73, 75, 77, 79, 83, 85, 91, 97, 99, 104, 108, 110, 119, 128, 130, 133, 145, 146, 148, 151, 155, 156, 158, 165, 166, 169, 171, 174, 175], "fromlist": [69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101], "full": [145, 146, 147, 149, 151, 158, 161], "fulli": [169, 171], "func": 149, "func2": 149, "function": [22, 24, 26, 28, 30, 139, 165, 166, 168, 169, 172], "further": [108, 110, 168], "g": [22, 24, 26, 28, 30, 33, 106, 145, 146, 151, 158, 166], "gather": [151, 158], "gener": [35, 145, 146, 149, 151, 158, 161, 166, 169], "gentli": 168, "get": [17, 95, 106, 116, 145, 146, 149, 163, 164, 168, 169, 180], "get_all_timestamps_by_ev": 95, "get_descript": 17, "get_event_nam": 35, "get_events_nam": 95, "get_index": 17, "get_indic": 17, "get_latest_qimag": 143, "get_modul": 106, "get_text": 17, "get_timestamp_transmiss": 106, "get_timestamps_by_event_nam": 95, "get_typ": 17, "get_valu": 17, "get_valve_tim": 169, "getvalu": [108, 110], "git": 149, "github": [149, 151, 156, 158, 160, 174], "give": [145, 146, 149, 169], "given": [119, 128, 130, 133, 145, 146, 169], "glad": 160, "glass": 148, "global": [119, 128, 130, 133, 149], "global_count": 128, "global_tim": 128, "globalcount": 128, "globalcounter1end": [22, 24, 26, 28, 30, 41], "globalcounter1reset": [22, 24, 26, 28, 30, 49], "globalcounter_end": [22, 24, 26, 28, 30, 41], "globalcounterreset": [22, 24, 26, 28, 30, 49], "globaltim": 128, "globaltimer1cancel": [22, 24, 26, 28, 30, 49], "globaltimer1end": [22, 24, 26, 28, 30, 41], "globaltimer1start": [22, 24, 26, 28, 30, 41], "globaltimer1trig": [22, 24, 26, 28, 30, 49], "globaltimer_end": [22, 24, 26, 28, 30, 41], "globaltimer_start": [22, 24, 26, 28, 30, 41], "globaltimercancel": [22, 24, 26, 28, 30, 49], "globaltimertrig": [22, 24, 26, 28, 30, 49], "gmail": [151, 158], "go": [145, 146, 149, 155, 156, 169, 174, 177], "goe": 169, "good": [145, 146], "gpiod": 149, "gpl": [151, 158], "green": [171, 176], "group": [17, 151, 156, 158, 165, 166], "gui": [169, 175, 180], "gui_tabs_restrict": 169, "guidanc": 148, "guillotin": [145, 146], "h": 106, "ha": [108, 110, 145, 146, 149, 151, 158, 166, 169, 171, 176], "hab": [151, 158], "habitu": 169, "had": [145, 146], "half": 166, "hand": [145, 146], "handl": [22, 24, 26, 28, 30, 119, 128, 130, 133, 145, 146, 148, 151, 158], "handler": [22, 24, 26, 28, 30], "handshak": [22, 24, 26, 28, 30, 104, 106], "handshake_ok": 104, "happen": [145, 146], "hard": [145, 146, 169], "harder": [145, 146], "hardwar": [22, 24, 26, 28, 30, 35, 106, 119, 128, 130, 133, 151, 157, 158, 166], "hardware_descript": 106, "hardwareinfocontain": 43, "hat": [151, 158], "have": [69, 108, 110, 128, 145, 146, 149, 151, 158, 161, 166, 169, 171, 175], "hdmi": [148, 149], "header": [104, 106], "health": [145, 146], "heartbeat": [157, 166], "heavier": 148, "help": [147, 155, 165, 169, 171], "helper": 169, "henc": [145, 146], "here": [128, 130, 148, 149, 165, 169, 175], "hidden_set": 17, "hide": 169, "high": [151, 158, 166, 169], "higher": [145, 146], "highest": 149, "hint": [108, 110], "histori": 81, "hit": [108, 110], "hold": [128, 133, 171], "holidai": [145, 146], "home": [148, 149, 161, 166, 169, 175, 176], "homecag": [145, 146], "host_timestamp": [69, 71, 73, 75, 77, 79, 85, 87, 89, 91, 93, 97, 99, 101], "hour": [145, 146, 151, 158, 161, 169], "hourli": 166, "hourly_alarm_set": 17, "hous": [145, 146], "hover": 165, "how": [145, 146, 148, 165, 169, 171], "howev": [145, 146, 149, 155], "http": 149, "human": [145, 146, 151, 158], "humid": [165, 168], "hundr": [145, 146], "hw_info_contain": 43, "hw_output": 35, "hx711": [148, 163, 164], "hygien": 172, "i": [16, 17, 22, 24, 26, 28, 30, 34, 64, 104, 106, 108, 110, 128, 130, 133, 145, 146, 148, 149, 153, 155, 158, 160, 163, 164, 165, 169, 171, 172, 174, 175, 176, 177], "i2c": [163, 164], "i2cdetect": [163, 164], "id": [22, 24, 26, 28, 30, 59, 71, 148, 156, 174, 177], "ideal": 171, "identifi": [149, 166, 171], "illumin": [148, 169, 171], "iloc": 169, "imag": [149, 162, 165, 171, 175], "immedi": [108, 110, 145, 146, 149], "impact": [145, 146, 151, 158], "implant": [145, 146], "implement": [108, 110, 145, 146, 169], "impli": [145, 146], "import": 169, "improv": [145, 146, 151, 158], "inact": 165, "inch": 148, "includ": [116, 145, 146, 149, 151, 158, 165, 169, 172, 175], "increas": [145, 146, 151, 158, 169], "index": [17, 77, 79, 85], "indic": [108, 110, 145, 146, 151, 158, 166, 171, 176], "individu": [145, 146, 151, 158, 171], "ineffici": 128, "info": [165, 169], "infonam": 83, "inform": [43, 71, 116, 165, 166, 169, 172], "infovalu": 83, "infrar": 171, "inherit": 169, "ini": 174, "init": 169, "initi": [22, 24, 26, 28, 30, 106, 151, 158, 169, 176, 180], "inject": [145, 146], "inlin": 147, "input": [22, 24, 26, 28, 30, 34, 35, 41, 46, 106, 119, 128, 130, 133], "input_matrix": 128, "insert": [149, 175], "insid": [145, 146, 148, 149, 151, 158, 166, 169, 172, 176], "instal": [150, 151, 155, 158, 163, 164, 175], "instanc": [119, 128, 130, 133], "instead": 149, "instruct": [145, 146, 148, 149, 150, 155, 156, 165, 166, 175], "int": [16, 17, 22, 24, 26, 28, 30, 59, 77, 79, 85, 119, 128, 130, 133, 169], "intak": [145, 146, 166], "integ": [119, 128, 130, 133], "integr": [145, 146, 151, 158], "intens": 169, "intent": [145, 146], "inter": 169, "interact": [24, 108, 110, 151, 158], "interest": [145, 146], "interfac": [64, 148, 149], "intern": [119, 128, 130, 133, 148], "internet": [145, 146, 149, 155, 166, 175], "interpret": 149, "interv": 169, "interven": [145, 146], "intervent": [145, 146, 151, 158, 176], "introduc": [145, 146], "invalid": 166, "investig": 166, "invit": [145, 146], "involv": [145, 146, 151, 158, 169], "io": [108, 110], "ip": 155, "ir": 148, "is_condit": [22, 24, 26, 28, 30, 39, 41], "is_global_counter_end": [22, 24, 26, 28, 30, 39, 41], "is_global_timer_cancel": [22, 24, 26, 28, 30, 39, 41], "is_global_timer_end": [22, 24, 26, 28, 30, 39, 41], "is_global_timer_start": [22, 24, 26, 28, 30, 39, 41], "is_global_timer_trigg": [22, 24, 26, 28, 30, 39, 41], "is_run": [128, 133], "is_state_tim": [22, 24, 26, 28, 30, 39, 41], "isatti": [108, 110], "iso": [149, 162], "issu": [155, 160, 165, 166], "item": [149, 165, 169], "iti_st": 169, "iti_tim": 169, "its": [16, 145, 146, 149, 151, 153, 158, 165, 166, 176, 177], "ivar": 128, "j": 106, "jitteri": 149, "john": [22, 24, 26, 28, 30], "jump": [149, 171], "just": [145, 146, 169], "k": 106, "keep": [128, 130, 145, 146, 148], "kei": [16, 17, 95, 119, 128, 130, 133, 151, 158], "kept": [128, 130], "kernel": 149, "keyboard": [149, 153, 155, 175], "kg": 148, "khz": 148, "kind": [145, 146], "know": [145, 146, 165], "known": 168, "kwd": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14], "l": 106, "lab": [145, 146, 151, 158], "lamp": 171, "languag": 149, "larg": [148, 151, 158, 166, 171], "larger": [151, 158, 169], "laser": [145, 146, 148, 151, 158], "last": [145, 146, 166, 169, 171], "last_task": 169, "later": 169, "latest": [143, 165], "launch": [165, 166, 176], "launch_auto": 176, "lead": 176, "learn": [145, 146, 151, 158, 169], "least": [166, 169, 171], "leav": [145, 146, 165], "led": [22, 24, 26, 28, 30, 33, 148, 165], "left": [148, 161, 165, 169], "left_easi": 169, "left_hard": 169, "left_poke_act": 169, "left_valve_opening_tim": 169, "legaci": [119, 128, 130, 133], "legal": [151, 158], "len": 169, "length": [108, 110], "less": [128, 145, 146, 149, 166], "let": [151, 158, 169], "level": 169, "libitum": [145, 146], "libportaudio2": 149, "libqt5multimedia5": 149, "librari": [128, 130], "licens": [151, 158, 169], "lick": 169, "lick_teach": 169, "lid": [148, 151, 158], "light": [145, 146, 148, 165, 166, 169, 171, 174], "light_intensity_high": 169, "light_intensity_low": 169, "lighter": 176, "like": [22, 26, 28, 30, 71, 128, 130, 145, 146, 151, 158, 160, 166], "line": [71, 81, 108, 110, 149], "link": [119, 128, 130, 133, 149, 151, 158], "linux": 149, "list": [16, 17, 22, 24, 26, 28, 30, 59, 81, 87, 89, 95, 108, 110, 116, 119, 128, 130, 133, 150, 165, 166, 169, 174, 175], "listen": [119, 128, 130, 133], "lite": 155, "live": [151, 158], "ll": [148, 155, 161], "lo": 147, "load": [22, 24, 26, 28, 30, 59, 106], "load_cont": 81, "load_messag": 59, "load_serial_messag": [22, 24, 26, 28, 30, 104, 106], "load_serial_message_ok": 104, "locat": [145, 146, 166, 171, 177], "locomotor": [145, 146], "log": [155, 165, 177], "logic": [22, 24, 26, 28, 30, 130, 133, 169], "login": 149, "long": [145, 146, 151, 158, 166], "longer": [145, 146], "longitudin": [145, 146], "look": 169, "loop": [22, 24, 26, 28, 30, 143], "loop_handl": [22, 24, 26, 28, 30], "loop_interv": [119, 128, 130, 133], "loop_mod": [119, 128, 130, 133], "lot": [128, 130, 169], "loud": [145, 146], "low": [151, 158, 166, 169], "lower_cas": 169, "lumin": 171, "m": [106, 149, 171], "machin": [22, 24, 26, 28, 30, 87, 89, 119, 128, 130, 133, 169, 180], "made": [145, 146, 151, 158, 169], "magenta": 171, "mai": [69, 145, 146, 149, 166, 169, 171, 176], "main": [35, 149, 172, 174, 175], "main_set": 17, "maintain": [145, 146, 172], "mainten": [148, 180], "make": [145, 146, 148, 149, 169, 171, 177], "mal": 147, "malfunct": 166, "manag": [149, 169, 172, 175], "mandatori": 169, "mani": [145, 146, 166, 171], "manifest": 128, "manipul": [145, 146, 176], "manual": [22, 26, 28, 30, 106, 145, 146, 147, 149, 151, 158, 165, 169, 172, 176], "manual_overrid": [22, 26, 28, 30], "manual_override_exec_ev": 106, "margin": 171, "marinraf": [151, 158], "mark": 171, "mask": 172, "match": 149, "matlab": [128, 130], "matrix": [106, 119, 128, 130, 133], "max_stat": [121, 123, 125], "maxim": [145, 146], "maximum": [145, 146, 169, 171], "maximum_dur": [165, 169], "maximum_number_of_tri": 165, "md": 169, "mean": 169, "meant": [145, 146], "measur": [145, 146], "mechan": [151, 158], "memori": [145, 146], "mention": 161, "menu": [165, 169], "messag": [22, 24, 26, 28, 30, 59, 69, 73, 75, 77, 79, 81, 83, 85, 91, 93, 97, 99, 101, 104, 106, 119, 130, 133, 165, 166, 169, 177], "message_api": 24, "message_id": [22, 24, 26, 28, 30], "messageapi": 24, "met": 169, "meta_output_nam": 128, "meth": 81, "method": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 22, 24, 26, 28, 30, 33, 34, 35, 36, 39, 41, 43, 46, 49, 51, 54, 59, 61, 64, 65, 66, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 104, 106, 108, 110, 116, 117, 119, 121, 123, 125, 128, 130, 133, 137, 138, 143], "metric": 169, "mg995": 148, "mice": [145, 146, 148, 151, 158, 172], "micro": [148, 149], "microsecond": 128, "middl": 169, "might": 171, "millilit": 169, "min": [145, 146, 166, 169], "mind": [128, 130, 151, 158], "mini": [151, 158], "minim": 171, "minimum": [145, 146, 151, 158, 166, 169, 176], "minimum_dur": 169, "minor": 171, "minut": [161, 165, 166], "misconfigur": 166, "miss": [145, 146, 166], "mistak": 171, "mistakenli": 166, "mm": [145, 146, 148], "mode": [22, 24, 26, 28, 30, 106, 165, 174, 176], "model": [22, 24, 26, 28, 30, 81, 161, 163, 164], "modif": [145, 146], "modifi": [149, 163, 164, 165, 169], "modul": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 18, 19, 20, 21, 22, 24, 26, 28, 30, 31, 35, 37, 43, 44, 47, 57, 59, 62, 67, 102, 104, 106, 111, 118, 135, 141, 149], "module_event_nam": 104, "module_nam": 59, "module_requested_ev": 104, "moment": [145, 146], "mon": [145, 146], "mondai": [145, 146, 165], "monipol": 169, "monitor": [119, 128, 130, 133, 145, 146, 149, 151, 153, 158, 168, 177], "monopol": [145, 146], "montar": 147, "month": [145, 146, 151, 158, 166, 172], "more": [108, 110, 145, 146, 151, 158, 165, 166, 169], "moreov": [145, 146, 151, 158], "morn": [145, 146], "most": [108, 110, 145, 146, 151, 158, 165, 166], "motiv": [145, 146, 151, 158], "motor": [147, 149, 151, 153, 158, 168], "motor_set": 17, "mount": 148, "mous": [145, 146, 148, 149, 151, 153, 155, 158, 169, 171, 175], "move": [169, 171], "msg": [59, 108, 110], "msg_id": 59, "much": [145, 146], "multi": [151, 158], "multimedia": 149, "multipl": [145, 146, 166, 169, 171], "must": [33, 34, 41, 46, 49, 108, 110, 119, 128, 130, 133, 145, 146, 156, 165, 168, 169, 171, 174], "mv": 172, "my": [145, 146], "my_bpod": [22, 24, 26, 28, 30], "n_condit": 121, "n_global_count": 123, "n_global_tim": 125, "n_serial_ev": 59, "name": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 22, 24, 26, 28, 30, 33, 35, 66, 71, 77, 79, 85, 87, 89, 95, 104, 106, 119, 128, 130, 133, 165, 169, 177], "name_of_the_project": 169, "nan": 169, "nano": 149, "navig": [145, 146, 149, 168], "nearbi": [145, 146], "necessari": [145, 146, 149, 151, 158, 172, 175], "necessarili": [145, 146], "need": [145, 146, 148, 151, 155, 158, 161, 169, 171, 172, 175], "neg": [108, 110], "nest": [151, 158], "net_port": 24, "network": 155, "neurolux": [145, 146], "never": [156, 166, 174], "new": [22, 24, 26, 28, 30, 106, 108, 110, 145, 146, 149, 156, 165, 169, 180], "new_sma_s": 24, "new_state_matrix": 106, "newbot": 156, "newlin": [108, 110], "next": [149, 165, 169, 176, 177], "next_session_tim": [165, 177], "next_set": [165, 177], "next_task": 169, "night": [145, 146, 165, 166, 171, 174], "nighttim": [151, 158, 174], "nobodi": [145, 146], "noir": [148, 149], "nois": 171, "non": [108, 110, 155], "none": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 17, 22, 24, 26, 28, 30, 59, 69, 71, 73, 75, 77, 79, 83, 85, 91, 93, 95, 97, 99, 101, 108, 110, 116, 119, 128, 130, 133, 138, 143, 149, 165, 169], "normal": [145, 146], "not_allow": 171, "note": [149, 171], "notif": [151, 158, 174], "now": [106, 149, 155, 169, 171, 175], "number": [22, 24, 26, 28, 30, 106, 108, 110, 119, 128, 130, 133, 145, 146, 148, 149, 165, 166, 169, 171], "o": [30, 106, 155, 175], "object": [16, 17, 22, 24, 26, 28, 30, 33, 34, 35, 36, 39, 43, 46, 49, 51, 54, 59, 61, 64, 65, 66, 69, 81, 104, 106, 108, 110, 116, 117, 121, 123, 125, 128, 137, 138, 169], "objectivis": [145, 146], "observ": 171, "obtain": [43, 145, 146, 156, 174, 177], "occasion": [145, 146], "occup": [151, 158], "occupi": [145, 146, 171], "occur": [119, 128, 130, 133, 166, 171, 176], "occurr": [87, 89, 95, 169], "ocean": 148, "off": 165, "off_messag": [119, 128, 130, 133], "offer": [151, 158], "offset": [108, 110], "often": [145, 146, 151, 158, 166], "omit": [108, 110], "on_messag": [119, 128, 130, 133], "on_set_delai": [119, 128, 130, 133], "onc": [145, 146, 153, 155, 165, 166, 169, 172, 175, 176], "one": [22, 24, 26, 28, 30, 106, 108, 110, 119, 128, 130, 133, 145, 146, 149, 151, 158, 165, 166, 169, 171], "oneset_trigg": [119, 128, 130, 133], "onli": [108, 110, 143, 145, 146, 149, 166, 169, 171, 175], "online_plot": 169, "onto": 175, "opb100": 148, "opb100z": 148, "opcod": [22, 24, 26, 28, 30], "open": [22, 24, 26, 28, 30, 64, 145, 146, 149, 155, 156, 160, 161, 165, 166, 168, 169, 175, 176], "open_door2": 176, "opencv": [143, 149], "oper": [108, 110, 145, 146, 149, 151, 155, 158, 171, 175], "optim": [145, 146, 151, 158, 161, 171], "option": [22, 24, 26, 28, 30, 149, 151, 155, 158, 165], "optogenet": [145, 146], "orang": 176, "order": [149, 166], "ordered_list_of_ev": 169, "organ": [145, 146, 148], "orient": 161, "origin": [69, 128, 130], "oserror": [108, 110], "oshw": [151, 158], "osmot": [145, 146], "other": [145, 146, 148, 149, 151, 153, 155, 156, 158, 166, 169, 171], "other_vari": 169, "otherwis": [22, 24, 26, 28, 30, 169], "our": [145, 146, 151, 158, 160, 169], "out": [22, 26, 28, 30, 145, 146, 151, 158, 169, 171], "outag": [145, 146, 166], "output": [22, 24, 26, 28, 30, 34, 35, 49, 119, 128, 130, 133, 169], "output_act": [119, 128, 130, 133, 169], "output_matrix": 128, "outputchannel": [22, 24, 26, 28, 30], "outsid": [145, 146, 171, 174], "over": [145, 146, 149, 165, 166, 175], "overrid": [22, 24, 26, 28, 30, 106, 108, 110], "override_digital_hw_st": 106, "overview": 180, "own": [145, 146, 149, 151, 158, 169, 175, 176], "p": 149, "p1": 161, "pa1_port1in": [22, 24, 26, 28, 30, 41], "pace": [145, 146, 151, 158], "packag": 149, "page": [147, 149, 155, 160], "pair": [145, 146], "panda": 149, "panel": 149, "para": 147, "param": [22, 24, 26, 28, 30, 64, 119, 128, 130, 133], "paramet": [22, 24, 26, 28, 30, 35, 39, 41, 43, 59, 77, 79, 81, 85, 87, 89, 95, 99, 119, 128, 130, 133, 145, 146, 165, 169, 171, 174, 177], "pars": 81, "part": [145, 146, 147, 150, 151, 158, 161, 175], "particip": [156, 166], "particular": [16, 145, 146], "pass": [145, 146, 166, 169], "password": 149, "past": [145, 146], "path": [22, 24, 26, 28, 30, 116, 143, 149], "pattern": 149, "paus": [145, 146], "pc": 69, "pd": 169, "pdf": 147, "pegar": 147, "penalti": [145, 146], "per": [145, 146, 151, 158, 166, 169], "percentag": [145, 146], "perceptu": [145, 146], "perfectli": 171, "perform": [26, 28, 145, 146, 149, 151, 155, 158, 165, 169, 176], "performance_last_sess": 169, "performance_previous_sess": 169, "perhap": [145, 146], "period": [145, 146, 151, 158, 165, 169], "peripher": [145, 146], "permit": 171, "person": [145, 146], "pharmacolog": [145, 146], "phase": [145, 146], "phone": 155, "photog": 166, "physic": [149, 166], "pi": [145, 146, 148, 151, 153, 155, 158, 165, 175], "pick": 169, "piec": [145, 146, 175], "pieza": 147, "pin2": 149, "pipelin": [145, 146], "pixel": [166, 171], "pla": 161, "place": [145, 146, 153, 169, 177], "plai": [151, 158, 165, 166], "plan": 175, "plastic": [145, 146, 148, 151, 158], "platform": 174, "pleas": 147, "plot": [165, 166, 169, 180], "plu": [145, 146], "plug": [151, 158], "plugin": 149, "po": [108, 110], "point": [145, 146, 175, 176], "poke": 169, "poner": 147, "port": [22, 24, 26, 28, 30, 41, 46, 106, 119, 128, 130, 133, 149, 151, 153, 158, 165, 169, 174], "port1": [22, 24, 26, 28, 30, 41, 46, 169], "port1in": [22, 24, 26, 28, 30, 41, 169], "port1lit": [119, 128, 130, 133], "port1out": 95, "port2": [46, 169], "port2in": [95, 169], "port2out": 95, "port3": [46, 169], "port3in": [95, 169], "port3lit": [119, 128, 130, 133], "port3out": 95, "port4": 46, "port5": 46, "port6": 46, "port7": 46, "port8": 46, "port_vari": 169, "posit": [108, 110, 119, 128, 130, 133, 145, 146, 151, 153, 158, 165], "possibl": [17, 149, 151, 158, 169, 171, 176], "postur": 171, "potenti": 166, "power": [145, 146, 148, 149, 151, 155, 158, 166], "practic": [145, 146], "pre": [145, 146, 149, 175], "preced": [145, 146], "precis": 128, "predict": [145, 146, 151, 158], "prefer": [151, 158, 175], "preinstal": 149, "premis": [145, 146], "present": [149, 166, 174], "preset": [145, 146], "press": 168, "prevent": [145, 146, 148, 165, 166, 169, 174], "preview": 177, "previou": [145, 146], "previous": [119, 128, 130, 133], "price": 148, "principl": [145, 146], "print": [93, 145, 146, 147, 151, 158, 162], "printabl": 175, "priorit": 149, "privat": [26, 28, 166, 174], "pro": [149, 174], "probe": [145, 146], "problem": [145, 146, 166, 172], "proce": [149, 175], "procedur": 180, "process": [22, 24, 26, 28, 30, 51, 54, 73, 75, 83, 91, 97, 99, 145, 146, 151, 158, 166, 169, 171], "program": [128, 145, 146, 175], "progress": [145, 146, 165, 169, 172], "prohibit": 166, "project": [151, 158, 160, 177], "prolong": 166, "promot": [151, 158], "promptli": [145, 146], "proper": 172, "properli": [149, 172], "properti": [116, 169], "prosoci": [145, 146], "protect": [145, 146, 151, 158], "protocol": [22, 24, 26, 28, 30, 93, 151, 158, 165, 177, 180], "provid": [108, 110, 145, 146, 147, 148, 149, 151, 158, 161, 165, 166, 171, 172, 175], "pulseaudio": 149, "pump": [145, 146, 148, 165, 169], "punish": [145, 146, 169], "punish_condit": 169, "punish_st": 169, "punishment_tim": 169, "purchas": [148, 175], "purpos": [145, 146, 151, 158], "push": [148, 168], "put": [145, 146], "pwm": [22, 24, 26, 28, 30, 33, 149], "pwm1": [119, 128, 130, 133, 169], "pwm2": [119, 128, 130, 133, 169], "pwm3": 169, "py": [81, 99, 149, 163, 164, 169, 175], "pybod": [145, 146], "pybpodapi": [22, 24, 26, 28, 30, 128, 130], "pybpodgui_plugin": [73, 75, 81, 83, 91, 93, 97, 99], "pyqt5": 149, "pyseri": 149, "python": [64, 128, 130, 151, 158, 163, 164, 165, 169, 175], "python3": 149, "qimag": 143, "qobject": 143, "qthread": 143, "qtmultimedia": 149, "qualiti": [145, 146, 148], "qualnam": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14], "quantifi": [145, 146], "quantit": [145, 146], "question": [145, 146], "quickli": [145, 146, 176], "r": 106, "rain": [151, 158], "rais": [108, 110], "ram": 149, "random": 169, "rang": [119, 128, 130, 133, 151, 158, 171], "rare": [145, 146], "raspberri": [145, 146, 151, 153, 155, 158, 163, 164, 165, 175], "raspi": [149, 155], "rat": [145, 146, 151, 158], "raw": [161, 165], "rca": 148, "re": [145, 146, 149, 165], "reach": [108, 110, 145, 146, 165, 169, 176], "react": [145, 146], "reactiv": 166, "read": [51, 54, 108, 110, 143, 166, 168], "readabl": [108, 110], "reader": [145, 146, 148, 151, 153, 158, 165, 166, 171, 177], "readi": [149, 169, 175, 176], "readlin": [108, 110], "readm": 169, "ready_to_initi": 169, "real": [151, 158, 165, 180], "realli": 149, "realvnc": 155, "reason": [145, 146, 155, 171], "reboot": 149, "receiv": [22, 26, 28, 30, 43, 104, 148, 151, 156, 158, 169, 175, 180], "recent": [151, 158, 165], "recogn": [149, 163, 164], "recogniz": 149, "recommend": [155, 161], "record": [145, 146, 165, 169, 171, 177], "rectangl": 171, "red": [171, 176], "reduc": [128, 145, 146, 169], "reduct": [151, 158], "reenter": [145, 146], "refer": [149, 165, 177], "referenc": [119, 128, 130, 133], "reflect": 171, "refractori": [165, 169], "refractory_period": 169, "regard": [145, 146, 151, 158], "regardless": [149, 155], "regist": [22, 24, 26, 28, 30, 169], "register_valu": 169, "regress": 169, "regul": [145, 146, 151, 158], "rel": [108, 110], "relai": 106, "relaunch": 166, "releas": [22, 24, 26, 28, 30], "reliabl": [145, 146, 148, 151, 158, 171], "reload": 149, "remain": [166, 171, 174, 176], "rememb": 169, "remot": [145, 146, 149, 151, 153, 157, 158, 166, 175, 176], "remov": [145, 146, 149, 151, 158, 172], "render": [149, 165], "repeat": [128, 145, 146], "repetit": [95, 145, 146, 151, 158], "replac": [119, 130, 133, 149, 161], "report": [145, 146, 160, 166, 172], "repositori": [149, 151, 158, 162, 169, 174], "repres": [24, 43, 69, 71, 73, 75, 77, 79, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 169, 171, 176, 177], "represent": [16, 17], "reproduc": [145, 146], "request": [26, 28, 104, 106], "requir": [145, 146, 151, 158, 161, 166, 169, 171, 172, 175, 176, 177], "research": [145, 146, 151, 158], "reserv": [145, 146], "reset": [22, 24, 26, 28, 30, 106], "reset_clock": 106, "reset_serial_messag": [22, 24, 26, 28, 30, 104, 106], "resolut": [149, 155], "resolv": [145, 146, 165, 166, 176], "resourc": [151, 158], "respond": [145, 146, 169, 180], "respons": [145, 146, 151, 158, 166], "response_tim": 169, "rest": [145, 146, 149], "restart": [145, 146, 166], "restrict": [166, 169], "result": 166, "retriev": [22, 24, 26, 28, 30, 108, 110, 166], "return": [17, 22, 24, 26, 28, 30, 35, 39, 41, 64, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 106, 108, 110, 116, 119, 128, 130, 133, 143, 165, 169, 176], "review": [166, 172, 175], "reward": [145, 146, 151, 158, 169], "reward_amount_ml": 169, "reward_st": 169, "reward_state_left": 169, "reward_state_right": 169, "rfid": [145, 146, 149, 151, 153, 158, 161, 165, 166, 171, 176, 177], "rgba8": 143, "right": [148, 149, 161, 165, 169], "right_easi": 169, "right_hard": 169, "right_poke_act": 169, "right_valve_opening_tim": 169, "rigid": 148, "rigor": [151, 158], "rodent": [145, 146, 151, 158], "room": [145, 146, 165, 171, 174], "root": [149, 166], "routin": 172, "row": [69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 166, 177], "rpi": 174, "rtype": [22, 24, 26, 28, 30], "run": [22, 24, 26, 28, 30, 106, 116, 128, 133, 143, 145, 146, 151, 158, 163, 164, 165, 169, 175, 176], "run_asap": [22, 24, 26, 28, 30], "run_clos": [166, 176], "run_first": [166, 176], "run_open": [166, 176], "run_state_machin": [22, 24, 26, 28, 30, 104, 106], "run_villag": [165, 175], "safe": [145, 146, 171], "safeti": 166, "same": [145, 146, 155, 169], "sanwork": [151, 158], "save": [81, 149, 165, 169, 176, 180], "save_insid": 176, "save_outsid": 176, "scale": [145, 146, 148, 151, 158, 165, 166, 168, 176], "scenario": [166, 176], "schedul": [145, 146, 149, 157, 169], "scheme": 106, "scipi": 149, "sck": 51, "scratch": 175, "screen": [155, 165, 166, 168, 174, 175, 177], "screen_set": 17, "screenshot": 166, "screwdriv": 175, "script": [145, 146, 149, 169], "sd": [148, 149, 175], "se": 147, "seaborn": 149, "seamless": [151, 158], "search": [22, 24, 26, 28, 30, 156], "second": [119, 128, 130, 133, 145, 146, 165, 166, 169, 171], "section": [148, 151, 155, 158, 165, 166, 171, 172], "see": [119, 128, 130, 133, 155, 166], "seealso": 99, "seek": [108, 110], "seekabl": [108, 110], "select": [149, 156, 165, 166, 168, 169, 174, 177], "self": [145, 146, 169], "send": [22, 24, 26, 28, 30, 59, 106, 119, 130, 133, 145, 146, 151, 156, 157, 158, 166, 169], "send_ev": [119, 128, 130, 133], "send_state_machin": [22, 24, 26, 28, 30], "send_to_hw_seri": 106, "sensor": [148, 149, 151, 153, 158, 165], "sent": [106, 166, 171], "separ": [108, 110, 148, 171], "sequenc": 176, "sequenti": 169, "serial": [22, 24, 26, 28, 30, 33, 49, 64, 106], "serial1": [22, 24, 26, 28, 30, 46, 49], "serial1_3": 46, "serial1_4": 46, "serial2": 46, "serial3": 46, "serial_channel": [22, 24, 26, 28, 30], "serial_messag": [22, 24, 26, 28, 30], "serial_port": [22, 24, 26, 28, 30, 59, 64], "serialportnam": 64, "serv": [151, 158], "server": [73, 75, 83, 91, 97, 99, 145, 146, 155, 166], "server_set": 17, "servic": [145, 146], "servo": [148, 151, 153, 158], "session": [22, 24, 26, 28, 30, 69, 81, 106, 108, 110, 145, 146, 151, 158, 165, 166, 169], "session_alarm_set": 17, "session_io": 81, "session_nam": [22, 24, 26, 28, 30], "session_plot": 169, "sessionio": 81, "set": [22, 24, 26, 28, 30, 33, 34, 41, 43, 46, 49, 106, 108, 110, 119, 128, 130, 133, 145, 146, 153, 155, 156, 163, 164, 166, 168, 169, 171, 175, 177, 180], "set_condit": [119, 128, 130, 133], "set_global_count": [119, 128, 130, 133], "set_global_tim": [119, 128, 130, 133], "set_global_timer_legaci": [119, 128, 130, 133], "set_module_relai": 106, "setcap": 149, "setup": [43, 148, 151, 158], "setup_input_channel": 35, "setup_output_channel": 35, "setuptools_scm": 149, "seven": [145, 146], "sever": [145, 146, 151, 158, 165, 166, 169], "shadow": 171, "shape": [151, 158], "share": [151, 156, 158, 174], "shine": [151, 158], "short": [145, 146], "shorter": [145, 146], "should": [22, 24, 26, 28, 30, 108, 110, 119, 128, 130, 133, 145, 146, 149, 165, 166, 168, 169, 171, 177], "show": 165, "shown": [145, 146, 166, 169], "sht31": [148, 163, 164], "side": [165, 169], "signal": [145, 146, 151, 157, 158, 166], "signific": [151, 158], "significantli": 171, "similar": [145, 146, 171, 174], "similarli": 171, "simpl": [145, 146, 169], "simple_task": 169, "simpler": 169, "simpli": [149, 155, 166, 171, 175], "simplifi": [64, 151, 158, 169], "simultan": 171, "sinc": 166, "singl": [151, 158, 161, 171], "site": 149, "situat": 166, "size": [66, 108, 110, 151, 158, 171], "slack": 169, "slight": 171, "slightli": 166, "slot": 148, "sma": [22, 24, 26, 28, 30, 95, 119, 128, 130, 133], "small": [147, 148], "so": [108, 110, 128, 130, 145, 146, 149, 169, 177], "social": [151, 158], "soft": [22, 24, 26, 28, 30, 106], "softcod": [22, 24, 26, 28, 30, 49, 85], "softcode1": [22, 24, 26, 28, 30, 49], "softcode_funct": 169, "softcode_handler_funct": [22, 24, 26, 28, 30], "softwar": [145, 146, 150, 151, 158, 175], "sole": 171, "solut": [151, 158, 166], "some": [151, 155, 158, 161, 166, 169, 174, 177], "someon": [145, 146], "someth": [145, 146, 172], "sometim": [145, 146], "son": 147, "sound": [145, 146, 149, 165, 166, 169, 174], "sound_calibr": 165, "sound_devic": 174, "sound_funct": 169, "sound_set": 17, "sounddevic": 149, "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 22, 24, 26, 28, 30, 33, 34, 35, 36, 39, 41, 43, 46, 49, 51, 52, 54, 55, 59, 61, 64, 65, 66, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 104, 106, 108, 110, 113, 116, 117, 119, 121, 123, 125, 127, 128, 130, 131, 133, 134, 137, 138, 140, 143, 148, 149, 160], "space": [151, 158], "span": 171, "speaker": [148, 165], "special": [149, 151, 158], "specif": [33, 34, 41, 46, 49, 87, 89, 149, 165, 169, 171, 172], "specifi": [108, 110, 149, 165, 166], "sphinx_book_them": 149, "spi": 149, "stabil": [145, 146, 148], "stabl": [145, 146, 151, 158, 171, 176], "staff": [145, 146], "stage": [145, 146, 169], "stai": [145, 146, 171], "stainless": 148, "standard": [145, 146, 151, 158, 165, 169], "start": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 22, 24, 26, 28, 30, 87, 89, 108, 110, 119, 128, 130, 133, 145, 146, 149, 156, 165, 166, 171, 180], "start_tim": 83, "state": [22, 24, 26, 28, 30, 77, 79, 85, 87, 89, 95, 106, 108, 110, 119, 128, 130, 133, 145, 146, 151, 158, 166, 169, 180], "state_change_condit": [119, 128, 130, 133, 169], "state_machin": [22, 24, 26, 28, 30], "state_machine_installation_statu": 104, "state_nam": [87, 89, 119, 128, 130, 133, 169], "state_tim": [119, 128, 130, 133, 169], "state_timer_matrix": 128, "statedur": [87, 89], "statemachin": [22, 24, 26, 28, 30, 95], "statemachinebas": 130, "statemachinebuild": 133, "statemachinerunn": 119, "statement": 93, "stateoccurr": 95, "states_occurr": 95, "static": [22, 24, 26, 28, 30, 39, 41], "statu": [151, 158, 165, 171], "stderr": [51, 54, 73, 75, 83, 91, 97, 99], "stdout": [51, 54], "steel": 148, "step": [149, 155, 163, 164], "still": [119, 128, 130, 133, 145, 146, 176], "stimuli": [145, 146, 149, 151, 158, 165, 174], "stimulu": 169, "stimulus_st": 169, "stimulus_state_output": 169, "stl": 161, "stop": [22, 24, 26, 28, 30, 143, 148, 169], "store": [87, 89, 116, 143, 149, 169, 174], "str": [16, 17, 22, 24, 26, 28, 30, 39, 41, 77, 79, 81, 85, 87, 89, 95, 119, 128, 130, 133, 169], "straightforward": [169, 175], "stream": [51, 54, 108, 110, 117], "strength": [151, 158], "stress": [145, 146, 151, 158], "stretch": 171, "string": [16, 17, 108, 110, 119, 128, 130, 133], "stringio": [108, 110], "strong": [145, 146], "structur": [128, 130, 148], "studi": [145, 146], "studio": 161, "subclass": [108, 110], "subfold": 169, "subgroup": [145, 146], "subject": [145, 146, 151, 158, 165, 169, 180], "subject_limit": 171, "subject_plot": 169, "suboptim": 155, "subscript": 155, "subset": 161, "substitut": [145, 146], "success": 104, "successfulli": [145, 146], "sucros": [145, 146, 172], "sudo": [149, 163, 164], "suffer": [145, 146], "suffici": [145, 146, 169], "suggest": 166, "suit": [145, 146], "sum": 169, "summari": [165, 166], "sundai": [145, 146, 165], "super": 169, "superenum": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14], "suppli": [148, 149], "supplier": 148, "support": [22, 24, 26, 28, 30, 33, 147, 148, 161], "sure": [145, 146, 148, 149, 169, 177], "surprisingli": [145, 146], "suspect": 172, "swappi": 149, "switch": [145, 146, 165, 174], "symbol": [149, 166], "symlink": 149, "sync": [22, 24, 26, 28, 30, 106, 119, 128, 130, 133], "sync_channel": [22, 24, 26, 28, 30], "sync_channel_mod": [104, 106], "sync_channel_mode_ok": 104, "sync_mod": [22, 24, 26, 28, 30], "sync_set": 17, "synchron": [22, 24, 26, 28, 30, 119, 128, 130, 133], "sysctl": 149, "system": [17, 145, 146, 147, 148, 153, 155, 162, 163, 164, 165, 169, 171, 172, 174, 180], "system_info": 177, "system_nam": 169, "sz": 148, "t": [106, 108, 110, 128, 161], "tab": [156, 169], "tabl": [165, 177], "tag": [151, 158, 165, 177], "take": [119, 128, 130, 133, 145, 146, 161, 169], "talk": 169, "tandem": [151, 158], "target": 169, "target_ev": [119, 128, 130, 133], "task": [71, 145, 146, 148, 151, 158], "tast": [145, 146], "team": 155, "technic": [145, 146], "telegram": [145, 146, 149, 151, 157, 158, 165, 171, 172, 174, 180], "telegram_chat": [156, 174], "telegram_set": 17, "telegram_token": [156, 174], "telegram_us": 174, "tell": [108, 110], "temperatur": [145, 146, 148, 149, 151, 153, 158, 165, 166, 168], "temporari": 166, "termin": [149, 165, 166, 175], "test": [22, 24, 26, 28, 30, 145, 146, 151, 155, 158, 165, 180], "tether": [145, 146], "text": [108, 110, 149, 156, 169], "textio": [108, 110], "textiobas": [108, 110], "than": [22, 24, 26, 28, 30, 128, 145, 146, 149, 166], "thei": [17, 119, 130, 133, 145, 146, 148, 165, 169], "them": [145, 146, 148, 161, 165, 169, 171], "therefor": 165, "thi": [22, 24, 26, 28, 30, 77, 79, 85, 87, 89, 108, 110, 119, 128, 130, 133, 145, 146, 147, 149, 151, 155, 156, 158, 165, 166, 169, 171, 172, 175, 176, 177], "thing": 71, "this_trial_typ": 169, "those": [169, 171], "though": 171, "three": [151, 158, 161, 169], "threshold": [119, 128, 130, 133, 166, 169, 171, 174], "through": [22, 24, 26, 28, 30, 59, 145, 146, 151, 158, 165, 169], "time": [119, 128, 130, 133, 145, 146, 151, 155, 158, 165, 166, 169, 171, 177, 180], "timeout": [64, 169], "timer": [119, 128, 130, 133, 165], "timer_dur": [119, 128, 130, 133], "timer_for_respons": 169, "timer_id": [119, 128, 130, 133], "timestamp": [22, 24, 26, 28, 30, 77, 79, 85, 87, 89, 95, 106], "todo": [147, 149], "togeth": [145, 146, 151, 158], "toggl": 165, "token": 174, "too": [145, 146, 148, 166], "tool": [163, 164], "toolbar": 149, "top": [145, 146, 148, 151, 158, 161, 165, 168, 171], "tornillo": 147, "torqu": 148, "total": [108, 110, 148, 151, 158, 169], "total_states_ad": 128, "touch": [148, 168], "touchscreen": [145, 146, 151, 158, 171, 174], "touchscreen_set": 17, "towerpro": 148, "track": [145, 146, 165], "tradit": [145, 146], "train": [145, 146, 147, 158, 160, 161, 165, 166, 172, 175, 177, 180], "training_protocol": 169, "training_set": 169, "trainingprotocol": 169, "transact": 64, "transform": [145, 146], "transient": [145, 146], "transit": [119, 128, 130, 133, 166, 169, 176], "transmiss": 106, "transpar": [145, 146, 148, 151, 158], "transport": [145, 146, 151, 158], "trial": [22, 24, 26, 28, 30, 116, 128, 145, 146, 165, 166, 169], "trial_data": 169, "trial_start_timestamp": 95, "trial_typ": 169, "trials_last_sess": 169, "trials_previous_sess": 169, "trigger": [106, 119, 128, 130, 133, 145, 146, 149, 165, 166, 169, 171, 176], "trigger_softcod": 106, "troubleshoot": [165, 166], "true": [69, 71, 73, 75, 77, 79, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 108, 110, 169], "truncat": [108, 110], "try": [145, 146], "tty": [22, 24, 26, 28, 30], "ttyacm": 149, "ttyacm0": 149, "ttyacm1": 149, "ttyacm2": 149, "tube": [151, 158], "tune": [145, 146], "tunnel": 148, "tup": [22, 24, 26, 28, 30, 41, 95, 119, 128, 130, 133, 169], "tupl": [119, 128, 130, 133], "turn": [165, 169], "tv": [145, 146], "two": [145, 146, 149, 151, 153, 158, 165, 166, 169, 171, 172, 176], "txt": 149, "txtline": 81, "type": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 22, 24, 26, 28, 30, 34, 39, 41, 81, 95, 106, 116, 119, 130, 133, 145, 146, 149, 151, 158, 166, 169, 171, 174, 175], "typestr": [69, 71, 73, 75, 77, 79, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101], "typic": [145, 146, 149, 171, 176], "u": [106, 145, 146, 175], "udevadm": 149, "ultim": [145, 146], "unchang": [108, 110], "unconsci": [145, 146], "undeclar": [119, 128, 130, 133], "under": [151, 158, 165], "underli": [108, 110], "understand": 149, "unexpect": [145, 146], "uniformli": [145, 146], "uniqu": [22, 24, 26, 28, 30, 119, 128, 130, 133, 177], "unless": [161, 171, 175], "unlik": [119, 128, 130, 133, 145, 146, 171], "unrespons": 166, "unsuccess": 165, "until": [108, 110, 119, 128, 130, 133, 145, 146, 166, 169], "unus": [108, 110], "unusu": 166, "up": [43, 145, 146, 148, 153, 155, 171, 174, 175], "updat": [22, 24, 26, 28, 30, 151, 158, 169], "update_state_numb": [119, 130, 133], "upgrad": 149, "upload": 24, "us": [22, 24, 26, 28, 30, 59, 108, 110, 119, 128, 130, 133, 143, 145, 146, 147, 148, 151, 155, 158, 163, 164, 165, 166, 168, 169, 174, 180], "usag": 149, "usb": [148, 153], "usb1": 46, "usbmodem1293": [22, 24, 26, 28, 30], "use_screen": 174, "use_soundcard": 174, "user": [22, 24, 26, 28, 30, 151, 156, 158, 165, 169, 174, 176], "usernam": 149, "username_to_id_bot": 156, "usr": 149, "usual": [51, 54, 108, 110, 149, 166, 171], "v": [106, 148, 149], "v3": 148, "vacant": 166, "valid": [119, 128, 130, 133], "valu": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 22, 26, 28, 30, 33, 34, 41, 46, 49, 95, 99, 119, 128, 130, 133, 149, 165, 169, 171, 177], "value_nam": 99, "value_typ": 16, "valueerror": [108, 110], "valv": [22, 24, 26, 28, 30, 33, 49, 165, 169], "valve1": [22, 24, 26, 28, 30, 49, 169], "valve3": 169, "valve_opening_tim": 169, "valve_to_open": 169, "vaol": 148, "vari": [149, 171], "variabl": [24, 77, 79, 85, 87, 89, 95, 128, 133, 145, 146, 165, 169], "variat": 171, "variou": [148, 151, 158, 166], "vc4": 149, "ven": 147, "venv": 149, "veri": [145, 146, 151, 158], "verifi": [163, 164, 166, 168], "version": [22, 24, 26, 28, 30, 119, 128, 130, 133, 147, 148, 149, 151, 158, 169], "vfs_cache_pressur": 149, "via": [119, 128, 130, 133, 145, 146, 151, 158, 169], "video": [143, 149, 151, 158, 165, 166], "view": [147, 151, 158, 165, 166, 177], "view_detect": 171, "viewer": 155, "villag": [145, 146, 147, 158, 160, 161, 163, 164, 165, 166, 169, 175], "village_project": 169, "virtual": [106, 128], "visual": [165, 169, 171], "vm": 149, "volum": [165, 169], "wa": [24, 166, 169], "wai": [145, 146, 155], "wait": [145, 146, 166, 169, 176], "wait_exit": 176, "wake": [145, 146, 166], "want": [145, 146, 149, 169], "warn": [145, 146, 165, 166], "watch": 166, "water": [145, 146, 148, 165, 166, 169, 172], "water_calibr": [165, 169], "wayland": 149, "we": [145, 146, 147, 151, 155, 158, 160, 161, 165, 169, 171, 175], "web": 149, "webpag": 155, "week": [145, 146, 172], "weekend": [145, 146], "weigh": [166, 177], "weight": [145, 146, 149, 151, 158, 165, 166, 168, 177], "welcom": [128, 130], "welfar": [151, 158, 165], "well": [145, 146, 153, 165], "were": [119, 130, 133, 145, 146, 161, 166, 169], "what": [145, 146, 148], "whatev": 169, "when": [16, 17, 22, 24, 26, 28, 30, 119, 128, 130, 133, 145, 146, 148, 149, 165, 169, 171, 172], "whenc": [108, 110], "whenev": [149, 166], "where": [119, 128, 130, 133, 148, 149, 151, 158, 165, 166, 169, 171, 177], "whether": [24, 108, 110, 128, 133, 145, 146, 166, 171, 176], "which": [108, 110, 128, 130, 145, 146, 151, 158, 165, 166, 169, 175, 176], "while": [22, 24, 26, 28, 30, 133, 145, 146, 151, 158, 171, 176], "white": [148, 151, 158, 171], "whole": [128, 130, 151, 158], "whose": [95, 119, 128, 130, 133, 145, 146], "why": [145, 146], "wi": 149, "wide": [148, 149, 151, 158], "window": [155, 175], "wire": [22, 24, 26, 28, 30, 33, 148, 155], "wire1": 46, "wire2": 46, "wireless": [145, 146], "within": [145, 146, 165, 169, 171], "without": [95, 145, 146, 148, 149, 165, 166, 168], "won": 128, "work": [145, 146, 149, 163, 164, 169, 172], "workspace_path": [22, 24, 26, 28, 30], "would": [145, 146, 169], "wrap": [151, 158], "writabl": [108, 110], "write": [22, 26, 28, 30, 106, 108, 110, 156], "write_to_modul": 106, "writelin": [108, 110], "written": [108, 110], "wrong": [166, 169], "x": [106, 145, 146, 148], "x1": 148, "x11": 149, "x2": 148, "x20": 148, "x3": 148, "x6": 148, "x7": 148, "x8": 148, "y": [147, 149, 163, 164], "ye": [145, 146, 149], "yet": [128, 145, 146, 151, 158], "you": [119, 128, 130, 133, 145, 146, 147, 148, 151, 155, 158, 160, 161, 163, 164, 165, 166, 169, 172, 175, 177], "your": [128, 145, 146, 147, 149, 151, 155, 156, 158, 175, 177], "z": 106, "zero": [119, 128, 130, 133], "zone": 171}, "titles": ["classes", "enums", "Actions", "Active", "AreaActive", "Color", "Controller", "Cycle", "DataTable", "Info", "Save", "ScreenActive", "State", "SuperEnum", "SyncType", "settings_class", "Setting", "Settings", "devices", "gui", "pybpodapi", "bpod", "Bpod", "bpod_base", "BpodBase", "bpod_com_protocol", "BpodCOMProtocol", "bpod_com_protocol_modules", "BpodCOMProtocolModules", "bpod_io", "BpodIO", "hardware", "channels", "ChannelName", "ChannelType", "Channels", "EventsPositions", "events", "base_eventname", "BaseEventName", "bpod_events", "EventName", "hardware", "Hardware", "input_channels", "bpod_input_channels", "InputName", "output_channels", "bpod_output_channels", "OutputChannel", "non_blockingsocketreceive", "NonBlockingSocketReceive", "village.pybpodapi.bpod.non_blockingsocketreceive.UnexpectedEndOfStream", "non_blockingstreamreader", "NonBlockingStreamReader", "village.pybpodapi.bpod.non_blockingstreamreader.UnexpectedEndOfStream", "settings", "bpod_modules", "bpod_module", "BpodModule", "bpod_modules", "BpodModules", "com", "arcom", "ArCOM", "ArduinoTypes", "DataType", "messaging", "base_message", "BaseMessage", "debug", "DebugMessage", "end_trial", "EndTrial", "error", "ErrorMessage", "event_occurrence", "EventOccurrence", "event_resume", "EventResume", "parser", "MessageParser", "session_info", "SessionInfo", "softcode_occurrence", "SoftcodeOccurrence", "state_occurrence", "StateOccurrence", "state_transition", "StateTransition", "stderr", "StderrMessage", "stdout", "StdoutMessage", "trial", "Trial", "untagged_message", "UntaggedMessage", "value", "ValueMessage", "warning", "WarningMessage", "protocol", "recv_msg_headers", "ReceiveMessageHeader", "send_msg_headers", "SendMessageHeader", "stderr_buffer", "StderrBuffer", "stdout_buffer", "StdoutBuffer", "exceptions", "bpod_error", "village.pybpodapi.exceptions.bpod_error.BpodErrorException", "protocol", "session", "Session", "StreamsWrapper", "state_machine", "StateMachine", "conditions", "Conditions", "global_counters", "GlobalCounters", "global_timers", "GlobalTimers", "state_machine_base", "village.pybpodapi.state_machine.state_machine_base.SMAError", "StateMachineBase", "state_machine_builder", "StateMachineBuilder", "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilderError", "state_machine_runner", "StateMachineRunner", "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunnerError", "utils", "csv", "Reader", "Writer", "date_parser", "parse", "screen", "video_worker", "VideoWorker", "API", "&lt;no title&gt;", "FAQ", "Assembly Instructions", "List of Parts", "Software Installation", "How to Build It", "What Is The Training Village?", "Schedule Backups", "Hardware Connections", "Send Heartbeat Signals to a Remote Device", "Configure Remote Access", "Create a Telegram Bot", "Initial Configuration", "How Does It Work?", "System ISO Image", "Code Repository", "3D Printing Files", "Resources", "Temperature or Weight Sensor Connection Error", "Troubleshooting", "GUI Overview", "Receive and Respond to Telegram Alarms", "Animal Procedures", "Calibrate and Test Corridor Components", "Create a Training Protocol", "Saved Data", "Calibrate and Test Animal Detection", "Maintenance", "Create Real-Time Plots", "Initial Settings", "Getting Started", "System State Machine", "Create New Subjects", "Test a Training Protocol", "Use an Existing Training Protocol", "User Guide"], "titleterms": {"": 176, "3d": [148, 161], "A": 176, "In": 176, "It": [150, 151, 158, 175], "The": [151, 158, 169, 176], "access": [149, 155], "action": 2, "activ": 3, "adjust": 149, "after": 166, "after_tri": 169, "alarm": [156, 166], "alia": 149, "aluminium": 148, "an": [149, 156, 176, 179], "anim": [167, 171, 176], "api": 144, "arcom": [63, 64], "arduinotyp": 65, "areaact": 4, "assembli": 147, "b": 176, "backup": 152, "base_eventnam": 38, "base_messag": 68, "baseeventnam": 39, "basemessag": 69, "befor": 176, "behavior": [148, 149, 151, 158, 171], "biweekli": 172, "bot": 156, "both": 176, "box": [148, 151, 158, 171, 176], "bpod": [21, 22, 52, 55, 148], "bpod_bas": 23, "bpod_com_protocol": 25, "bpod_com_protocol_modul": 27, "bpod_error": [112, 113], "bpod_ev": 40, "bpod_input_channel": 45, "bpod_io": 29, "bpod_modul": [57, 58, 60], "bpod_output_channel": 48, "bpodbas": 24, "bpodcomprotocol": 26, "bpodcomprotocolmodul": 28, "bpoderrorexcept": 113, "bpodio": 30, "bpodmodul": [59, 61], "build": [150, 175], "cabl": 161, "cach": 149, "cage": 161, "calibr": [168, 171], "cam": 148, "camera": 161, "case": 176, "chang": 149, "channel": [32, 35], "channelnam": 33, "channeltyp": 34, "check": [156, 166], "class": [0, 144], "close": 169, "cnc": 148, "code": [160, 169], "color": 5, "com": 62, "commun": 149, "compon": 168, "condit": [120, 121], "configur": [155, 157], "connect": [153, 163, 164], "connector": 161, "consist": 149, "control": [6, 151, 158], "corridor": [151, 158, 161, 168, 171], "creat": [149, 156, 169, 173, 177], "create_tri": 169, "csv": 136, "custom": 169, "cycl": [7, 176], "dai": 166, "daili": 172, "data": [165, 170], "datat": 8, "datatyp": 66, "date_pars": 139, "debug": 70, "debugmessag": 71, "default_training_set": 169, "detect": [166, 171], "devic": [18, 144, 149, 154], "disk": 149, "doe": [151, 158], "door": 161, "electron": 148, "end_trial": 72, "endtrial": 73, "enum": 1, "environ": 149, "error": [74, 163, 164], "errormessag": 75, "event": 37, "event_occurr": 76, "event_resum": 78, "eventnam": 41, "eventoccurr": 77, "eventresum": 79, "eventsposit": 36, "everi": 166, "exampl": 169, "except": [111, 113], "exist": [156, 179], "extrus": 148, "faq": 146, "file": 161, "finish": 166, "first": 149, "followthelight": 169, "get": 175, "global_count": 122, "global_tim": 124, "globalcount": 123, "globaltim": 125, "grant": 149, "gui": [19, 144, 165], "gui_tab": 169, "guid": 180, "hardwar": [31, 42, 43, 149, 153], "hat": 148, "heartbeat": 154, "homecag": 148, "hour": 166, "hous": [151, 158], "how": [150, 151, 158], "i": [151, 166], "i2c": 149, "imag": 159, "info": 9, "initi": [157, 174], "input_channel": 44, "inputnam": 46, "instal": 149, "instruct": 147, "interrog": 166, "iso": 159, "launch": [149, 175], "leav": 176, "librari": 149, "list": 148, "machin": [148, 176], "main": 165, "mainten": 172, "make": 156, "maximum": [149, 176], "memori": 149, "messag": 67, "messagepars": 81, "method": 169, "monitor": 165, "monthli": 172, "mount": 161, "name": 149, "need": 149, "new": 177, "non_blockingsocketrec": [50, 52], "non_blockingstreamread": [53, 55], "nonblockingsocketrec": 51, "nonblockingstreamread": 54, "normal": 176, "o": 149, "occasion": 172, "open": [151, 158], "option": [169, 176], "organ": [161, 169], "other": 144, "output_channel": 47, "outputchannel": 49, "overview": 165, "pars": 140, "parser": 80, "part": 148, "perform": 166, "permiss": 149, "pi": 149, "pin": 149, "pip": 149, "plot": 173, "port": 148, "prefer": 149, "preliminari": 175, "prepar": 166, "print": [148, 161], "prioriti": 149, "procedur": 167, "process": 149, "project": 169, "protocol": [102, 114, 169, 178, 179], "pybpodapi": [20, 52, 55, 113, 127, 131, 134, 144], "python": 149, "raspberri": [148, 149], "reader": 137, "real": 173, "receiv": 166, "receivemessagehead": 104, "recv_msg_head": 103, "remot": [154, 155], "repositori": 160, "resourc": 162, "respond": 166, "rfid": 148, "rule": 149, "run": [149, 166], "save": [10, 170], "schedul": 152, "screen": [141, 148, 149], "screenact": 11, "send": 154, "send_msg_head": 105, "sendmessagehead": 106, "sensor": [163, 164], "serial": 149, "servo": 149, "session": [115, 116, 176], "session_info": 82, "sessioninfo": 83, "set": [16, 17, 56, 149, 165, 174], "settings_class": 15, "signal": 154, "smaerror": 127, "softcode_occurr": 84, "softcodeoccurr": 85, "softwar": 149, "sound": 148, "sourc": [151, 158], "stai": 176, "start": [169, 175], "state": [12, 176], "state_machin": [118, 127, 131, 134], "state_machine_bas": [126, 127], "state_machine_build": [129, 131], "state_machine_runn": [132, 134], "state_occurr": 86, "state_transit": 88, "statemachin": 119, "statemachinebas": 128, "statemachinebuild": 130, "statemachinebuildererror": 131, "statemachinerunn": 133, "statemachinerunnererror": 134, "stateoccurr": 87, "statetransit": 89, "stderr": 90, "stderr_buff": 107, "stderrbuff": 108, "stderrmessag": 91, "stdout": 92, "stdout_buff": 109, "stdoutbuff": 110, "stdoutmessag": 93, "step": 175, "streamswrapp": 117, "structur": 169, "subject": [166, 176, 177], "superenum": 13, "synctyp": 14, "system": [149, 151, 158, 159, 161, 166, 175, 176], "task": [165, 166, 169, 176], "telegram": [156, 166], "temperatur": [163, 164], "test": [168, 171, 178], "time": [149, 173, 176], "token": 156, "train": [148, 149, 151, 169, 178, 179], "trial": [94, 95], "trigger": 156, "troubleshoot": 164, "tube": [148, 161], "twice": 166, "uart": 149, "udev": 149, "unexpectedendofstream": [52, 55], "untagged_messag": 96, "untaggedmessag": 97, "until": 176, "updat": 149, "update_training_set": 169, "us": [149, 179], "usag": [151, 158], "usb": 149, "user": 180, "util": 135, "valu": 98, "valuemessag": 99, "via": 149, "video_work": 142, "videowork": 143, "villag": [52, 55, 113, 127, 131, 134, 148, 149, 151], "warn": 100, "warningmessag": 101, "weekli": 172, "weight": [163, 164], "what": [149, 151], "when": 166, "while": 166, "work": [151, 158], "writer": 138, "you": 149, "your": 169, "yourself": 175}})