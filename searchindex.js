Search.setIndex({"alltitles": {"3D Printing Files": [[165, null]], "3D-Printed Parts": [[152, "d-printed-parts"]], "API": [[148, null]], "Accessing Pins via Hardware (for Servos) and Using UART Pin for Communication": [[153, "accessing-pins-via-hardware-for-servos-and-using-uart-pin-for-communication"]], "Actions": [[4, null]], "Active": [[5, null]], "Alarms": [[170, "alarms"]], "Aluminium Extrusions and Tubes": [[152, "aluminium-extrusions-and-tubes"]], "Animal Procedures": [[171, null]], "ArCOM": [[68, null]], "ArduinoTypes": [[69, null]], "AreaActive": [[6, null]], "Assembly Instructions": [[151, null]], "BaseEventName": [[43, null]], "BaseMessage": [[73, null]], "BehaviorWindow": [[147, null]], "Behavioral Box": [[152, "behavioral-box"]], "Biweekly": [[176, "biweekly"]], "Bpod": [[26, null]], "Bpod + Ports": [[152, "bpod-ports"]], "BpodBase": [[28, null]], "BpodCOMProtocol": [[30, null]], "BpodCOMProtocolModules": [[32, null]], "BpodIO": [[34, null]], "BpodModule": [[63, null]], "BpodModules": [[65, null]], "Build-It-Yourself": [[179, "build-it-yourself"]], "CNC Machined Parts": [[152, "cnc-machined-parts"]], "Cable organizer": [[165, "cable-organizer"]], "Calibrate and Test Animal Detection": [[175, null]], "Calibrate and Test Corridor Components": [[172, null]], "Camera Mount": [[165, "camera-mount"]], "ChangeHourRun": [[2, null]], "Changing Preferences": [[153, "changing-preferences"]], "ChannelName": [[37, null]], "ChannelType": [[38, null]], "Channels": [[39, null]], "Check the token of an existing bot": [[160, "check-the-token-of-an-existing-bot"]], "Checks Performed After the Task Finishes": [[170, "checks-performed-after-the-task-finishes"]], "Checks Performed When a Subject is Detected, and the Task is Prepared": [[170, "checks-performed-when-a-subject-is-detected-and-the-task-is-prepared"]], "Checks Performed While the Task is Running": [[170, "checks-performed-while-the-task-is-running"]], "Classes": [[148, "classes"]], "Code Organization": [[173, "code-organization"]], "Code Repository": [[164, null]], "Color": [[7, null]], "Conditions": [[125, null]], "Configure Remote Access": [[159, null]], "Connectors for tubes and cages": [[165, "connectors-for-tubes-and-cages"]], "Corridor Files": [[165, "corridor-files"]], "Create New Subjects": [[181, null]], "Create Real-Time Plots": [[177, null]], "Create a Telegram Bot": [[160, null]], "Create a Training Protocol": [[173, null]], "Create an Alias and Run the Training Village": [[153, "create-an-alias-and-run-the-training-village"]], "Creating a Python Environment and Installing pip Libraries": [[153, "creating-a-python-environment-and-installing-pip-libraries"]], "Customizing Your Training Protocol": [[173, "customizing-your-training-protocol"]], "Cycle": [[8, null]], "DATA": [[169, "data"]], "Daily": [[176, "daily"]], "DataTable": [[9, null]], "DataType": [[70, null]], "DebugMessage": [[75, null]], "Detection in the Behavioral Box": [[175, "detection-in-the-behavioral-box"]], "Detection in the Corridor": [[175, "detection-in-the-corridor"]], "Devices": [[148, "devices"]], "Door System": [[165, "door-system"]], "Electronics": [[152, "electronics"]], "EndTrial": [[77, null]], "ErrorMessage": [[79, null]], "EventName": [[45, null]], "EventOccurrence": [[81, null]], "EventResume": [[83, null]], "EventsPositions": [[40, null]], "Examples of Code Structure": [[173, "examples-of-code-structure"]], "FAQ": [[150, null]], "GUI Overview": [[169, null]], "Getting Started": [[179, null]], "GlobalCounters": [[127, null]], "GlobalTimers": [[129, null]], "Gui": [[148, "gui"]], "Hardware": [[47, null]], "Hardware Connections": [[157, null]], "Homecages": [[152, "homecages"]], "How Does It Work?": [[155, "how-does-it-work"], [162, null]], "How to Build It": [[154, null]], "I2C Communication": [[153, "i2c-communication"]], "In Both Cases": [[180, "in-both-cases"]], "Info": [[10, null]], "Initial Configuration": [[161, null]], "Initial Settings": [[178, null]], "InputName": [[50, null]], "Install Training Village": [[153, "install-training-village"]], "Installing Needed Libraries": [[153, "installing-needed-libraries"]], "Interrogate the system": [[170, "interrogate-the-system"]], "Launch Raspberry Pi OS for the First Time": [[153, "launch-raspberry-pi-os-for-the-first-time"]], "Launching the System": [[179, "launching-the-system"]], "List of Parts": [[152, null]], "MAIN": [[169, "main"]], "MONITOR": [[169, "monitor"]], "Maintenance": [[176, null]], "Make the bot triggers the alarms": [[160, "make-the-bot-triggers-the-alarms"]], "MessageParser": [[85, null]], "Monthly": [[176, "monthly"]], "NonBlockingSocketReceive": [[55, null]], "NonBlockingStreamReader": [[58, null]], "Normal Cycle for an Animal Session": [[180, "normal-cycle-for-an-animal-session"]], "Occasionally": [[176, "occasionally"]], "Open Source": [[155, "open-source"], [162, "open-source"]], "Option A: The Subject Leaves Before the Task\u2019s Maximum Time": [[180, "option-a-the-subject-leaves-before-the-tasks-maximum-time"]], "Option B: The Subject Stays in the Box Until the Maximum Time": [[180, "option-b-the-subject-stays-in-the-box-until-the-maximum-time"]], "Other": [[148, "other"]], "OutputChannel": [[53, null]], "Preliminary Steps": [[179, "preliminary-steps"]], "Project Structure": [[173, "project-structure"]], "Pybpodapi": [[148, "pybpodapi"]], "RFID": [[152, "rfid"]], "Raspberry + Cams": [[152, "raspberry-cams"]], "Reader": [[141, null]], "Receive and Respond to Telegram Alarms": [[170, null]], "ReceiveMessageHeader": [[108, null]], "Resources": [[166, null]], "SETTINGS": [[169, "settings"]], "Save": [[11, null]], "Saved Data": [[174, null]], "Schedule Backups": [[156, null]], "Screen": [[152, "screen"]], "Screen Settings": [[153, "screen-settings"]], "ScreenActive": [[12, null]], "Send Heartbeat Signals to a Remote Device": [[158, null]], "SendMessageHeader": [[110, null]], "Serial Communication": [[153, "serial-communication"]], "Session": [[120, null]], "SessionInfo": [[87, null]], "Setting": [[16, null]], "Settings": [[17, null], [19, null]], "SoftcodeOccurrence": [[89, null]], "Software Installation": [[153, null]], "Sound": [[152, "sound"]], "State": [[13, null]], "StateMachine": [[123, null]], "StateMachineBase": [[132, null]], "StateMachineBuilder": [[134, null]], "StateMachineRunner": [[137, null]], "StateOccurrence": [[91, null]], "StateTransition": [[93, null]], "StderrBuffer": [[112, null]], "StderrMessage": [[95, null]], "StdoutBuffer": [[114, null]], "StdoutMessage": [[97, null]], "StreamsWrapper": [[121, null]], "Subject Checks Performed Twice a Day": [[170, "subject-checks-performed-twice-a-day"]], "SuperEnum": [[14, null]], "System Checks Performed Every Hour": [[170, "system-checks-performed-every-hour"]], "System ISO Image": [[163, null]], "System State Machine": [[180, null]], "System usage": [[155, "system-usage"], [162, "system-usage"]], "TASKS": [[169, "tasks"]], "Tasks": [[173, "tasks"]], "Temperature or Weight Sensor Connection Error": [[167, null], [168, "temperature-or-weight-sensor-connection-error"]], "Test a Training Protocol": [[182, null]], "The Behavioral Box": [[155, "the-behavioral-box"], [162, "the-behavioral-box"]], "The Controller": [[155, "the-controller"], [162, "the-controller"]], "The Corridor": [[155, "the-corridor"], [162, "the-corridor"]], "The FollowTheLight Task": [[173, "the-followthelight-task"]], "The Housing": [[155, "the-housing"], [162, "the-housing"]], "The after_trial() Method": [[173, "the-after-trial-method"]], "The close() Method": [[173, "the-close-method"]], "The create_trial() Method": [[173, "the-create-trial-method"]], "The default_training_settings() Method": [[173, "the-default-training-settings-method"]], "The optional gui_tabs() Method": [[173, "the-optional-gui-tabs-method"]], "The start() Method": [[173, "the-start-method"]], "The update_training_settings() Method": [[173, "the-update-training-settings-method"]], "Training": [[20, null]], "Training Protocol": [[173, "training-protocol"]], "Training Village HAT": [[152, "training-village-hat"]], "Trial": [[99, null]], "Troubleshooting": [[168, null]], "Udev Rules for Consistent USB Device Naming": [[153, "udev-rules-for-consistent-usb-device-naming"]], "UntaggedMessage": [[101, null]], "Updating the System": [[153, "updating-the-system"]], "Use an Existing Training Protocol": [[183, null]], "User Guide": [[184, null]], "ValueMessage": [[103, null]], "WarningMessage": [[105, null]], "Weekly": [[176, "weekly"]], "What Is The Training Village?": [[155, null]], "What You Need": [[153, "what-you-need"]], "Writer": [[142, null]], "arcom": [[67, null]], "base_eventname": [[42, null]], "base_message": [[72, null]], "behavior_window": [[146, null]], "bpod": [[25, null]], "bpod_base": [[27, null]], "bpod_com_protocol": [[29, null]], "bpod_com_protocol_modules": [[31, null]], "bpod_error": [[116, null]], "bpod_events": [[44, null]], "bpod_input_channels": [[49, null]], "bpod_io": [[33, null]], "bpod_module": [[62, null]], "bpod_modules": [[61, null], [64, null]], "bpod_output_channels": [[52, null]], "change_hour_run": [[1, null]], "channels": [[36, null]], "classes": [[0, null]], "com": [[66, null]], "conditions": [[124, null]], "csv": [[140, null]], "date_parser": [[143, null]], "debug": [[74, null]], "devices": [[22, null]], "end_trial": [[76, null]], "enums": [[3, null]], "error": [[78, null]], "event_occurrence": [[80, null]], "event_resume": [[82, null]], "events": [[41, null]], "exceptions": [[115, null]], "global_counters": [[126, null]], "global_timers": [[128, null]], "gui": [[23, null]], "hardware": [[35, null], [46, null]], "input_channels": [[48, null]], "messaging": [[71, null]], "non_blockingsocketreceive": [[54, null]], "non_blockingstreamreader": [[57, null]], "output_channels": [[51, null]], "parse": [[144, null]], "parser": [[84, null]], "protocol": [[106, null], [118, null]], "pybpodapi": [[24, null]], "recv_msg_headers": [[107, null]], "screen": [[145, null]], "send_msg_headers": [[109, null]], "session": [[119, null]], "session_info": [[86, null]], "settings": [[60, null]], "settings_class": [[15, null]], "softcode_occurrence": [[88, null]], "state_machine": [[122, null]], "state_machine_base": [[130, null]], "state_machine_builder": [[133, null]], "state_machine_runner": [[136, null]], "state_occurrence": [[90, null]], "state_transition": [[92, null]], "stderr": [[94, null]], "stderr_buffer": [[111, null]], "stdout": [[96, null]], "stdout_buffer": [[113, null]], "training": [[18, null]], "trial": [[98, null]], "untagged_message": [[100, null]], "utils": [[139, null]], "value": [[102, null]], "village.classes.training.TrainingError": [[21, null]], "village.pybpodapi.bpod.non_blockingsocketreceive.UnexpectedEndOfStream": [[56, null]], "village.pybpodapi.bpod.non_blockingstreamreader.UnexpectedEndOfStream": [[59, null]], "village.pybpodapi.exceptions.bpod_error.BpodErrorException": [[117, null]], "village.pybpodapi.state_machine.state_machine_base.SMAError": [[131, null]], "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilderError": [[135, null]], "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunnerError": [[138, null]], "warning": [[104, null]]}, "docnames": ["api_generated/village.classes", "api_generated/village.classes.change_hour_run", "api_generated/village.classes.change_hour_run.ChangeHourRun", "api_generated/village.classes.enums", "api_generated/village.classes.enums.Actions", "api_generated/village.classes.enums.Active", "api_generated/village.classes.enums.AreaActive", "api_generated/village.classes.enums.Color", "api_generated/village.classes.enums.Cycle", "api_generated/village.classes.enums.DataTable", "api_generated/village.classes.enums.Info", "api_generated/village.classes.enums.Save", "api_generated/village.classes.enums.ScreenActive", "api_generated/village.classes.enums.State", "api_generated/village.classes.enums.SuperEnum", "api_generated/village.classes.settings_class", "api_generated/village.classes.settings_class.Setting", "api_generated/village.classes.settings_class.Settings", "api_generated/village.classes.training", "api_generated/village.classes.training.Settings", "api_generated/village.classes.training.Training", "api_generated/village.classes.training.TrainingError", "api_generated/village.devices", "api_generated/village.gui", "api_generated/village.pybpodapi", "api_generated/village.pybpodapi.bpod", "api_generated/village.pybpodapi.bpod.Bpod", "api_generated/village.pybpodapi.bpod.bpod_base", "api_generated/village.pybpodapi.bpod.bpod_base.BpodBase", "api_generated/village.pybpodapi.bpod.bpod_com_protocol", "api_generated/village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol", "api_generated/village.pybpodapi.bpod.bpod_com_protocol_modules", "api_generated/village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules", "api_generated/village.pybpodapi.bpod.bpod_io", "api_generated/village.pybpodapi.bpod.bpod_io.BpodIO", "api_generated/village.pybpodapi.bpod.hardware", "api_generated/village.pybpodapi.bpod.hardware.channels", "api_generated/village.pybpodapi.bpod.hardware.channels.ChannelName", "api_generated/village.pybpodapi.bpod.hardware.channels.ChannelType", "api_generated/village.pybpodapi.bpod.hardware.channels.Channels", "api_generated/village.pybpodapi.bpod.hardware.channels.EventsPositions", "api_generated/village.pybpodapi.bpod.hardware.events", "api_generated/village.pybpodapi.bpod.hardware.events.base_eventname", "api_generated/village.pybpodapi.bpod.hardware.events.base_eventname.BaseEventName", "api_generated/village.pybpodapi.bpod.hardware.events.bpod_events", "api_generated/village.pybpodapi.bpod.hardware.events.bpod_events.EventName", "api_generated/village.pybpodapi.bpod.hardware.hardware", "api_generated/village.pybpodapi.bpod.hardware.hardware.Hardware", "api_generated/village.pybpodapi.bpod.hardware.input_channels", "api_generated/village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels", "api_generated/village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName", "api_generated/village.pybpodapi.bpod.hardware.output_channels", "api_generated/village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels", "api_generated/village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.OutputChannel", "api_generated/village.pybpodapi.bpod.non_blockingsocketreceive", "api_generated/village.pybpodapi.bpod.non_blockingsocketreceive.NonBlockingSocketReceive", "api_generated/village.pybpodapi.bpod.non_blockingsocketreceive.UnexpectedEndOfStream", "api_generated/village.pybpodapi.bpod.non_blockingstreamreader", "api_generated/village.pybpodapi.bpod.non_blockingstreamreader.NonBlockingStreamReader", "api_generated/village.pybpodapi.bpod.non_blockingstreamreader.UnexpectedEndOfStream", "api_generated/village.pybpodapi.bpod.settings", "api_generated/village.pybpodapi.bpod_modules", "api_generated/village.pybpodapi.bpod_modules.bpod_module", "api_generated/village.pybpodapi.bpod_modules.bpod_module.BpodModule", "api_generated/village.pybpodapi.bpod_modules.bpod_modules", "api_generated/village.pybpodapi.bpod_modules.bpod_modules.BpodModules", "api_generated/village.pybpodapi.com", "api_generated/village.pybpodapi.com.arcom", "api_generated/village.pybpodapi.com.arcom.ArCOM", "api_generated/village.pybpodapi.com.arcom.ArduinoTypes", "api_generated/village.pybpodapi.com.arcom.DataType", "api_generated/village.pybpodapi.com.messaging", "api_generated/village.pybpodapi.com.messaging.base_message", "api_generated/village.pybpodapi.com.messaging.base_message.BaseMessage", "api_generated/village.pybpodapi.com.messaging.debug", "api_generated/village.pybpodapi.com.messaging.debug.DebugMessage", "api_generated/village.pybpodapi.com.messaging.end_trial", "api_generated/village.pybpodapi.com.messaging.end_trial.EndTrial", "api_generated/village.pybpodapi.com.messaging.error", "api_generated/village.pybpodapi.com.messaging.error.ErrorMessage", "api_generated/village.pybpodapi.com.messaging.event_occurrence", "api_generated/village.pybpodapi.com.messaging.event_occurrence.EventOccurrence", "api_generated/village.pybpodapi.com.messaging.event_resume", "api_generated/village.pybpodapi.com.messaging.event_resume.EventResume", "api_generated/village.pybpodapi.com.messaging.parser", "api_generated/village.pybpodapi.com.messaging.parser.MessageParser", "api_generated/village.pybpodapi.com.messaging.session_info", "api_generated/village.pybpodapi.com.messaging.session_info.SessionInfo", "api_generated/village.pybpodapi.com.messaging.softcode_occurrence", "api_generated/village.pybpodapi.com.messaging.softcode_occurrence.SoftcodeOccurrence", "api_generated/village.pybpodapi.com.messaging.state_occurrence", "api_generated/village.pybpodapi.com.messaging.state_occurrence.StateOccurrence", "api_generated/village.pybpodapi.com.messaging.state_transition", "api_generated/village.pybpodapi.com.messaging.state_transition.StateTransition", "api_generated/village.pybpodapi.com.messaging.stderr", "api_generated/village.pybpodapi.com.messaging.stderr.StderrMessage", "api_generated/village.pybpodapi.com.messaging.stdout", "api_generated/village.pybpodapi.com.messaging.stdout.StdoutMessage", "api_generated/village.pybpodapi.com.messaging.trial", "api_generated/village.pybpodapi.com.messaging.trial.Trial", "api_generated/village.pybpodapi.com.messaging.untagged_message", "api_generated/village.pybpodapi.com.messaging.untagged_message.UntaggedMessage", "api_generated/village.pybpodapi.com.messaging.value", "api_generated/village.pybpodapi.com.messaging.value.ValueMessage", "api_generated/village.pybpodapi.com.messaging.warning", "api_generated/village.pybpodapi.com.messaging.warning.WarningMessage", "api_generated/village.pybpodapi.com.protocol", "api_generated/village.pybpodapi.com.protocol.recv_msg_headers", "api_generated/village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader", "api_generated/village.pybpodapi.com.protocol.send_msg_headers", "api_generated/village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader", "api_generated/village.pybpodapi.com.stderr_buffer", "api_generated/village.pybpodapi.com.stderr_buffer.StderrBuffer", "api_generated/village.pybpodapi.com.stdout_buffer", "api_generated/village.pybpodapi.com.stdout_buffer.StdoutBuffer", "api_generated/village.pybpodapi.exceptions", "api_generated/village.pybpodapi.exceptions.bpod_error", "api_generated/village.pybpodapi.exceptions.bpod_error.BpodErrorException", "api_generated/village.pybpodapi.protocol", "api_generated/village.pybpodapi.session", "api_generated/village.pybpodapi.session.Session", "api_generated/village.pybpodapi.session.StreamsWrapper", "api_generated/village.pybpodapi.state_machine", "api_generated/village.pybpodapi.state_machine.StateMachine", "api_generated/village.pybpodapi.state_machine.conditions", "api_generated/village.pybpodapi.state_machine.conditions.Conditions", "api_generated/village.pybpodapi.state_machine.global_counters", "api_generated/village.pybpodapi.state_machine.global_counters.GlobalCounters", "api_generated/village.pybpodapi.state_machine.global_timers", "api_generated/village.pybpodapi.state_machine.global_timers.GlobalTimers", "api_generated/village.pybpodapi.state_machine.state_machine_base", "api_generated/village.pybpodapi.state_machine.state_machine_base.SMAError", "api_generated/village.pybpodapi.state_machine.state_machine_base.StateMachineBase", "api_generated/village.pybpodapi.state_machine.state_machine_builder", "api_generated/village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder", "api_generated/village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilderError", "api_generated/village.pybpodapi.state_machine.state_machine_runner", "api_generated/village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner", "api_generated/village.pybpodapi.state_machine.state_machine_runner.StateMachineRunnerError", "api_generated/village.pybpodapi.utils", "api_generated/village.pybpodapi.utils.csv", "api_generated/village.pybpodapi.utils.csv.Reader", "api_generated/village.pybpodapi.utils.csv.Writer", "api_generated/village.pybpodapi.utils.date_parser", "api_generated/village.pybpodapi.utils.date_parser.parse", "api_generated/village.screen", "api_generated/village.screen.behavior_window", "api_generated/village.screen.behavior_window.BehaviorWindow", "api_index", "faq/faq", "faq_index", "how_to_build/assembly_instructions", "how_to_build/list_of_parts", "how_to_build/software_installation", "how_to_build_index", "index", "initial_configuration/backup", "initial_configuration/hardware", "initial_configuration/heartbeat", "initial_configuration/remote", "initial_configuration/telegram", "initial_configuration_index", "main/what_is", "resources/ISO", "resources/code", "resources/print_files", "resources_index", "troubleshooting/troubleshooting", "troubleshooting_index", "user_guide/GUI", "user_guide/alarms", "user_guide/animal_procedures", "user_guide/corridor", "user_guide/create", "user_guide/data", "user_guide/detection", "user_guide/maintenance", "user_guide/plots", "user_guide/settings", "user_guide/started", "user_guide/state_machine", "user_guide/subjects", "user_guide/test", "user_guide/use", "user_guide_index"], "envversion": {"nbsphinx": 4, "sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1}, "filenames": ["api_generated/village.classes.rst", "api_generated/village.classes.change_hour_run.rst", "api_generated/village.classes.change_hour_run.ChangeHourRun.rst", "api_generated/village.classes.enums.rst", "api_generated/village.classes.enums.Actions.rst", "api_generated/village.classes.enums.Active.rst", "api_generated/village.classes.enums.AreaActive.rst", "api_generated/village.classes.enums.Color.rst", "api_generated/village.classes.enums.Cycle.rst", "api_generated/village.classes.enums.DataTable.rst", "api_generated/village.classes.enums.Info.rst", "api_generated/village.classes.enums.Save.rst", "api_generated/village.classes.enums.ScreenActive.rst", "api_generated/village.classes.enums.State.rst", "api_generated/village.classes.enums.SuperEnum.rst", "api_generated/village.classes.settings_class.rst", "api_generated/village.classes.settings_class.Setting.rst", "api_generated/village.classes.settings_class.Settings.rst", "api_generated/village.classes.training.rst", "api_generated/village.classes.training.Settings.rst", "api_generated/village.classes.training.Training.rst", "api_generated/village.classes.training.TrainingError.rst", "api_generated/village.devices.rst", "api_generated/village.gui.rst", "api_generated/village.pybpodapi.rst", "api_generated/village.pybpodapi.bpod.rst", "api_generated/village.pybpodapi.bpod.Bpod.rst", "api_generated/village.pybpodapi.bpod.bpod_base.rst", "api_generated/village.pybpodapi.bpod.bpod_base.BpodBase.rst", "api_generated/village.pybpodapi.bpod.bpod_com_protocol.rst", "api_generated/village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.rst", "api_generated/village.pybpodapi.bpod.bpod_com_protocol_modules.rst", "api_generated/village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.rst", "api_generated/village.pybpodapi.bpod.bpod_io.rst", "api_generated/village.pybpodapi.bpod.bpod_io.BpodIO.rst", "api_generated/village.pybpodapi.bpod.hardware.rst", "api_generated/village.pybpodapi.bpod.hardware.channels.rst", "api_generated/village.pybpodapi.bpod.hardware.channels.ChannelName.rst", "api_generated/village.pybpodapi.bpod.hardware.channels.ChannelType.rst", "api_generated/village.pybpodapi.bpod.hardware.channels.Channels.rst", "api_generated/village.pybpodapi.bpod.hardware.channels.EventsPositions.rst", "api_generated/village.pybpodapi.bpod.hardware.events.rst", "api_generated/village.pybpodapi.bpod.hardware.events.base_eventname.rst", "api_generated/village.pybpodapi.bpod.hardware.events.base_eventname.BaseEventName.rst", "api_generated/village.pybpodapi.bpod.hardware.events.bpod_events.rst", "api_generated/village.pybpodapi.bpod.hardware.events.bpod_events.EventName.rst", "api_generated/village.pybpodapi.bpod.hardware.hardware.rst", "api_generated/village.pybpodapi.bpod.hardware.hardware.Hardware.rst", "api_generated/village.pybpodapi.bpod.hardware.input_channels.rst", "api_generated/village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.rst", "api_generated/village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.rst", "api_generated/village.pybpodapi.bpod.hardware.output_channels.rst", "api_generated/village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.rst", "api_generated/village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.OutputChannel.rst", "api_generated/village.pybpodapi.bpod.non_blockingsocketreceive.rst", "api_generated/village.pybpodapi.bpod.non_blockingsocketreceive.NonBlockingSocketReceive.rst", "api_generated/village.pybpodapi.bpod.non_blockingsocketreceive.UnexpectedEndOfStream.rst", "api_generated/village.pybpodapi.bpod.non_blockingstreamreader.rst", "api_generated/village.pybpodapi.bpod.non_blockingstreamreader.NonBlockingStreamReader.rst", "api_generated/village.pybpodapi.bpod.non_blockingstreamreader.UnexpectedEndOfStream.rst", "api_generated/village.pybpodapi.bpod.settings.rst", "api_generated/village.pybpodapi.bpod_modules.rst", "api_generated/village.pybpodapi.bpod_modules.bpod_module.rst", "api_generated/village.pybpodapi.bpod_modules.bpod_module.BpodModule.rst", "api_generated/village.pybpodapi.bpod_modules.bpod_modules.rst", "api_generated/village.pybpodapi.bpod_modules.bpod_modules.BpodModules.rst", "api_generated/village.pybpodapi.com.rst", "api_generated/village.pybpodapi.com.arcom.rst", "api_generated/village.pybpodapi.com.arcom.ArCOM.rst", "api_generated/village.pybpodapi.com.arcom.ArduinoTypes.rst", "api_generated/village.pybpodapi.com.arcom.DataType.rst", "api_generated/village.pybpodapi.com.messaging.rst", "api_generated/village.pybpodapi.com.messaging.base_message.rst", "api_generated/village.pybpodapi.com.messaging.base_message.BaseMessage.rst", "api_generated/village.pybpodapi.com.messaging.debug.rst", "api_generated/village.pybpodapi.com.messaging.debug.DebugMessage.rst", "api_generated/village.pybpodapi.com.messaging.end_trial.rst", "api_generated/village.pybpodapi.com.messaging.end_trial.EndTrial.rst", "api_generated/village.pybpodapi.com.messaging.error.rst", "api_generated/village.pybpodapi.com.messaging.error.ErrorMessage.rst", "api_generated/village.pybpodapi.com.messaging.event_occurrence.rst", "api_generated/village.pybpodapi.com.messaging.event_occurrence.EventOccurrence.rst", "api_generated/village.pybpodapi.com.messaging.event_resume.rst", "api_generated/village.pybpodapi.com.messaging.event_resume.EventResume.rst", "api_generated/village.pybpodapi.com.messaging.parser.rst", "api_generated/village.pybpodapi.com.messaging.parser.MessageParser.rst", "api_generated/village.pybpodapi.com.messaging.session_info.rst", "api_generated/village.pybpodapi.com.messaging.session_info.SessionInfo.rst", "api_generated/village.pybpodapi.com.messaging.softcode_occurrence.rst", "api_generated/village.pybpodapi.com.messaging.softcode_occurrence.SoftcodeOccurrence.rst", "api_generated/village.pybpodapi.com.messaging.state_occurrence.rst", "api_generated/village.pybpodapi.com.messaging.state_occurrence.StateOccurrence.rst", "api_generated/village.pybpodapi.com.messaging.state_transition.rst", "api_generated/village.pybpodapi.com.messaging.state_transition.StateTransition.rst", "api_generated/village.pybpodapi.com.messaging.stderr.rst", "api_generated/village.pybpodapi.com.messaging.stderr.StderrMessage.rst", "api_generated/village.pybpodapi.com.messaging.stdout.rst", "api_generated/village.pybpodapi.com.messaging.stdout.StdoutMessage.rst", "api_generated/village.pybpodapi.com.messaging.trial.rst", "api_generated/village.pybpodapi.com.messaging.trial.Trial.rst", "api_generated/village.pybpodapi.com.messaging.untagged_message.rst", "api_generated/village.pybpodapi.com.messaging.untagged_message.UntaggedMessage.rst", "api_generated/village.pybpodapi.com.messaging.value.rst", "api_generated/village.pybpodapi.com.messaging.value.ValueMessage.rst", "api_generated/village.pybpodapi.com.messaging.warning.rst", "api_generated/village.pybpodapi.com.messaging.warning.WarningMessage.rst", "api_generated/village.pybpodapi.com.protocol.rst", "api_generated/village.pybpodapi.com.protocol.recv_msg_headers.rst", "api_generated/village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader.rst", "api_generated/village.pybpodapi.com.protocol.send_msg_headers.rst", "api_generated/village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.rst", "api_generated/village.pybpodapi.com.stderr_buffer.rst", "api_generated/village.pybpodapi.com.stderr_buffer.StderrBuffer.rst", "api_generated/village.pybpodapi.com.stdout_buffer.rst", "api_generated/village.pybpodapi.com.stdout_buffer.StdoutBuffer.rst", "api_generated/village.pybpodapi.exceptions.rst", "api_generated/village.pybpodapi.exceptions.bpod_error.rst", "api_generated/village.pybpodapi.exceptions.bpod_error.BpodErrorException.rst", "api_generated/village.pybpodapi.protocol.rst", "api_generated/village.pybpodapi.session.rst", "api_generated/village.pybpodapi.session.Session.rst", "api_generated/village.pybpodapi.session.StreamsWrapper.rst", "api_generated/village.pybpodapi.state_machine.rst", "api_generated/village.pybpodapi.state_machine.StateMachine.rst", "api_generated/village.pybpodapi.state_machine.conditions.rst", "api_generated/village.pybpodapi.state_machine.conditions.Conditions.rst", "api_generated/village.pybpodapi.state_machine.global_counters.rst", "api_generated/village.pybpodapi.state_machine.global_counters.GlobalCounters.rst", "api_generated/village.pybpodapi.state_machine.global_timers.rst", "api_generated/village.pybpodapi.state_machine.global_timers.GlobalTimers.rst", "api_generated/village.pybpodapi.state_machine.state_machine_base.rst", "api_generated/village.pybpodapi.state_machine.state_machine_base.SMAError.rst", "api_generated/village.pybpodapi.state_machine.state_machine_base.StateMachineBase.rst", "api_generated/village.pybpodapi.state_machine.state_machine_builder.rst", "api_generated/village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder.rst", "api_generated/village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilderError.rst", "api_generated/village.pybpodapi.state_machine.state_machine_runner.rst", "api_generated/village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner.rst", "api_generated/village.pybpodapi.state_machine.state_machine_runner.StateMachineRunnerError.rst", "api_generated/village.pybpodapi.utils.rst", "api_generated/village.pybpodapi.utils.csv.rst", "api_generated/village.pybpodapi.utils.csv.Reader.rst", "api_generated/village.pybpodapi.utils.csv.Writer.rst", "api_generated/village.pybpodapi.utils.date_parser.rst", "api_generated/village.pybpodapi.utils.date_parser.parse.rst", "api_generated/village.screen.rst", "api_generated/village.screen.behavior_window.rst", "api_generated/village.screen.behavior_window.BehaviorWindow.rst", "api_index.rst", "faq/faq.md", "faq_index.rst", "how_to_build/assembly_instructions.md", "how_to_build/list_of_parts.md", "how_to_build/software_installation.md", "how_to_build_index.rst", "index.rst", "initial_configuration/backup.md", "initial_configuration/hardware.md", "initial_configuration/heartbeat.md", "initial_configuration/remote.md", "initial_configuration/telegram.md", "initial_configuration_index.rst", "main/what_is.md", "resources/ISO.md", "resources/code.md", "resources/print_files.md", "resources_index.rst", "troubleshooting/troubleshooting.md", "troubleshooting_index.rst", "user_guide/GUI.md", "user_guide/alarms.md", "user_guide/animal_procedures.md", "user_guide/corridor.md", "user_guide/create.md", "user_guide/data.md", "user_guide/detection.md", "user_guide/maintenance.md", "user_guide/plots.md", "user_guide/settings.md", "user_guide/started.md", "user_guide/state_machine.md", "user_guide/subjects.md", "user_guide/test.md", "user_guide/use.md", "user_guide_index.rst"], "indexentries": {"__init__() (actions method)": [[4, "village.classes.enums.Actions.__init__", false]], "__init__() (active method)": [[5, "village.classes.enums.Active.__init__", false]], "__init__() (arcom method)": [[68, "village.pybpodapi.com.arcom.ArCOM.__init__", false]], "__init__() (arduinotypes method)": [[69, "village.pybpodapi.com.arcom.ArduinoTypes.__init__", false]], "__init__() (areaactive method)": [[6, "village.classes.enums.AreaActive.__init__", false]], "__init__() (baseeventname method)": [[43, "village.pybpodapi.bpod.hardware.events.base_eventname.BaseEventName.__init__", false]], "__init__() (basemessage method)": [[73, "village.pybpodapi.com.messaging.base_message.BaseMessage.__init__", false]], "__init__() (behaviorwindow method)": [[147, "village.screen.behavior_window.BehaviorWindow.__init__", false]], "__init__() (bpod method)": [[26, "village.pybpodapi.bpod.Bpod.__init__", false]], "__init__() (bpodbase method)": [[28, "village.pybpodapi.bpod.bpod_base.BpodBase.__init__", false]], "__init__() (bpodcomprotocol method)": [[30, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.__init__", false]], "__init__() (bpodcomprotocolmodules method)": [[32, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.__init__", false]], "__init__() (bpodio method)": [[34, "village.pybpodapi.bpod.bpod_io.BpodIO.__init__", false]], "__init__() (bpodmodule method)": [[63, "village.pybpodapi.bpod_modules.bpod_module.BpodModule.__init__", false]], "__init__() (bpodmodules method)": [[65, "village.pybpodapi.bpod_modules.bpod_modules.BpodModules.__init__", false]], "__init__() (changehourrun method)": [[2, "village.classes.change_hour_run.ChangeHourRun.__init__", false]], "__init__() (channelname method)": [[37, "village.pybpodapi.bpod.hardware.channels.ChannelName.__init__", false]], "__init__() (channels method)": [[39, "village.pybpodapi.bpod.hardware.channels.Channels.__init__", false]], "__init__() (channeltype method)": [[38, "village.pybpodapi.bpod.hardware.channels.ChannelType.__init__", false]], "__init__() (color method)": [[7, "village.classes.enums.Color.__init__", false]], "__init__() (conditions method)": [[125, "village.pybpodapi.state_machine.conditions.Conditions.__init__", false]], "__init__() (cycle method)": [[8, "village.classes.enums.Cycle.__init__", false]], "__init__() (datatable method)": [[9, "village.classes.enums.DataTable.__init__", false]], "__init__() (datatype method)": [[70, "village.pybpodapi.com.arcom.DataType.__init__", false]], "__init__() (debugmessage method)": [[75, "village.pybpodapi.com.messaging.debug.DebugMessage.__init__", false]], "__init__() (endtrial method)": [[77, "village.pybpodapi.com.messaging.end_trial.EndTrial.__init__", false]], "__init__() (errormessage method)": [[79, "village.pybpodapi.com.messaging.error.ErrorMessage.__init__", false]], "__init__() (eventname method)": [[45, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.__init__", false]], "__init__() (eventoccurrence method)": [[81, "village.pybpodapi.com.messaging.event_occurrence.EventOccurrence.__init__", false]], "__init__() (eventresume method)": [[83, "village.pybpodapi.com.messaging.event_resume.EventResume.__init__", false]], "__init__() (eventspositions method)": [[40, "village.pybpodapi.bpod.hardware.channels.EventsPositions.__init__", false]], "__init__() (globalcounters method)": [[127, "village.pybpodapi.state_machine.global_counters.GlobalCounters.__init__", false]], "__init__() (globaltimers method)": [[129, "village.pybpodapi.state_machine.global_timers.GlobalTimers.__init__", false]], "__init__() (hardware method)": [[47, "village.pybpodapi.bpod.hardware.hardware.Hardware.__init__", false]], "__init__() (info method)": [[10, "village.classes.enums.Info.__init__", false]], "__init__() (inputname method)": [[50, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.__init__", false]], "__init__() (messageparser method)": [[85, "village.pybpodapi.com.messaging.parser.MessageParser.__init__", false]], "__init__() (nonblockingsocketreceive method)": [[55, "village.pybpodapi.bpod.non_blockingsocketreceive.NonBlockingSocketReceive.__init__", false]], "__init__() (nonblockingstreamreader method)": [[58, "village.pybpodapi.bpod.non_blockingstreamreader.NonBlockingStreamReader.__init__", false]], "__init__() (outputchannel method)": [[53, "village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.OutputChannel.__init__", false]], "__init__() (reader method)": [[141, "village.pybpodapi.utils.csv.Reader.__init__", false]], "__init__() (receivemessageheader method)": [[108, "village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader.__init__", false]], "__init__() (save method)": [[11, "village.classes.enums.Save.__init__", false]], "__init__() (screenactive method)": [[12, "village.classes.enums.ScreenActive.__init__", false]], "__init__() (sendmessageheader method)": [[110, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.__init__", false]], "__init__() (session method)": [[120, "village.pybpodapi.session.Session.__init__", false]], "__init__() (sessioninfo method)": [[87, "village.pybpodapi.com.messaging.session_info.SessionInfo.__init__", false]], "__init__() (setting method)": [[16, "village.classes.settings_class.Setting.__init__", false]], "__init__() (settings method)": [[17, "village.classes.settings_class.Settings.__init__", false], [19, "village.classes.training.Settings.__init__", false]], "__init__() (softcodeoccurrence method)": [[89, "village.pybpodapi.com.messaging.softcode_occurrence.SoftcodeOccurrence.__init__", false]], "__init__() (state method)": [[13, "village.classes.enums.State.__init__", false]], "__init__() (statemachine method)": [[123, "village.pybpodapi.state_machine.StateMachine.__init__", false]], "__init__() (statemachinebase method)": [[132, "village.pybpodapi.state_machine.state_machine_base.StateMachineBase.__init__", false]], "__init__() (statemachinebuilder method)": [[134, "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder.__init__", false]], "__init__() (statemachinerunner method)": [[137, "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner.__init__", false]], "__init__() (stateoccurrence method)": [[91, "village.pybpodapi.com.messaging.state_occurrence.StateOccurrence.__init__", false]], "__init__() (statetransition method)": [[93, "village.pybpodapi.com.messaging.state_transition.StateTransition.__init__", false]], "__init__() (stderrbuffer method)": [[112, "village.pybpodapi.com.stderr_buffer.StderrBuffer.__init__", false]], "__init__() (stderrmessage method)": [[95, "village.pybpodapi.com.messaging.stderr.StderrMessage.__init__", false]], "__init__() (stdoutbuffer method)": [[114, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.__init__", false]], "__init__() (stdoutmessage method)": [[97, "village.pybpodapi.com.messaging.stdout.StdoutMessage.__init__", false]], "__init__() (streamswrapper method)": [[121, "village.pybpodapi.session.StreamsWrapper.__init__", false]], "__init__() (superenum method)": [[14, "village.classes.enums.SuperEnum.__init__", false]], "__init__() (training method)": [[20, "village.classes.training.Training.__init__", false]], "__init__() (trial method)": [[99, "village.pybpodapi.com.messaging.trial.Trial.__init__", false]], "__init__() (untaggedmessage method)": [[101, "village.pybpodapi.com.messaging.untagged_message.UntaggedMessage.__init__", false]], "__init__() (valuemessage method)": [[103, "village.pybpodapi.com.messaging.value.ValueMessage.__init__", false]], "__init__() (warningmessage method)": [[105, "village.pybpodapi.com.messaging.warning.WarningMessage.__init__", false]], "__init__() (writer method)": [[142, "village.pybpodapi.utils.csv.Writer.__init__", false]], "actions (class in village.classes.enums)": [[4, "village.classes.enums.Actions", false]], "active (class in village.classes.enums)": [[5, "village.classes.enums.Active", false]], "add_state() (statemachine method)": [[123, "village.pybpodapi.state_machine.StateMachine.add_state", false]], "add_state() (statemachinebase method)": [[132, "village.pybpodapi.state_machine.state_machine_base.StateMachineBase.add_state", false]], "add_state() (statemachinebuilder method)": [[134, "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder.add_state", false]], "add_state() (statemachinerunner method)": [[137, "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner.add_state", false]], "animate() (behaviorwindow method)": [[147, "village.screen.behavior_window.BehaviorWindow.animate", false]], "arcom (class in village.pybpodapi.com.arcom)": [[68, "village.pybpodapi.com.arcom.ArCOM", false]], "arduinotypes (class in village.pybpodapi.com.arcom)": [[69, "village.pybpodapi.com.arcom.ArduinoTypes", false]], "areaactive (class in village.classes.enums)": [[6, "village.classes.enums.AreaActive", false]], "baseeventname (class in village.pybpodapi.bpod.hardware.events.base_eventname)": [[43, "village.pybpodapi.bpod.hardware.events.base_eventname.BaseEventName", false]], "basemessage (class in village.pybpodapi.com.messaging.base_message)": [[73, "village.pybpodapi.com.messaging.base_message.BaseMessage", false]], "behaviorwindow (class in village.screen.behavior_window)": [[147, "village.screen.behavior_window.BehaviorWindow", false]], "bnc (bpod.channelnames attribute)": [[26, "village.pybpodapi.bpod.Bpod.ChannelNames.BNC", false]], "bnc (bpodbase.channelnames attribute)": [[28, "village.pybpodapi.bpod.bpod_base.BpodBase.ChannelNames.BNC", false]], "bnc (bpodcomprotocol.channelnames attribute)": [[30, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.ChannelNames.BNC", false]], "bnc (bpodcomprotocolmodules.channelnames attribute)": [[32, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.ChannelNames.BNC", false]], "bnc (bpodio.channelnames attribute)": [[34, "village.pybpodapi.bpod.bpod_io.BpodIO.ChannelNames.BNC", false]], "bnc (channelname attribute)": [[37, "village.pybpodapi.bpod.hardware.channels.ChannelName.BNC", false]], "bnc1 (inputname attribute)": [[50, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.BNC1", false]], "bnc1high (bpod.events attribute)": [[26, "village.pybpodapi.bpod.Bpod.Events.BNC1High", false]], "bnc1high (bpod.outputchannels attribute)": [[26, "village.pybpodapi.bpod.Bpod.OutputChannels.BNC1High", false]], "bnc1high (bpodbase.events attribute)": [[28, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.BNC1High", false]], "bnc1high (bpodbase.outputchannels attribute)": [[28, "village.pybpodapi.bpod.bpod_base.BpodBase.OutputChannels.BNC1High", false]], "bnc1high (bpodcomprotocol.events attribute)": [[30, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.BNC1High", false]], "bnc1high (bpodcomprotocol.outputchannels attribute)": [[30, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.OutputChannels.BNC1High", false]], "bnc1high (bpodcomprotocolmodules.events attribute)": [[32, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.BNC1High", false]], "bnc1high (bpodcomprotocolmodules.outputchannels attribute)": [[32, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.OutputChannels.BNC1High", false]], "bnc1high (bpodio.events attribute)": [[34, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.BNC1High", false]], "bnc1high (bpodio.outputchannels attribute)": [[34, "village.pybpodapi.bpod.bpod_io.BpodIO.OutputChannels.BNC1High", false]], "bnc1high (eventname attribute)": [[45, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.BNC1High", false]], "bnc1high (outputchannel attribute)": [[53, "village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.OutputChannel.BNC1High", false]], "bnc2 (inputname attribute)": [[50, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.BNC2", false]], "bpod (class in village.pybpodapi.bpod)": [[26, "village.pybpodapi.bpod.Bpod", false]], "bpod.channelnames (class in village.pybpodapi.bpod)": [[26, "village.pybpodapi.bpod.Bpod.ChannelNames", false]], "bpod.channeltypes (class in village.pybpodapi.bpod)": [[26, "village.pybpodapi.bpod.Bpod.ChannelTypes", false]], "bpod.events (class in village.pybpodapi.bpod)": [[26, "village.pybpodapi.bpod.Bpod.Events", false]], "bpod.outputchannels (class in village.pybpodapi.bpod)": [[26, "village.pybpodapi.bpod.Bpod.OutputChannels", false]], "bpodbase (class in village.pybpodapi.bpod.bpod_base)": [[28, "village.pybpodapi.bpod.bpod_base.BpodBase", false]], "bpodbase.channelnames (class in village.pybpodapi.bpod.bpod_base)": [[28, "village.pybpodapi.bpod.bpod_base.BpodBase.ChannelNames", false]], "bpodbase.channeltypes (class in village.pybpodapi.bpod.bpod_base)": [[28, "village.pybpodapi.bpod.bpod_base.BpodBase.ChannelTypes", false]], "bpodbase.events (class in village.pybpodapi.bpod.bpod_base)": [[28, "village.pybpodapi.bpod.bpod_base.BpodBase.Events", false]], "bpodbase.outputchannels (class in village.pybpodapi.bpod.bpod_base)": [[28, "village.pybpodapi.bpod.bpod_base.BpodBase.OutputChannels", false]], "bpodcomprotocol (class in village.pybpodapi.bpod.bpod_com_protocol)": [[30, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol", false]], "bpodcomprotocol.channelnames (class in village.pybpodapi.bpod.bpod_com_protocol)": [[30, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.ChannelNames", false]], "bpodcomprotocol.channeltypes (class in village.pybpodapi.bpod.bpod_com_protocol)": [[30, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.ChannelTypes", false]], "bpodcomprotocol.events (class in village.pybpodapi.bpod.bpod_com_protocol)": [[30, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events", false]], "bpodcomprotocol.outputchannels (class in village.pybpodapi.bpod.bpod_com_protocol)": [[30, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.OutputChannels", false]], "bpodcomprotocolmodules (class in village.pybpodapi.bpod.bpod_com_protocol_modules)": [[32, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules", false]], "bpodcomprotocolmodules.channelnames (class in village.pybpodapi.bpod.bpod_com_protocol_modules)": [[32, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.ChannelNames", false]], "bpodcomprotocolmodules.channeltypes (class in village.pybpodapi.bpod.bpod_com_protocol_modules)": [[32, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.ChannelTypes", false]], "bpodcomprotocolmodules.events (class in village.pybpodapi.bpod.bpod_com_protocol_modules)": [[32, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events", false]], "bpodcomprotocolmodules.outputchannels (class in village.pybpodapi.bpod.bpod_com_protocol_modules)": [[32, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.OutputChannels", false]], "bpoderrorexception": [[117, "village.pybpodapi.exceptions.bpod_error.BpodErrorException", false]], "bpodio (class in village.pybpodapi.bpod.bpod_io)": [[34, "village.pybpodapi.bpod.bpod_io.BpodIO", false]], "bpodio.channelnames (class in village.pybpodapi.bpod.bpod_io)": [[34, "village.pybpodapi.bpod.bpod_io.BpodIO.ChannelNames", false]], "bpodio.channeltypes (class in village.pybpodapi.bpod.bpod_io)": [[34, "village.pybpodapi.bpod.bpod_io.BpodIO.ChannelTypes", false]], "bpodio.events (class in village.pybpodapi.bpod.bpod_io)": [[34, "village.pybpodapi.bpod.bpod_io.BpodIO.Events", false]], "bpodio.outputchannels (class in village.pybpodapi.bpod.bpod_io)": [[34, "village.pybpodapi.bpod.bpod_io.BpodIO.OutputChannels", false]], "bpodmodule (class in village.pybpodapi.bpod_modules.bpod_module)": [[63, "village.pybpodapi.bpod_modules.bpod_module.BpodModule", false]], "bpodmodules (class in village.pybpodapi.bpod_modules.bpod_modules)": [[65, "village.pybpodapi.bpod_modules.bpod_modules.BpodModules", false]], "build_message() (statemachine method)": [[123, "village.pybpodapi.state_machine.StateMachine.build_message", false]], "build_message() (statemachinebuilder method)": [[134, "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder.build_message", false]], "build_message() (statemachinerunner method)": [[137, "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner.build_message", false]], "build_message_32_bits() (statemachine method)": [[123, "village.pybpodapi.state_machine.StateMachine.build_message_32_bits", false]], "build_message_32_bits() (statemachinebuilder method)": [[134, "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder.build_message_32_bits", false]], "build_message_32_bits() (statemachinerunner method)": [[137, "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner.build_message_32_bits", false]], "bytes_available() (arcom method)": [[68, "village.pybpodapi.com.arcom.ArCOM.bytes_available", false]], "changehourrun (class in village.classes.change_hour_run)": [[2, "village.classes.change_hour_run.ChangeHourRun", false]], "channelname (class in village.pybpodapi.bpod.hardware.channels)": [[37, "village.pybpodapi.bpod.hardware.channels.ChannelName", false]], "channels (class in village.pybpodapi.bpod.hardware.channels)": [[39, "village.pybpodapi.bpod.hardware.channels.Channels", false]], "channeltype (class in village.pybpodapi.bpod.hardware.channels)": [[38, "village.pybpodapi.bpod.hardware.channels.ChannelType", false]], "check_type() (basemessage class method)": [[73, "village.pybpodapi.com.messaging.base_message.BaseMessage.check_type", false]], "check_type() (debugmessage class method)": [[75, "village.pybpodapi.com.messaging.debug.DebugMessage.check_type", false]], "check_type() (endtrial class method)": [[77, "village.pybpodapi.com.messaging.end_trial.EndTrial.check_type", false]], "check_type() (errormessage class method)": [[79, "village.pybpodapi.com.messaging.error.ErrorMessage.check_type", false]], "check_type() (eventoccurrence class method)": [[81, "village.pybpodapi.com.messaging.event_occurrence.EventOccurrence.check_type", false]], "check_type() (eventresume class method)": [[83, "village.pybpodapi.com.messaging.event_resume.EventResume.check_type", false]], "check_type() (sessioninfo class method)": [[87, "village.pybpodapi.com.messaging.session_info.SessionInfo.check_type", false]], "check_type() (softcodeoccurrence class method)": [[89, "village.pybpodapi.com.messaging.softcode_occurrence.SoftcodeOccurrence.check_type", false]], "check_type() (stateoccurrence class method)": [[91, "village.pybpodapi.com.messaging.state_occurrence.StateOccurrence.check_type", false]], "check_type() (statetransition class method)": [[93, "village.pybpodapi.com.messaging.state_transition.StateTransition.check_type", false]], "check_type() (stderrmessage class method)": [[95, "village.pybpodapi.com.messaging.stderr.StderrMessage.check_type", false]], "check_type() (stdoutmessage class method)": [[97, "village.pybpodapi.com.messaging.stdout.StdoutMessage.check_type", false]], "check_type() (trial class method)": [[99, "village.pybpodapi.com.messaging.trial.Trial.check_type", false]], "check_type() (untaggedmessage class method)": [[101, "village.pybpodapi.com.messaging.untagged_message.UntaggedMessage.check_type", false]], "check_type() (valuemessage class method)": [[103, "village.pybpodapi.com.messaging.value.ValueMessage.check_type", false]], "check_type() (warningmessage class method)": [[105, "village.pybpodapi.com.messaging.warning.WarningMessage.check_type", false]], "close() (arcom method)": [[68, "village.pybpodapi.com.arcom.ArCOM.close", false]], "close() (bpod method)": [[26, "village.pybpodapi.bpod.Bpod.close", false]], "close() (bpodbase method)": [[28, "village.pybpodapi.bpod.bpod_base.BpodBase.close", false]], "close() (bpodcomprotocol method)": [[30, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.close", false]], "close() (bpodcomprotocolmodules method)": [[32, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.close", false]], "close() (bpodio method)": [[34, "village.pybpodapi.bpod.bpod_io.BpodIO.close", false]], "close() (stderrbuffer method)": [[112, "village.pybpodapi.com.stderr_buffer.StderrBuffer.close", false]], "close() (stdoutbuffer method)": [[114, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.close", false]], "color (class in village.classes.enums)": [[7, "village.classes.enums.Color", false]], "condition1 (bpod.events attribute)": [[26, "village.pybpodapi.bpod.Bpod.Events.Condition1", false]], "condition1 (bpodbase.events attribute)": [[28, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.Condition1", false]], "condition1 (bpodcomprotocol.events attribute)": [[30, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.Condition1", false]], "condition1 (bpodcomprotocolmodules.events attribute)": [[32, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.Condition1", false]], "condition1 (bpodio.events attribute)": [[34, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.Condition1", false]], "condition1 (eventname attribute)": [[45, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.Condition1", false]], "conditions (class in village.pybpodapi.state_machine.conditions)": [[125, "village.pybpodapi.state_machine.conditions.Conditions", false]], "current_trial (session property)": [[120, "village.pybpodapi.session.Session.current_trial", false]], "cycle (class in village.classes.enums)": [[8, "village.classes.enums.Cycle", false]], "data_available() (bpod method)": [[26, "village.pybpodapi.bpod.Bpod.data_available", false]], "data_available() (bpodcomprotocol method)": [[30, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.data_available", false]], "data_available() (bpodcomprotocolmodules method)": [[32, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.data_available", false]], "data_available() (bpodio method)": [[34, "village.pybpodapi.bpod.bpod_io.BpodIO.data_available", false]], "datatable (class in village.classes.enums)": [[9, "village.classes.enums.DataTable", false]], "datatype (class in village.pybpodapi.com.arcom)": [[70, "village.pybpodapi.com.arcom.DataType", false]], "debugmessage (class in village.pybpodapi.com.messaging.debug)": [[75, "village.pybpodapi.com.messaging.debug.DebugMessage", false]], "detach() (stderrbuffer method)": [[112, "village.pybpodapi.com.stderr_buffer.StderrBuffer.detach", false]], "detach() (stdoutbuffer method)": [[114, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.detach", false]], "disconnect (sendmessageheader attribute)": [[110, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.DISCONNECT", false]], "echo_softcode (sendmessageheader attribute)": [[110, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.ECHO_SOFTCODE", false]], "enable_ports (sendmessageheader attribute)": [[110, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.ENABLE_PORTS", false]], "enable_ports_ok (receivemessageheader attribute)": [[108, "village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader.ENABLE_PORTS_OK", false]], "encoding (stderrbuffer attribute)": [[112, "village.pybpodapi.com.stderr_buffer.StderrBuffer.encoding", false]], "encoding (stdoutbuffer attribute)": [[114, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.encoding", false]], "endtrial (class in village.pybpodapi.com.messaging.end_trial)": [[77, "village.pybpodapi.com.messaging.end_trial.EndTrial", false]], "errormessage (class in village.pybpodapi.com.messaging.error)": [[79, "village.pybpodapi.com.messaging.error.ErrorMessage", false]], "errors (stderrbuffer attribute)": [[112, "village.pybpodapi.com.stderr_buffer.StderrBuffer.errors", false]], "errors (stdoutbuffer attribute)": [[114, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.errors", false]], "eventname (class in village.pybpodapi.bpod.hardware.events.bpod_events)": [[45, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName", false]], "eventoccurrence (class in village.pybpodapi.com.messaging.event_occurrence)": [[81, "village.pybpodapi.com.messaging.event_occurrence.EventOccurrence", false]], "eventresume (class in village.pybpodapi.com.messaging.event_resume)": [[83, "village.pybpodapi.com.messaging.event_resume.EventResume", false]], "eventspositions (class in village.pybpodapi.bpod.hardware.channels)": [[40, "village.pybpodapi.bpod.hardware.channels.EventsPositions", false]], "exit_and_return (sendmessageheader attribute)": [[110, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.EXIT_AND_RETURN", false]], "fileno() (stderrbuffer method)": [[112, "village.pybpodapi.com.stderr_buffer.StderrBuffer.fileno", false]], "fileno() (stdoutbuffer method)": [[114, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.fileno", false]], "find_module_by_name() (bpod method)": [[26, "village.pybpodapi.bpod.Bpod.find_module_by_name", false]], "find_module_by_name() (bpodbase method)": [[28, "village.pybpodapi.bpod.bpod_base.BpodBase.find_module_by_name", false]], "find_module_by_name() (bpodcomprotocol method)": [[30, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.find_module_by_name", false]], "find_module_by_name() (bpodcomprotocolmodules method)": [[32, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.find_module_by_name", false]], "find_module_by_name() (bpodio method)": [[34, "village.pybpodapi.bpod.bpod_io.BpodIO.find_module_by_name", false]], "firmware_version (sendmessageheader attribute)": [[110, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.FIRMWARE_VERSION", false]], "flush() (stderrbuffer method)": [[112, "village.pybpodapi.com.stderr_buffer.StderrBuffer.flush", false]], "flush() (stdoutbuffer method)": [[114, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.flush", false]], "fromlist() (basemessage class method)": [[73, "village.pybpodapi.com.messaging.base_message.BaseMessage.fromlist", false]], "fromlist() (debugmessage class method)": [[75, "village.pybpodapi.com.messaging.debug.DebugMessage.fromlist", false]], "fromlist() (endtrial class method)": [[77, "village.pybpodapi.com.messaging.end_trial.EndTrial.fromlist", false]], "fromlist() (errormessage class method)": [[79, "village.pybpodapi.com.messaging.error.ErrorMessage.fromlist", false]], "fromlist() (eventoccurrence class method)": [[81, "village.pybpodapi.com.messaging.event_occurrence.EventOccurrence.fromlist", false]], "fromlist() (eventresume class method)": [[83, "village.pybpodapi.com.messaging.event_resume.EventResume.fromlist", false]], "fromlist() (messageparser method)": [[85, "village.pybpodapi.com.messaging.parser.MessageParser.fromlist", false]], "fromlist() (sessioninfo class method)": [[87, "village.pybpodapi.com.messaging.session_info.SessionInfo.fromlist", false]], "fromlist() (softcodeoccurrence class method)": [[89, "village.pybpodapi.com.messaging.softcode_occurrence.SoftcodeOccurrence.fromlist", false]], "fromlist() (stateoccurrence class method)": [[91, "village.pybpodapi.com.messaging.state_occurrence.StateOccurrence.fromlist", false]], "fromlist() (statetransition class method)": [[93, "village.pybpodapi.com.messaging.state_transition.StateTransition.fromlist", false]], "fromlist() (stderrmessage class method)": [[95, "village.pybpodapi.com.messaging.stderr.StderrMessage.fromlist", false]], "fromlist() (stdoutmessage class method)": [[97, "village.pybpodapi.com.messaging.stdout.StdoutMessage.fromlist", false]], "fromlist() (trial class method)": [[99, "village.pybpodapi.com.messaging.trial.Trial.fromlist", false]], "fromlist() (untaggedmessage class method)": [[101, "village.pybpodapi.com.messaging.untagged_message.UntaggedMessage.fromlist", false]], "fromlist() (valuemessage class method)": [[103, "village.pybpodapi.com.messaging.value.ValueMessage.fromlist", false]], "fromlist() (warningmessage class method)": [[105, "village.pybpodapi.com.messaging.warning.WarningMessage.fromlist", false]], "get() (settings method)": [[17, "village.classes.settings_class.Settings.get", false]], "get_all_timestamps_by_event() (trial method)": [[99, "village.pybpodapi.com.messaging.trial.Trial.get_all_timestamps_by_event", false]], "get_description() (settings method)": [[17, "village.classes.settings_class.Settings.get_description", false]], "get_event_name() (channels method)": [[39, "village.pybpodapi.bpod.hardware.channels.Channels.get_event_name", false]], "get_events_names() (trial method)": [[99, "village.pybpodapi.com.messaging.trial.Trial.get_events_names", false]], "get_index() (settings method)": [[17, "village.classes.settings_class.Settings.get_index", false]], "get_indices() (settings method)": [[17, "village.classes.settings_class.Settings.get_indices", false]], "get_modules (sendmessageheader attribute)": [[110, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.GET_MODULES", false]], "get_text() (settings method)": [[17, "village.classes.settings_class.Settings.get_text", false]], "get_timestamp_transmission (sendmessageheader attribute)": [[110, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.GET_TIMESTAMP_TRANSMISSION", false]], "get_timestamps_by_event_name() (trial method)": [[99, "village.pybpodapi.com.messaging.trial.Trial.get_timestamps_by_event_name", false]], "get_type() (settings method)": [[17, "village.classes.settings_class.Settings.get_type", false]], "get_values() (settings method)": [[17, "village.classes.settings_class.Settings.get_values", false]], "getvalue() (stderrbuffer method)": [[112, "village.pybpodapi.com.stderr_buffer.StderrBuffer.getvalue", false]], "getvalue() (stdoutbuffer method)": [[114, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.getvalue", false]], "globalcounter1end (bpod.events attribute)": [[26, "village.pybpodapi.bpod.Bpod.Events.GlobalCounter1End", false]], "globalcounter1end (bpodbase.events attribute)": [[28, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.GlobalCounter1End", false]], "globalcounter1end (bpodcomprotocol.events attribute)": [[30, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.GlobalCounter1End", false]], "globalcounter1end (bpodcomprotocolmodules.events attribute)": [[32, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.GlobalCounter1End", false]], "globalcounter1end (bpodio.events attribute)": [[34, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.GlobalCounter1End", false]], "globalcounter1end (eventname attribute)": [[45, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.GlobalCounter1End", false]], "globalcounter1reset (bpod.outputchannels attribute)": [[26, "village.pybpodapi.bpod.Bpod.OutputChannels.GlobalCounter1Reset", false]], "globalcounter1reset (bpodbase.outputchannels attribute)": [[28, "village.pybpodapi.bpod.bpod_base.BpodBase.OutputChannels.GlobalCounter1Reset", false]], "globalcounter1reset (bpodcomprotocol.outputchannels attribute)": [[30, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.OutputChannels.GlobalCounter1Reset", false]], "globalcounter1reset (bpodcomprotocolmodules.outputchannels attribute)": [[32, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.OutputChannels.GlobalCounter1Reset", false]], "globalcounter1reset (bpodio.outputchannels attribute)": [[34, "village.pybpodapi.bpod.bpod_io.BpodIO.OutputChannels.GlobalCounter1Reset", false]], "globalcounter1reset (outputchannel attribute)": [[53, "village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.OutputChannel.GlobalCounter1Reset", false]], "globalcounters (class in village.pybpodapi.state_machine.global_counters)": [[127, "village.pybpodapi.state_machine.global_counters.GlobalCounters", false]], "globaltimer1cancel (bpod.outputchannels attribute)": [[26, "village.pybpodapi.bpod.Bpod.OutputChannels.GlobalTimer1Cancel", false]], "globaltimer1cancel (bpodbase.outputchannels attribute)": [[28, "village.pybpodapi.bpod.bpod_base.BpodBase.OutputChannels.GlobalTimer1Cancel", false]], "globaltimer1cancel (bpodcomprotocol.outputchannels attribute)": [[30, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.OutputChannels.GlobalTimer1Cancel", false]], "globaltimer1cancel (bpodcomprotocolmodules.outputchannels attribute)": [[32, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.OutputChannels.GlobalTimer1Cancel", false]], "globaltimer1cancel (bpodio.outputchannels attribute)": [[34, "village.pybpodapi.bpod.bpod_io.BpodIO.OutputChannels.GlobalTimer1Cancel", false]], "globaltimer1cancel (outputchannel attribute)": [[53, "village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.OutputChannel.GlobalTimer1Cancel", false]], "globaltimer1end (bpod.events attribute)": [[26, "village.pybpodapi.bpod.Bpod.Events.GlobalTimer1End", false]], "globaltimer1end (bpodbase.events attribute)": [[28, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.GlobalTimer1End", false]], "globaltimer1end (bpodcomprotocol.events attribute)": [[30, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.GlobalTimer1End", false]], "globaltimer1end (bpodcomprotocolmodules.events attribute)": [[32, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.GlobalTimer1End", false]], "globaltimer1end (bpodio.events attribute)": [[34, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.GlobalTimer1End", false]], "globaltimer1end (eventname attribute)": [[45, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.GlobalTimer1End", false]], "globaltimer1start (bpod.events attribute)": [[26, "village.pybpodapi.bpod.Bpod.Events.GlobalTimer1Start", false]], "globaltimer1start (bpodbase.events attribute)": [[28, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.GlobalTimer1Start", false]], "globaltimer1start (bpodcomprotocol.events attribute)": [[30, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.GlobalTimer1Start", false]], "globaltimer1start (bpodcomprotocolmodules.events attribute)": [[32, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.GlobalTimer1Start", false]], "globaltimer1start (bpodio.events attribute)": [[34, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.GlobalTimer1Start", false]], "globaltimer1start (eventname attribute)": [[45, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.GlobalTimer1Start", false]], "globaltimer1trig (bpod.outputchannels attribute)": [[26, "village.pybpodapi.bpod.Bpod.OutputChannels.GlobalTimer1Trig", false]], "globaltimer1trig (bpodbase.outputchannels attribute)": [[28, "village.pybpodapi.bpod.bpod_base.BpodBase.OutputChannels.GlobalTimer1Trig", false]], "globaltimer1trig (bpodcomprotocol.outputchannels attribute)": [[30, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.OutputChannels.GlobalTimer1Trig", false]], "globaltimer1trig (bpodcomprotocolmodules.outputchannels attribute)": [[32, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.OutputChannels.GlobalTimer1Trig", false]], "globaltimer1trig (bpodio.outputchannels attribute)": [[34, "village.pybpodapi.bpod.bpod_io.BpodIO.OutputChannels.GlobalTimer1Trig", false]], "globaltimer1trig (outputchannel attribute)": [[53, "village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.OutputChannel.GlobalTimer1Trig", false]], "globaltimers (class in village.pybpodapi.state_machine.global_timers)": [[129, "village.pybpodapi.state_machine.global_timers.GlobalTimers", false]], "handshake (sendmessageheader attribute)": [[110, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.HANDSHAKE", false]], "handshake_ok (receivemessageheader attribute)": [[108, "village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader.HANDSHAKE_OK", false]], "hardware (class in village.pybpodapi.bpod.hardware.hardware)": [[47, "village.pybpodapi.bpod.hardware.hardware.Hardware", false]], "hardware_description (sendmessageheader attribute)": [[110, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.HARDWARE_DESCRIPTION", false]], "info (class in village.classes.enums)": [[10, "village.classes.enums.Info", false]], "input (bpod.channeltypes attribute)": [[26, "village.pybpodapi.bpod.Bpod.ChannelTypes.INPUT", false]], "input (bpodbase.channeltypes attribute)": [[28, "village.pybpodapi.bpod.bpod_base.BpodBase.ChannelTypes.INPUT", false]], "input (bpodcomprotocol.channeltypes attribute)": [[30, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.ChannelTypes.INPUT", false]], "input (bpodcomprotocolmodules.channeltypes attribute)": [[32, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.ChannelTypes.INPUT", false]], "input (bpodio.channeltypes attribute)": [[34, "village.pybpodapi.bpod.bpod_io.BpodIO.ChannelTypes.INPUT", false]], "input (channeltype attribute)": [[38, "village.pybpodapi.bpod.hardware.channels.ChannelType.INPUT", false]], "inputname (class in village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels)": [[50, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName", false]], "is_condition() (baseeventname static method)": [[43, "village.pybpodapi.bpod.hardware.events.base_eventname.BaseEventName.is_condition", false]], "is_condition() (bpod.events static method)": [[26, "village.pybpodapi.bpod.Bpod.Events.is_condition", false]], "is_condition() (bpodbase.events static method)": [[28, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.is_condition", false]], "is_condition() (bpodcomprotocol.events static method)": [[30, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.is_condition", false]], "is_condition() (bpodcomprotocolmodules.events static method)": [[32, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.is_condition", false]], "is_condition() (bpodio.events static method)": [[34, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.is_condition", false]], "is_condition() (eventname static method)": [[45, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.is_condition", false]], "is_global_counter_end() (baseeventname static method)": [[43, "village.pybpodapi.bpod.hardware.events.base_eventname.BaseEventName.is_global_counter_end", false]], "is_global_counter_end() (bpod.events static method)": [[26, "village.pybpodapi.bpod.Bpod.Events.is_global_counter_end", false]], "is_global_counter_end() (bpodbase.events static method)": [[28, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.is_global_counter_end", false]], "is_global_counter_end() (bpodcomprotocol.events static method)": [[30, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.is_global_counter_end", false]], "is_global_counter_end() (bpodcomprotocolmodules.events static method)": [[32, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.is_global_counter_end", false]], "is_global_counter_end() (bpodio.events static method)": [[34, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.is_global_counter_end", false]], "is_global_counter_end() (eventname static method)": [[45, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.is_global_counter_end", false]], "is_global_timer_cancel() (baseeventname static method)": [[43, "village.pybpodapi.bpod.hardware.events.base_eventname.BaseEventName.is_global_timer_cancel", false]], "is_global_timer_cancel() (bpod.events static method)": [[26, "village.pybpodapi.bpod.Bpod.Events.is_global_timer_cancel", false]], "is_global_timer_cancel() (bpodbase.events static method)": [[28, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.is_global_timer_cancel", false]], "is_global_timer_cancel() (bpodcomprotocol.events static method)": [[30, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.is_global_timer_cancel", false]], "is_global_timer_cancel() (bpodcomprotocolmodules.events static method)": [[32, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.is_global_timer_cancel", false]], "is_global_timer_cancel() (bpodio.events static method)": [[34, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.is_global_timer_cancel", false]], "is_global_timer_cancel() (eventname static method)": [[45, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.is_global_timer_cancel", false]], "is_global_timer_end() (baseeventname static method)": [[43, "village.pybpodapi.bpod.hardware.events.base_eventname.BaseEventName.is_global_timer_end", false]], "is_global_timer_end() (bpod.events static method)": [[26, "village.pybpodapi.bpod.Bpod.Events.is_global_timer_end", false]], "is_global_timer_end() (bpodbase.events static method)": [[28, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.is_global_timer_end", false]], "is_global_timer_end() (bpodcomprotocol.events static method)": [[30, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.is_global_timer_end", false]], "is_global_timer_end() (bpodcomprotocolmodules.events static method)": [[32, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.is_global_timer_end", false]], "is_global_timer_end() (bpodio.events static method)": [[34, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.is_global_timer_end", false]], "is_global_timer_end() (eventname static method)": [[45, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.is_global_timer_end", false]], "is_global_timer_start() (baseeventname static method)": [[43, "village.pybpodapi.bpod.hardware.events.base_eventname.BaseEventName.is_global_timer_start", false]], "is_global_timer_start() (bpod.events static method)": [[26, "village.pybpodapi.bpod.Bpod.Events.is_global_timer_start", false]], "is_global_timer_start() (bpodbase.events static method)": [[28, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.is_global_timer_start", false]], "is_global_timer_start() (bpodcomprotocol.events static method)": [[30, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.is_global_timer_start", false]], "is_global_timer_start() (bpodcomprotocolmodules.events static method)": [[32, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.is_global_timer_start", false]], "is_global_timer_start() (bpodio.events static method)": [[34, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.is_global_timer_start", false]], "is_global_timer_start() (eventname static method)": [[45, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.is_global_timer_start", false]], "is_global_timer_trigger() (baseeventname static method)": [[43, "village.pybpodapi.bpod.hardware.events.base_eventname.BaseEventName.is_global_timer_trigger", false]], "is_global_timer_trigger() (bpod.events static method)": [[26, "village.pybpodapi.bpod.Bpod.Events.is_global_timer_trigger", false]], "is_global_timer_trigger() (bpodbase.events static method)": [[28, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.is_global_timer_trigger", false]], "is_global_timer_trigger() (bpodcomprotocol.events static method)": [[30, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.is_global_timer_trigger", false]], "is_global_timer_trigger() (bpodcomprotocolmodules.events static method)": [[32, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.is_global_timer_trigger", false]], "is_global_timer_trigger() (bpodio.events static method)": [[34, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.is_global_timer_trigger", false]], "is_global_timer_trigger() (eventname static method)": [[45, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.is_global_timer_trigger", false]], "is_state_timer() (baseeventname static method)": [[43, "village.pybpodapi.bpod.hardware.events.base_eventname.BaseEventName.is_state_timer", false]], "is_state_timer() (bpod.events static method)": [[26, "village.pybpodapi.bpod.Bpod.Events.is_state_timer", false]], "is_state_timer() (bpodbase.events static method)": [[28, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.is_state_timer", false]], "is_state_timer() (bpodcomprotocol.events static method)": [[30, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.is_state_timer", false]], "is_state_timer() (bpodcomprotocolmodules.events static method)": [[32, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.is_state_timer", false]], "is_state_timer() (bpodio.events static method)": [[34, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.is_state_timer", false]], "is_state_timer() (eventname static method)": [[45, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.is_state_timer", false]], "isatty() (stderrbuffer method)": [[112, "village.pybpodapi.com.stderr_buffer.StderrBuffer.isatty", false]], "isatty() (stdoutbuffer method)": [[114, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.isatty", false]], "load_message() (bpodmodule method)": [[63, "village.pybpodapi.bpod_modules.bpod_module.BpodModule.load_message", false]], "load_serial_message (sendmessageheader attribute)": [[110, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.LOAD_SERIAL_MESSAGE", false]], "load_serial_message() (bpod method)": [[26, "village.pybpodapi.bpod.Bpod.load_serial_message", false]], "load_serial_message() (bpodbase method)": [[28, "village.pybpodapi.bpod.bpod_base.BpodBase.load_serial_message", false]], "load_serial_message() (bpodcomprotocol method)": [[30, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.load_serial_message", false]], "load_serial_message() (bpodcomprotocolmodules method)": [[32, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.load_serial_message", false]], "load_serial_message() (bpodio method)": [[34, "village.pybpodapi.bpod.bpod_io.BpodIO.load_serial_message", false]], "load_serial_message_ok (receivemessageheader attribute)": [[108, "village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader.LOAD_SERIAL_MESSAGE_OK", false]], "loop_handler() (bpod method)": [[26, "village.pybpodapi.bpod.Bpod.loop_handler", false]], "loop_handler() (bpodbase method)": [[28, "village.pybpodapi.bpod.bpod_base.BpodBase.loop_handler", false]], "loop_handler() (bpodcomprotocol method)": [[30, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.loop_handler", false]], "loop_handler() (bpodcomprotocolmodules method)": [[32, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.loop_handler", false]], "loop_handler() (bpodio method)": [[34, "village.pybpodapi.bpod.bpod_io.BpodIO.loop_handler", false]], "manual_override() (bpod method)": [[26, "village.pybpodapi.bpod.Bpod.manual_override", false]], "manual_override() (bpodcomprotocol method)": [[30, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.manual_override", false]], "manual_override() (bpodcomprotocolmodules method)": [[32, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.manual_override", false]], "manual_override() (bpodio method)": [[34, "village.pybpodapi.bpod.bpod_io.BpodIO.manual_override", false]], "manual_override_exec_event (sendmessageheader attribute)": [[110, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.MANUAL_OVERRIDE_EXEC_EVENT", false]], "messageparser (class in village.pybpodapi.com.messaging.parser)": [[85, "village.pybpodapi.com.messaging.parser.MessageParser", false]], "module": [[0, "module-village.classes", false], [1, "module-village.classes.change_hour_run", false], [3, "module-village.classes.enums", false], [15, "module-village.classes.settings_class", false], [18, "module-village.classes.training", false], [22, "module-village.devices", false], [23, "module-village.gui", false], [24, "module-village.pybpodapi", false], [25, "module-village.pybpodapi.bpod", false], [27, "module-village.pybpodapi.bpod.bpod_base", false], [29, "module-village.pybpodapi.bpod.bpod_com_protocol", false], [31, "module-village.pybpodapi.bpod.bpod_com_protocol_modules", false], [33, "module-village.pybpodapi.bpod.bpod_io", false], [35, "module-village.pybpodapi.bpod.hardware", false], [36, "module-village.pybpodapi.bpod.hardware.channels", false], [41, "module-village.pybpodapi.bpod.hardware.events", false], [42, "module-village.pybpodapi.bpod.hardware.events.base_eventname", false], [44, "module-village.pybpodapi.bpod.hardware.events.bpod_events", false], [46, "module-village.pybpodapi.bpod.hardware.hardware", false], [48, "module-village.pybpodapi.bpod.hardware.input_channels", false], [49, "module-village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels", false], [51, "module-village.pybpodapi.bpod.hardware.output_channels", false], [52, "module-village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels", false], [54, "module-village.pybpodapi.bpod.non_blockingsocketreceive", false], [57, "module-village.pybpodapi.bpod.non_blockingstreamreader", false], [60, "module-village.pybpodapi.bpod.settings", false], [61, "module-village.pybpodapi.bpod_modules", false], [62, "module-village.pybpodapi.bpod_modules.bpod_module", false], [64, "module-village.pybpodapi.bpod_modules.bpod_modules", false], [66, "module-village.pybpodapi.com", false], [67, "module-village.pybpodapi.com.arcom", false], [71, "module-village.pybpodapi.com.messaging", false], [72, "module-village.pybpodapi.com.messaging.base_message", false], [74, "module-village.pybpodapi.com.messaging.debug", false], [76, "module-village.pybpodapi.com.messaging.end_trial", false], [78, "module-village.pybpodapi.com.messaging.error", false], [80, "module-village.pybpodapi.com.messaging.event_occurrence", false], [82, "module-village.pybpodapi.com.messaging.event_resume", false], [84, "module-village.pybpodapi.com.messaging.parser", false], [86, "module-village.pybpodapi.com.messaging.session_info", false], [88, "module-village.pybpodapi.com.messaging.softcode_occurrence", false], [90, "module-village.pybpodapi.com.messaging.state_occurrence", false], [92, "module-village.pybpodapi.com.messaging.state_transition", false], [94, "module-village.pybpodapi.com.messaging.stderr", false], [96, "module-village.pybpodapi.com.messaging.stdout", false], [98, "module-village.pybpodapi.com.messaging.trial", false], [100, "module-village.pybpodapi.com.messaging.untagged_message", false], [102, "module-village.pybpodapi.com.messaging.value", false], [104, "module-village.pybpodapi.com.messaging.warning", false], [106, "module-village.pybpodapi.com.protocol", false], [107, "module-village.pybpodapi.com.protocol.recv_msg_headers", false], [109, "module-village.pybpodapi.com.protocol.send_msg_headers", false], [111, "module-village.pybpodapi.com.stderr_buffer", false], [113, "module-village.pybpodapi.com.stdout_buffer", false], [115, "module-village.pybpodapi.exceptions", false], [116, "module-village.pybpodapi.exceptions.bpod_error", false], [118, "module-village.pybpodapi.protocol", false], [119, "module-village.pybpodapi.session", false], [122, "module-village.pybpodapi.state_machine", false], [124, "module-village.pybpodapi.state_machine.conditions", false], [126, "module-village.pybpodapi.state_machine.global_counters", false], [128, "module-village.pybpodapi.state_machine.global_timers", false], [130, "module-village.pybpodapi.state_machine.state_machine_base", false], [133, "module-village.pybpodapi.state_machine.state_machine_builder", false], [136, "module-village.pybpodapi.state_machine.state_machine_runner", false], [139, "module-village.pybpodapi.utils", false], [140, "module-village.pybpodapi.utils.csv", false], [143, "module-village.pybpodapi.utils.date_parser", false], [145, "module-village.screen", false], [146, "module-village.screen.behavior_window", false]], "module_event_names (receivemessageheader attribute)": [[108, "village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader.MODULE_EVENT_NAMES", false]], "module_requested_event (receivemessageheader attribute)": [[108, "village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader.MODULE_REQUESTED_EVENT", false]], "new_state_matrix (sendmessageheader attribute)": [[110, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.NEW_STATE_MATRIX", false]], "newlines (stderrbuffer attribute)": [[112, "village.pybpodapi.com.stderr_buffer.StderrBuffer.newlines", false]], "newlines (stdoutbuffer attribute)": [[114, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.newlines", false]], "nonblockingsocketreceive (class in village.pybpodapi.bpod.non_blockingsocketreceive)": [[55, "village.pybpodapi.bpod.non_blockingsocketreceive.NonBlockingSocketReceive", false]], "nonblockingstreamreader (class in village.pybpodapi.bpod.non_blockingstreamreader)": [[58, "village.pybpodapi.bpod.non_blockingstreamreader.NonBlockingStreamReader", false]], "open() (arcom method)": [[68, "village.pybpodapi.com.arcom.ArCOM.open", false]], "open() (bpod method)": [[26, "village.pybpodapi.bpod.Bpod.open", false]], "open() (bpodbase method)": [[28, "village.pybpodapi.bpod.bpod_base.BpodBase.open", false]], "open() (bpodcomprotocol method)": [[30, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.open", false]], "open() (bpodcomprotocolmodules method)": [[32, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.open", false]], "open() (bpodio method)": [[34, "village.pybpodapi.bpod.bpod_io.BpodIO.open", false]], "output (bpod.channeltypes attribute)": [[26, "village.pybpodapi.bpod.Bpod.ChannelTypes.OUTPUT", false]], "output (bpodbase.channeltypes attribute)": [[28, "village.pybpodapi.bpod.bpod_base.BpodBase.ChannelTypes.OUTPUT", false]], "output (bpodcomprotocol.channeltypes attribute)": [[30, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.ChannelTypes.OUTPUT", false]], "output (bpodcomprotocolmodules.channeltypes attribute)": [[32, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.ChannelTypes.OUTPUT", false]], "output (bpodio.channeltypes attribute)": [[34, "village.pybpodapi.bpod.bpod_io.BpodIO.ChannelTypes.OUTPUT", false]], "output (channeltype attribute)": [[38, "village.pybpodapi.bpod.hardware.channels.ChannelType.OUTPUT", false]], "outputchannel (class in village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels)": [[53, "village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.OutputChannel", false]], "override_digital_hw_state (sendmessageheader attribute)": [[110, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.OVERRIDE_DIGITAL_HW_STATE", false]], "pa1_port1in (bpod.events attribute)": [[26, "village.pybpodapi.bpod.Bpod.Events.PA1_Port1In", false]], "pa1_port1in (bpodbase.events attribute)": [[28, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.PA1_Port1In", false]], "pa1_port1in (bpodcomprotocol.events attribute)": [[30, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.PA1_Port1In", false]], "pa1_port1in (bpodcomprotocolmodules.events attribute)": [[32, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.PA1_Port1In", false]], "pa1_port1in (bpodio.events attribute)": [[34, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.PA1_Port1In", false]], "pa1_port1in (eventname attribute)": [[45, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.PA1_Port1In", false]], "parse() (in module village.pybpodapi.utils.date_parser)": [[144, "village.pybpodapi.utils.date_parser.parse", false]], "port1 (inputname attribute)": [[50, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Port1", false]], "port1in (bpod.events attribute)": [[26, "village.pybpodapi.bpod.Bpod.Events.Port1In", false]], "port1in (bpodbase.events attribute)": [[28, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.Port1In", false]], "port1in (bpodcomprotocol.events attribute)": [[30, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.Port1In", false]], "port1in (bpodcomprotocolmodules.events attribute)": [[32, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.Port1In", false]], "port1in (bpodio.events attribute)": [[34, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.Port1In", false]], "port1in (eventname attribute)": [[45, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.Port1In", false]], "port2 (inputname attribute)": [[50, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Port2", false]], "port3 (inputname attribute)": [[50, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Port3", false]], "port4 (inputname attribute)": [[50, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Port4", false]], "port5 (inputname attribute)": [[50, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Port5", false]], "port6 (inputname attribute)": [[50, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Port6", false]], "port7 (inputname attribute)": [[50, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Port7", false]], "port8 (inputname attribute)": [[50, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Port8", false]], "pwm (bpod.channelnames attribute)": [[26, "village.pybpodapi.bpod.Bpod.ChannelNames.PWM", false]], "pwm (bpodbase.channelnames attribute)": [[28, "village.pybpodapi.bpod.bpod_base.BpodBase.ChannelNames.PWM", false]], "pwm (bpodcomprotocol.channelnames attribute)": [[30, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.ChannelNames.PWM", false]], "pwm (bpodcomprotocolmodules.channelnames attribute)": [[32, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.ChannelNames.PWM", false]], "pwm (bpodio.channelnames attribute)": [[34, "village.pybpodapi.bpod.bpod_io.BpodIO.ChannelNames.PWM", false]], "pwm (channelname attribute)": [[37, "village.pybpodapi.bpod.hardware.channels.ChannelName.PWM", false]], "read() (stderrbuffer method)": [[112, "village.pybpodapi.com.stderr_buffer.StderrBuffer.read", false]], "read() (stdoutbuffer method)": [[114, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.read", false]], "readable() (stderrbuffer method)": [[112, "village.pybpodapi.com.stderr_buffer.StderrBuffer.readable", false]], "readable() (stdoutbuffer method)": [[114, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.readable", false]], "reader (class in village.pybpodapi.utils.csv)": [[141, "village.pybpodapi.utils.csv.Reader", false]], "readline() (stderrbuffer method)": [[112, "village.pybpodapi.com.stderr_buffer.StderrBuffer.readline", false]], "readline() (stdoutbuffer method)": [[114, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.readline", false]], "readlines() (stderrbuffer method)": [[112, "village.pybpodapi.com.stderr_buffer.StderrBuffer.readlines", false]], "readlines() (stdoutbuffer method)": [[114, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.readlines", false]], "receivemessageheader (class in village.pybpodapi.com.protocol.recv_msg_headers)": [[108, "village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader", false]], "reset_clock (sendmessageheader attribute)": [[110, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.RESET_CLOCK", false]], "reset_serial_messages (receivemessageheader attribute)": [[108, "village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader.RESET_SERIAL_MESSAGES", false]], "reset_serial_messages (sendmessageheader attribute)": [[110, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.RESET_SERIAL_MESSAGES", false]], "reset_serial_messages() (bpod method)": [[26, "village.pybpodapi.bpod.Bpod.reset_serial_messages", false]], "reset_serial_messages() (bpodbase method)": [[28, "village.pybpodapi.bpod.bpod_base.BpodBase.reset_serial_messages", false]], "reset_serial_messages() (bpodcomprotocol method)": [[30, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.reset_serial_messages", false]], "reset_serial_messages() (bpodcomprotocolmodules method)": [[32, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.reset_serial_messages", false]], "reset_serial_messages() (bpodio method)": [[34, "village.pybpodapi.bpod.bpod_io.BpodIO.reset_serial_messages", false]], "run_state_machine (sendmessageheader attribute)": [[110, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.RUN_STATE_MACHINE", false]], "run_state_machine() (bpod method)": [[26, "village.pybpodapi.bpod.Bpod.run_state_machine", false]], "run_state_machine() (bpodbase method)": [[28, "village.pybpodapi.bpod.bpod_base.BpodBase.run_state_machine", false]], "run_state_machine() (bpodcomprotocol method)": [[30, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.run_state_machine", false]], "run_state_machine() (bpodcomprotocolmodules method)": [[32, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.run_state_machine", false]], "run_state_machine() (bpodio method)": [[34, "village.pybpodapi.bpod.bpod_io.BpodIO.run_state_machine", false]], "save (class in village.classes.enums)": [[11, "village.classes.enums.Save", false]], "screenactive (class in village.classes.enums)": [[12, "village.classes.enums.ScreenActive", false]], "seek() (stderrbuffer method)": [[112, "village.pybpodapi.com.stderr_buffer.StderrBuffer.seek", false]], "seek() (stdoutbuffer method)": [[114, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.seek", false]], "seekable() (stderrbuffer method)": [[112, "village.pybpodapi.com.stderr_buffer.StderrBuffer.seekable", false]], "seekable() (stdoutbuffer method)": [[114, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.seekable", false]], "send_state_machine() (bpod method)": [[26, "village.pybpodapi.bpod.Bpod.send_state_machine", false]], "send_state_machine() (bpodbase method)": [[28, "village.pybpodapi.bpod.bpod_base.BpodBase.send_state_machine", false]], "send_state_machine() (bpodcomprotocol method)": [[30, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.send_state_machine", false]], "send_state_machine() (bpodcomprotocolmodules method)": [[32, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.send_state_machine", false]], "send_state_machine() (bpodio method)": [[34, "village.pybpodapi.bpod.bpod_io.BpodIO.send_state_machine", false]], "send_to_hw_serial (sendmessageheader attribute)": [[110, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.SEND_TO_HW_SERIAL", false]], "sendmessageheader (class in village.pybpodapi.com.protocol.send_msg_headers)": [[110, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader", false]], "serial (bpod.channelnames attribute)": [[26, "village.pybpodapi.bpod.Bpod.ChannelNames.SERIAL", false]], "serial (bpodbase.channelnames attribute)": [[28, "village.pybpodapi.bpod.bpod_base.BpodBase.ChannelNames.SERIAL", false]], "serial (bpodcomprotocol.channelnames attribute)": [[30, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.ChannelNames.SERIAL", false]], "serial (bpodcomprotocolmodules.channelnames attribute)": [[32, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.ChannelNames.SERIAL", false]], "serial (bpodio.channelnames attribute)": [[34, "village.pybpodapi.bpod.bpod_io.BpodIO.ChannelNames.SERIAL", false]], "serial (channelname attribute)": [[37, "village.pybpodapi.bpod.hardware.channels.ChannelName.SERIAL", false]], "serial1 (bpod.outputchannels attribute)": [[26, "village.pybpodapi.bpod.Bpod.OutputChannels.Serial1", false]], "serial1 (bpodbase.outputchannels attribute)": [[28, "village.pybpodapi.bpod.bpod_base.BpodBase.OutputChannels.Serial1", false]], "serial1 (bpodcomprotocol.outputchannels attribute)": [[30, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.OutputChannels.Serial1", false]], "serial1 (bpodcomprotocolmodules.outputchannels attribute)": [[32, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.OutputChannels.Serial1", false]], "serial1 (bpodio.outputchannels attribute)": [[34, "village.pybpodapi.bpod.bpod_io.BpodIO.OutputChannels.Serial1", false]], "serial1 (inputname attribute)": [[50, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Serial1", false]], "serial1 (outputchannel attribute)": [[53, "village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.OutputChannel.Serial1", false]], "serial2 (inputname attribute)": [[50, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Serial2", false]], "serial3 (inputname attribute)": [[50, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Serial3", false]], "session (class in village.pybpodapi.session)": [[120, "village.pybpodapi.session.Session", false]], "sessioninfo (class in village.pybpodapi.com.messaging.session_info)": [[87, "village.pybpodapi.com.messaging.session_info.SessionInfo", false]], "set_condition() (statemachine method)": [[123, "village.pybpodapi.state_machine.StateMachine.set_condition", false]], "set_condition() (statemachinebase method)": [[132, "village.pybpodapi.state_machine.state_machine_base.StateMachineBase.set_condition", false]], "set_condition() (statemachinebuilder method)": [[134, "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder.set_condition", false]], "set_condition() (statemachinerunner method)": [[137, "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner.set_condition", false]], "set_global_counter() (statemachine method)": [[123, "village.pybpodapi.state_machine.StateMachine.set_global_counter", false]], "set_global_counter() (statemachinebase method)": [[132, "village.pybpodapi.state_machine.state_machine_base.StateMachineBase.set_global_counter", false]], "set_global_counter() (statemachinebuilder method)": [[134, "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder.set_global_counter", false]], "set_global_counter() (statemachinerunner method)": [[137, "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner.set_global_counter", false]], "set_global_timer() (statemachine method)": [[123, "village.pybpodapi.state_machine.StateMachine.set_global_timer", false]], "set_global_timer() (statemachinebase method)": [[132, "village.pybpodapi.state_machine.state_machine_base.StateMachineBase.set_global_timer", false]], "set_global_timer() (statemachinebuilder method)": [[134, "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder.set_global_timer", false]], "set_global_timer() (statemachinerunner method)": [[137, "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner.set_global_timer", false]], "set_global_timer_legacy() (statemachine method)": [[123, "village.pybpodapi.state_machine.StateMachine.set_global_timer_legacy", false]], "set_global_timer_legacy() (statemachinebase method)": [[132, "village.pybpodapi.state_machine.state_machine_base.StateMachineBase.set_global_timer_legacy", false]], "set_global_timer_legacy() (statemachinebuilder method)": [[134, "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder.set_global_timer_legacy", false]], "set_global_timer_legacy() (statemachinerunner method)": [[137, "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner.set_global_timer_legacy", false]], "set_module_relay (sendmessageheader attribute)": [[110, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.SET_MODULE_RELAY", false]], "setting (class in village.classes.settings_class)": [[16, "village.classes.settings_class.Setting", false]], "settings (class in village.classes.settings_class)": [[17, "village.classes.settings_class.Settings", false]], "settings (class in village.classes.training)": [[19, "village.classes.training.Settings", false]], "setup() (hardware method)": [[47, "village.pybpodapi.bpod.hardware.hardware.Hardware.setup", false]], "setup_input_channels() (channels method)": [[39, "village.pybpodapi.bpod.hardware.channels.Channels.setup_input_channels", false]], "setup_output_channels() (channels method)": [[39, "village.pybpodapi.bpod.hardware.channels.Channels.setup_output_channels", false]], "smaerror": [[131, "village.pybpodapi.state_machine.state_machine_base.SMAError", false]], "softcode1 (bpod.outputchannels attribute)": [[26, "village.pybpodapi.bpod.Bpod.OutputChannels.SoftCode1", false]], "softcode1 (bpodbase.outputchannels attribute)": [[28, "village.pybpodapi.bpod.bpod_base.BpodBase.OutputChannels.SoftCode1", false]], "softcode1 (bpodcomprotocol.outputchannels attribute)": [[30, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.OutputChannels.SoftCode1", false]], "softcode1 (bpodcomprotocolmodules.outputchannels attribute)": [[32, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.OutputChannels.SoftCode1", false]], "softcode1 (bpodio.outputchannels attribute)": [[34, "village.pybpodapi.bpod.bpod_io.BpodIO.OutputChannels.SoftCode1", false]], "softcode1 (outputchannel attribute)": [[53, "village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.OutputChannel.SoftCode1", false]], "softcode_handler_function() (bpod method)": [[26, "village.pybpodapi.bpod.Bpod.softcode_handler_function", false]], "softcode_handler_function() (bpodbase method)": [[28, "village.pybpodapi.bpod.bpod_base.BpodBase.softcode_handler_function", false]], "softcode_handler_function() (bpodcomprotocol method)": [[30, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.softcode_handler_function", false]], "softcode_handler_function() (bpodcomprotocolmodules method)": [[32, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.softcode_handler_function", false]], "softcode_handler_function() (bpodio method)": [[34, "village.pybpodapi.bpod.bpod_io.BpodIO.softcode_handler_function", false]], "softcodeoccurrence (class in village.pybpodapi.com.messaging.softcode_occurrence)": [[89, "village.pybpodapi.com.messaging.softcode_occurrence.SoftcodeOccurrence", false]], "state (class in village.classes.enums)": [[13, "village.classes.enums.State", false]], "state_machine_installation_status (receivemessageheader attribute)": [[108, "village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader.STATE_MACHINE_INSTALLATION_STATUS", false]], "statemachine (class in village.pybpodapi.state_machine)": [[123, "village.pybpodapi.state_machine.StateMachine", false]], "statemachinebase (class in village.pybpodapi.state_machine.state_machine_base)": [[132, "village.pybpodapi.state_machine.state_machine_base.StateMachineBase", false]], "statemachinebuilder (class in village.pybpodapi.state_machine.state_machine_builder)": [[134, "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder", false]], "statemachinebuildererror": [[135, "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilderError", false]], "statemachinerunner (class in village.pybpodapi.state_machine.state_machine_runner)": [[137, "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner", false]], "statemachinerunnererror": [[138, "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunnerError", false]], "stateoccurrence (class in village.pybpodapi.com.messaging.state_occurrence)": [[91, "village.pybpodapi.com.messaging.state_occurrence.StateOccurrence", false]], "statetransition (class in village.pybpodapi.com.messaging.state_transition)": [[93, "village.pybpodapi.com.messaging.state_transition.StateTransition", false]], "stderrbuffer (class in village.pybpodapi.com.stderr_buffer)": [[112, "village.pybpodapi.com.stderr_buffer.StderrBuffer", false]], "stderrmessage (class in village.pybpodapi.com.messaging.stderr)": [[95, "village.pybpodapi.com.messaging.stderr.StderrMessage", false]], "stdoutbuffer (class in village.pybpodapi.com.stdout_buffer)": [[114, "village.pybpodapi.com.stdout_buffer.StdoutBuffer", false]], "stdoutmessage (class in village.pybpodapi.com.messaging.stdout)": [[97, "village.pybpodapi.com.messaging.stdout.StdoutMessage", false]], "streamswrapper (class in village.pybpodapi.session)": [[121, "village.pybpodapi.session.StreamsWrapper", false]], "superenum (class in village.classes.enums)": [[14, "village.classes.enums.SuperEnum", false]], "sync_channel_mode (sendmessageheader attribute)": [[110, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.SYNC_CHANNEL_MODE", false]], "sync_channel_mode_ok (receivemessageheader attribute)": [[108, "village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader.SYNC_CHANNEL_MODE_OK", false]], "tell() (stderrbuffer method)": [[112, "village.pybpodapi.com.stderr_buffer.StderrBuffer.tell", false]], "tell() (stdoutbuffer method)": [[114, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.tell", false]], "training (class in village.classes.training)": [[20, "village.classes.training.Training", false]], "trainingerror": [[21, "village.classes.training.TrainingError", false]], "trial (class in village.pybpodapi.com.messaging.trial)": [[99, "village.pybpodapi.com.messaging.trial.Trial", false]], "trigger_softcode (sendmessageheader attribute)": [[110, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.TRIGGER_SOFTCODE", false]], "truncate() (stderrbuffer method)": [[112, "village.pybpodapi.com.stderr_buffer.StderrBuffer.truncate", false]], "truncate() (stdoutbuffer method)": [[114, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.truncate", false]], "tup (bpod.events attribute)": [[26, "village.pybpodapi.bpod.Bpod.Events.Tup", false]], "tup (bpodbase.events attribute)": [[28, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.Tup", false]], "tup (bpodcomprotocol.events attribute)": [[30, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.Tup", false]], "tup (bpodcomprotocolmodules.events attribute)": [[32, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.Tup", false]], "tup (bpodio.events attribute)": [[34, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.Tup", false]], "tup (eventname attribute)": [[45, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.Tup", false]], "unexpectedendofstream": [[56, "village.pybpodapi.bpod.non_blockingsocketreceive.UnexpectedEndOfStream", false], [59, "village.pybpodapi.bpod.non_blockingstreamreader.UnexpectedEndOfStream", false]], "untaggedmessage (class in village.pybpodapi.com.messaging.untagged_message)": [[101, "village.pybpodapi.com.messaging.untagged_message.UntaggedMessage", false]], "update_state_numbers() (statemachine method)": [[123, "village.pybpodapi.state_machine.StateMachine.update_state_numbers", false]], "update_state_numbers() (statemachinebuilder method)": [[134, "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder.update_state_numbers", false]], "update_state_numbers() (statemachinerunner method)": [[137, "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner.update_state_numbers", false]], "usb1 (inputname attribute)": [[50, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.USB1", false]], "valuemessage (class in village.pybpodapi.com.messaging.value)": [[103, "village.pybpodapi.com.messaging.value.ValueMessage", false]], "valve (bpod.channelnames attribute)": [[26, "village.pybpodapi.bpod.Bpod.ChannelNames.VALVE", false]], "valve (bpodbase.channelnames attribute)": [[28, "village.pybpodapi.bpod.bpod_base.BpodBase.ChannelNames.VALVE", false]], "valve (bpodcomprotocol.channelnames attribute)": [[30, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.ChannelNames.VALVE", false]], "valve (bpodcomprotocolmodules.channelnames attribute)": [[32, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.ChannelNames.VALVE", false]], "valve (bpodio.channelnames attribute)": [[34, "village.pybpodapi.bpod.bpod_io.BpodIO.ChannelNames.VALVE", false]], "valve (channelname attribute)": [[37, "village.pybpodapi.bpod.hardware.channels.ChannelName.VALVE", false]], "valve1 (bpod.outputchannels attribute)": [[26, "village.pybpodapi.bpod.Bpod.OutputChannels.Valve1", false]], "valve1 (bpodbase.outputchannels attribute)": [[28, "village.pybpodapi.bpod.bpod_base.BpodBase.OutputChannels.Valve1", false]], "valve1 (bpodcomprotocol.outputchannels attribute)": [[30, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.OutputChannels.Valve1", false]], "valve1 (bpodcomprotocolmodules.outputchannels attribute)": [[32, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.OutputChannels.Valve1", false]], "valve1 (bpodio.outputchannels attribute)": [[34, "village.pybpodapi.bpod.bpod_io.BpodIO.OutputChannels.Valve1", false]], "valve1 (outputchannel attribute)": [[53, "village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.OutputChannel.Valve1", false]], "village.classes": [[0, "module-village.classes", false]], "village.classes.change_hour_run": [[1, "module-village.classes.change_hour_run", false]], "village.classes.enums": [[3, "module-village.classes.enums", false]], "village.classes.settings_class": [[15, "module-village.classes.settings_class", false]], "village.classes.training": [[18, "module-village.classes.training", false]], "village.devices": [[22, "module-village.devices", false]], "village.gui": [[23, "module-village.gui", false]], "village.pybpodapi": [[24, "module-village.pybpodapi", false]], "village.pybpodapi.bpod": [[25, "module-village.pybpodapi.bpod", false]], "village.pybpodapi.bpod.bpod_base": [[27, "module-village.pybpodapi.bpod.bpod_base", false]], "village.pybpodapi.bpod.bpod_com_protocol": [[29, "module-village.pybpodapi.bpod.bpod_com_protocol", false]], "village.pybpodapi.bpod.bpod_com_protocol_modules": [[31, "module-village.pybpodapi.bpod.bpod_com_protocol_modules", false]], "village.pybpodapi.bpod.bpod_io": [[33, "module-village.pybpodapi.bpod.bpod_io", false]], "village.pybpodapi.bpod.hardware": [[35, "module-village.pybpodapi.bpod.hardware", false]], "village.pybpodapi.bpod.hardware.channels": [[36, "module-village.pybpodapi.bpod.hardware.channels", false]], "village.pybpodapi.bpod.hardware.events": [[41, "module-village.pybpodapi.bpod.hardware.events", false]], "village.pybpodapi.bpod.hardware.events.base_eventname": [[42, "module-village.pybpodapi.bpod.hardware.events.base_eventname", false]], "village.pybpodapi.bpod.hardware.events.bpod_events": [[44, "module-village.pybpodapi.bpod.hardware.events.bpod_events", false]], "village.pybpodapi.bpod.hardware.hardware": [[46, "module-village.pybpodapi.bpod.hardware.hardware", false]], "village.pybpodapi.bpod.hardware.input_channels": [[48, "module-village.pybpodapi.bpod.hardware.input_channels", false]], "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels": [[49, "module-village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels", false]], "village.pybpodapi.bpod.hardware.output_channels": [[51, "module-village.pybpodapi.bpod.hardware.output_channels", false]], "village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels": [[52, "module-village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels", false]], "village.pybpodapi.bpod.non_blockingsocketreceive": [[54, "module-village.pybpodapi.bpod.non_blockingsocketreceive", false]], "village.pybpodapi.bpod.non_blockingstreamreader": [[57, "module-village.pybpodapi.bpod.non_blockingstreamreader", false]], "village.pybpodapi.bpod.settings": [[60, "module-village.pybpodapi.bpod.settings", false]], "village.pybpodapi.bpod_modules": [[61, "module-village.pybpodapi.bpod_modules", false]], "village.pybpodapi.bpod_modules.bpod_module": [[62, "module-village.pybpodapi.bpod_modules.bpod_module", false]], "village.pybpodapi.bpod_modules.bpod_modules": [[64, "module-village.pybpodapi.bpod_modules.bpod_modules", false]], "village.pybpodapi.com": [[66, "module-village.pybpodapi.com", false]], "village.pybpodapi.com.arcom": [[67, "module-village.pybpodapi.com.arcom", false]], "village.pybpodapi.com.messaging": [[71, "module-village.pybpodapi.com.messaging", false]], "village.pybpodapi.com.messaging.base_message": [[72, "module-village.pybpodapi.com.messaging.base_message", false]], "village.pybpodapi.com.messaging.debug": [[74, "module-village.pybpodapi.com.messaging.debug", false]], "village.pybpodapi.com.messaging.end_trial": [[76, "module-village.pybpodapi.com.messaging.end_trial", false]], "village.pybpodapi.com.messaging.error": [[78, "module-village.pybpodapi.com.messaging.error", false]], "village.pybpodapi.com.messaging.event_occurrence": [[80, "module-village.pybpodapi.com.messaging.event_occurrence", false]], "village.pybpodapi.com.messaging.event_resume": [[82, "module-village.pybpodapi.com.messaging.event_resume", false]], "village.pybpodapi.com.messaging.parser": [[84, "module-village.pybpodapi.com.messaging.parser", false]], "village.pybpodapi.com.messaging.session_info": [[86, "module-village.pybpodapi.com.messaging.session_info", false]], "village.pybpodapi.com.messaging.softcode_occurrence": [[88, "module-village.pybpodapi.com.messaging.softcode_occurrence", false]], "village.pybpodapi.com.messaging.state_occurrence": [[90, "module-village.pybpodapi.com.messaging.state_occurrence", false]], "village.pybpodapi.com.messaging.state_transition": [[92, "module-village.pybpodapi.com.messaging.state_transition", false]], "village.pybpodapi.com.messaging.stderr": [[94, "module-village.pybpodapi.com.messaging.stderr", false]], "village.pybpodapi.com.messaging.stdout": [[96, "module-village.pybpodapi.com.messaging.stdout", false]], "village.pybpodapi.com.messaging.trial": [[98, "module-village.pybpodapi.com.messaging.trial", false]], "village.pybpodapi.com.messaging.untagged_message": [[100, "module-village.pybpodapi.com.messaging.untagged_message", false]], "village.pybpodapi.com.messaging.value": [[102, "module-village.pybpodapi.com.messaging.value", false]], "village.pybpodapi.com.messaging.warning": [[104, "module-village.pybpodapi.com.messaging.warning", false]], "village.pybpodapi.com.protocol": [[106, "module-village.pybpodapi.com.protocol", false]], "village.pybpodapi.com.protocol.recv_msg_headers": [[107, "module-village.pybpodapi.com.protocol.recv_msg_headers", false]], "village.pybpodapi.com.protocol.send_msg_headers": [[109, "module-village.pybpodapi.com.protocol.send_msg_headers", false]], "village.pybpodapi.com.stderr_buffer": [[111, "module-village.pybpodapi.com.stderr_buffer", false]], "village.pybpodapi.com.stdout_buffer": [[113, "module-village.pybpodapi.com.stdout_buffer", false]], "village.pybpodapi.exceptions": [[115, "module-village.pybpodapi.exceptions", false]], "village.pybpodapi.exceptions.bpod_error": [[116, "module-village.pybpodapi.exceptions.bpod_error", false]], "village.pybpodapi.protocol": [[118, "module-village.pybpodapi.protocol", false]], "village.pybpodapi.session": [[119, "module-village.pybpodapi.session", false]], "village.pybpodapi.state_machine": [[122, "module-village.pybpodapi.state_machine", false]], "village.pybpodapi.state_machine.conditions": [[124, "module-village.pybpodapi.state_machine.conditions", false]], "village.pybpodapi.state_machine.global_counters": [[126, "module-village.pybpodapi.state_machine.global_counters", false]], "village.pybpodapi.state_machine.global_timers": [[128, "module-village.pybpodapi.state_machine.global_timers", false]], "village.pybpodapi.state_machine.state_machine_base": [[130, "module-village.pybpodapi.state_machine.state_machine_base", false]], "village.pybpodapi.state_machine.state_machine_builder": [[133, "module-village.pybpodapi.state_machine.state_machine_builder", false]], "village.pybpodapi.state_machine.state_machine_runner": [[136, "module-village.pybpodapi.state_machine.state_machine_runner", false]], "village.pybpodapi.utils": [[139, "module-village.pybpodapi.utils", false]], "village.pybpodapi.utils.csv": [[140, "module-village.pybpodapi.utils.csv", false]], "village.pybpodapi.utils.date_parser": [[143, "module-village.pybpodapi.utils.date_parser", false]], "village.screen": [[145, "module-village.screen", false]], "village.screen.behavior_window": [[146, "module-village.screen.behavior_window", false]], "warningmessage (class in village.pybpodapi.com.messaging.warning)": [[105, "village.pybpodapi.com.messaging.warning.WarningMessage", false]], "wire (bpod.channelnames attribute)": [[26, "village.pybpodapi.bpod.Bpod.ChannelNames.WIRE", false]], "wire (bpodbase.channelnames attribute)": [[28, "village.pybpodapi.bpod.bpod_base.BpodBase.ChannelNames.WIRE", false]], "wire (bpodcomprotocol.channelnames attribute)": [[30, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.ChannelNames.WIRE", false]], "wire (bpodcomprotocolmodules.channelnames attribute)": [[32, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.ChannelNames.WIRE", false]], "wire (bpodio.channelnames attribute)": [[34, "village.pybpodapi.bpod.bpod_io.BpodIO.ChannelNames.WIRE", false]], "wire (channelname attribute)": [[37, "village.pybpodapi.bpod.hardware.channels.ChannelName.WIRE", false]], "wire1 (inputname attribute)": [[50, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Wire1", false]], "wire2 (inputname attribute)": [[50, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Wire2", false]], "writable() (stderrbuffer method)": [[112, "village.pybpodapi.com.stderr_buffer.StderrBuffer.writable", false]], "writable() (stdoutbuffer method)": [[114, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.writable", false]], "write() (stderrbuffer method)": [[112, "village.pybpodapi.com.stderr_buffer.StderrBuffer.write", false]], "write() (stdoutbuffer method)": [[114, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.write", false]], "write_to_module (sendmessageheader attribute)": [[110, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.WRITE_TO_MODULE", false]], "writelines() (stderrbuffer method)": [[112, "village.pybpodapi.com.stderr_buffer.StderrBuffer.writelines", false]], "writelines() (stdoutbuffer method)": [[114, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.writelines", false]], "writer (class in village.pybpodapi.utils.csv)": [[142, "village.pybpodapi.utils.csv.Writer", false]]}, "objects": {"village": [[0, 0, 0, "-", "classes"], [22, 0, 0, "-", "devices"], [23, 0, 0, "-", "gui"], [24, 0, 0, "-", "pybpodapi"], [145, 0, 0, "-", "screen"]], "village.classes": [[1, 0, 0, "-", "change_hour_run"], [3, 0, 0, "-", "enums"], [15, 0, 0, "-", "settings_class"], [18, 0, 0, "-", "training"]], "village.classes.change_hour_run": [[2, 1, 1, "", "ChangeHourRun"]], "village.classes.change_hour_run.ChangeHourRun": [[2, 2, 1, "", "__init__"]], "village.classes.enums": [[4, 1, 1, "", "Actions"], [5, 1, 1, "", "Active"], [6, 1, 1, "", "AreaActive"], [7, 1, 1, "", "Color"], [8, 1, 1, "", "Cycle"], [9, 1, 1, "", "DataTable"], [10, 1, 1, "", "Info"], [11, 1, 1, "", "Save"], [12, 1, 1, "", "ScreenActive"], [13, 1, 1, "", "State"], [14, 1, 1, "", "SuperEnum"]], "village.classes.enums.Actions": [[4, 2, 1, "", "__init__"]], "village.classes.enums.Active": [[5, 2, 1, "", "__init__"]], "village.classes.enums.AreaActive": [[6, 2, 1, "", "__init__"]], "village.classes.enums.Color": [[7, 2, 1, "", "__init__"]], "village.classes.enums.Cycle": [[8, 2, 1, "", "__init__"]], "village.classes.enums.DataTable": [[9, 2, 1, "", "__init__"]], "village.classes.enums.Info": [[10, 2, 1, "", "__init__"]], "village.classes.enums.Save": [[11, 2, 1, "", "__init__"]], "village.classes.enums.ScreenActive": [[12, 2, 1, "", "__init__"]], "village.classes.enums.State": [[13, 2, 1, "", "__init__"]], "village.classes.enums.SuperEnum": [[14, 2, 1, "", "__init__"]], "village.classes.settings_class": [[16, 1, 1, "", "Setting"], [17, 1, 1, "", "Settings"]], "village.classes.settings_class.Setting": [[16, 2, 1, "", "__init__"]], "village.classes.settings_class.Settings": [[17, 2, 1, "", "__init__"], [17, 2, 1, "", "get"], [17, 2, 1, "", "get_description"], [17, 2, 1, "", "get_index"], [17, 2, 1, "", "get_indices"], [17, 2, 1, "", "get_text"], [17, 2, 1, "", "get_type"], [17, 2, 1, "", "get_values"]], "village.classes.training": [[19, 1, 1, "", "Settings"], [20, 1, 1, "", "Training"], [21, 3, 1, "", "TrainingError"]], "village.classes.training.Settings": [[19, 2, 1, "", "__init__"]], "village.classes.training.Training": [[20, 2, 1, "", "__init__"]], "village.pybpodapi": [[25, 0, 0, "-", "bpod"], [61, 0, 0, "-", "bpod_modules"], [66, 0, 0, "-", "com"], [115, 0, 0, "-", "exceptions"], [118, 0, 0, "-", "protocol"], [119, 0, 0, "-", "session"], [122, 0, 0, "-", "state_machine"], [139, 0, 0, "-", "utils"]], "village.pybpodapi.bpod": [[26, 1, 1, "", "Bpod"], [27, 0, 0, "-", "bpod_base"], [29, 0, 0, "-", "bpod_com_protocol"], [31, 0, 0, "-", "bpod_com_protocol_modules"], [33, 0, 0, "-", "bpod_io"], [35, 0, 0, "-", "hardware"], [54, 0, 0, "-", "non_blockingsocketreceive"], [57, 0, 0, "-", "non_blockingstreamreader"], [60, 0, 0, "-", "settings"]], "village.pybpodapi.bpod.Bpod": [[26, 1, 1, "", "ChannelNames"], [26, 1, 1, "", "ChannelTypes"], [26, 1, 1, "", "Events"], [26, 1, 1, "", "OutputChannels"], [26, 2, 1, "", "__init__"], [26, 2, 1, "", "close"], [26, 2, 1, "", "data_available"], [26, 2, 1, "", "find_module_by_name"], [26, 2, 1, "", "load_serial_message"], [26, 2, 1, "", "loop_handler"], [26, 2, 1, "", "manual_override"], [26, 2, 1, "", "open"], [26, 2, 1, "", "reset_serial_messages"], [26, 2, 1, "", "run_state_machine"], [26, 2, 1, "", "send_state_machine"], [26, 2, 1, "", "softcode_handler_function"]], "village.pybpodapi.bpod.Bpod.ChannelNames": [[26, 4, 1, "", "BNC"], [26, 4, 1, "", "PWM"], [26, 4, 1, "", "SERIAL"], [26, 4, 1, "", "VALVE"], [26, 4, 1, "", "WIRE"]], "village.pybpodapi.bpod.Bpod.ChannelTypes": [[26, 4, 1, "", "INPUT"], [26, 4, 1, "", "OUTPUT"]], "village.pybpodapi.bpod.Bpod.Events": [[26, 4, 1, "", "BNC1High"], [26, 4, 1, "", "Condition1"], [26, 4, 1, "", "GlobalCounter1End"], [26, 4, 1, "", "GlobalTimer1End"], [26, 4, 1, "", "GlobalTimer1Start"], [26, 4, 1, "", "PA1_Port1In"], [26, 4, 1, "", "Port1In"], [26, 4, 1, "", "Tup"], [26, 2, 1, "", "is_condition"], [26, 2, 1, "", "is_global_counter_end"], [26, 2, 1, "", "is_global_timer_cancel"], [26, 2, 1, "", "is_global_timer_end"], [26, 2, 1, "", "is_global_timer_start"], [26, 2, 1, "", "is_global_timer_trigger"], [26, 2, 1, "", "is_state_timer"]], "village.pybpodapi.bpod.Bpod.OutputChannels": [[26, 4, 1, "", "BNC1High"], [26, 4, 1, "", "GlobalCounter1Reset"], [26, 4, 1, "", "GlobalTimer1Cancel"], [26, 4, 1, "", "GlobalTimer1Trig"], [26, 4, 1, "", "Serial1"], [26, 4, 1, "", "SoftCode1"], [26, 4, 1, "", "Valve1"]], "village.pybpodapi.bpod.bpod_base": [[28, 1, 1, "", "BpodBase"]], "village.pybpodapi.bpod.bpod_base.BpodBase": [[28, 1, 1, "", "ChannelNames"], [28, 1, 1, "", "ChannelTypes"], [28, 1, 1, "", "Events"], [28, 1, 1, "", "OutputChannels"], [28, 2, 1, "", "__init__"], [28, 2, 1, "", "close"], [28, 2, 1, "", "find_module_by_name"], [28, 2, 1, "", "load_serial_message"], [28, 2, 1, "", "loop_handler"], [28, 2, 1, "", "open"], [28, 2, 1, "", "reset_serial_messages"], [28, 2, 1, "", "run_state_machine"], [28, 2, 1, "", "send_state_machine"], [28, 2, 1, "", "softcode_handler_function"]], "village.pybpodapi.bpod.bpod_base.BpodBase.ChannelNames": [[28, 4, 1, "", "BNC"], [28, 4, 1, "", "PWM"], [28, 4, 1, "", "SERIAL"], [28, 4, 1, "", "VALVE"], [28, 4, 1, "", "WIRE"]], "village.pybpodapi.bpod.bpod_base.BpodBase.ChannelTypes": [[28, 4, 1, "", "INPUT"], [28, 4, 1, "", "OUTPUT"]], "village.pybpodapi.bpod.bpod_base.BpodBase.Events": [[28, 4, 1, "", "BNC1High"], [28, 4, 1, "", "Condition1"], [28, 4, 1, "", "GlobalCounter1End"], [28, 4, 1, "", "GlobalTimer1End"], [28, 4, 1, "", "GlobalTimer1Start"], [28, 4, 1, "", "PA1_Port1In"], [28, 4, 1, "", "Port1In"], [28, 4, 1, "", "Tup"], [28, 2, 1, "", "is_condition"], [28, 2, 1, "", "is_global_counter_end"], [28, 2, 1, "", "is_global_timer_cancel"], [28, 2, 1, "", "is_global_timer_end"], [28, 2, 1, "", "is_global_timer_start"], [28, 2, 1, "", "is_global_timer_trigger"], [28, 2, 1, "", "is_state_timer"]], "village.pybpodapi.bpod.bpod_base.BpodBase.OutputChannels": [[28, 4, 1, "", "BNC1High"], [28, 4, 1, "", "GlobalCounter1Reset"], [28, 4, 1, "", "GlobalTimer1Cancel"], [28, 4, 1, "", "GlobalTimer1Trig"], [28, 4, 1, "", "Serial1"], [28, 4, 1, "", "SoftCode1"], [28, 4, 1, "", "Valve1"]], "village.pybpodapi.bpod.bpod_com_protocol": [[30, 1, 1, "", "BpodCOMProtocol"]], "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol": [[30, 1, 1, "", "ChannelNames"], [30, 1, 1, "", "ChannelTypes"], [30, 1, 1, "", "Events"], [30, 1, 1, "", "OutputChannels"], [30, 2, 1, "", "__init__"], [30, 2, 1, "", "close"], [30, 2, 1, "", "data_available"], [30, 2, 1, "", "find_module_by_name"], [30, 2, 1, "", "load_serial_message"], [30, 2, 1, "", "loop_handler"], [30, 2, 1, "", "manual_override"], [30, 2, 1, "", "open"], [30, 2, 1, "", "reset_serial_messages"], [30, 2, 1, "", "run_state_machine"], [30, 2, 1, "", "send_state_machine"], [30, 2, 1, "", "softcode_handler_function"]], "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.ChannelNames": [[30, 4, 1, "", "BNC"], [30, 4, 1, "", "PWM"], [30, 4, 1, "", "SERIAL"], [30, 4, 1, "", "VALVE"], [30, 4, 1, "", "WIRE"]], "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.ChannelTypes": [[30, 4, 1, "", "INPUT"], [30, 4, 1, "", "OUTPUT"]], "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events": [[30, 4, 1, "", "BNC1High"], [30, 4, 1, "", "Condition1"], [30, 4, 1, "", "GlobalCounter1End"], [30, 4, 1, "", "GlobalTimer1End"], [30, 4, 1, "", "GlobalTimer1Start"], [30, 4, 1, "", "PA1_Port1In"], [30, 4, 1, "", "Port1In"], [30, 4, 1, "", "Tup"], [30, 2, 1, "", "is_condition"], [30, 2, 1, "", "is_global_counter_end"], [30, 2, 1, "", "is_global_timer_cancel"], [30, 2, 1, "", "is_global_timer_end"], [30, 2, 1, "", "is_global_timer_start"], [30, 2, 1, "", "is_global_timer_trigger"], [30, 2, 1, "", "is_state_timer"]], "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.OutputChannels": [[30, 4, 1, "", "BNC1High"], [30, 4, 1, "", "GlobalCounter1Reset"], [30, 4, 1, "", "GlobalTimer1Cancel"], [30, 4, 1, "", "GlobalTimer1Trig"], [30, 4, 1, "", "Serial1"], [30, 4, 1, "", "SoftCode1"], [30, 4, 1, "", "Valve1"]], "village.pybpodapi.bpod.bpod_com_protocol_modules": [[32, 1, 1, "", "BpodCOMProtocolModules"]], "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules": [[32, 1, 1, "", "ChannelNames"], [32, 1, 1, "", "ChannelTypes"], [32, 1, 1, "", "Events"], [32, 1, 1, "", "OutputChannels"], [32, 2, 1, "", "__init__"], [32, 2, 1, "", "close"], [32, 2, 1, "", "data_available"], [32, 2, 1, "", "find_module_by_name"], [32, 2, 1, "", "load_serial_message"], [32, 2, 1, "", "loop_handler"], [32, 2, 1, "", "manual_override"], [32, 2, 1, "", "open"], [32, 2, 1, "", "reset_serial_messages"], [32, 2, 1, "", "run_state_machine"], [32, 2, 1, "", "send_state_machine"], [32, 2, 1, "", "softcode_handler_function"]], "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.ChannelNames": [[32, 4, 1, "", "BNC"], [32, 4, 1, "", "PWM"], [32, 4, 1, "", "SERIAL"], [32, 4, 1, "", "VALVE"], [32, 4, 1, "", "WIRE"]], "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.ChannelTypes": [[32, 4, 1, "", "INPUT"], [32, 4, 1, "", "OUTPUT"]], "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events": [[32, 4, 1, "", "BNC1High"], [32, 4, 1, "", "Condition1"], [32, 4, 1, "", "GlobalCounter1End"], [32, 4, 1, "", "GlobalTimer1End"], [32, 4, 1, "", "GlobalTimer1Start"], [32, 4, 1, "", "PA1_Port1In"], [32, 4, 1, "", "Port1In"], [32, 4, 1, "", "Tup"], [32, 2, 1, "", "is_condition"], [32, 2, 1, "", "is_global_counter_end"], [32, 2, 1, "", "is_global_timer_cancel"], [32, 2, 1, "", "is_global_timer_end"], [32, 2, 1, "", "is_global_timer_start"], [32, 2, 1, "", "is_global_timer_trigger"], [32, 2, 1, "", "is_state_timer"]], "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.OutputChannels": [[32, 4, 1, "", "BNC1High"], [32, 4, 1, "", "GlobalCounter1Reset"], [32, 4, 1, "", "GlobalTimer1Cancel"], [32, 4, 1, "", "GlobalTimer1Trig"], [32, 4, 1, "", "Serial1"], [32, 4, 1, "", "SoftCode1"], [32, 4, 1, "", "Valve1"]], "village.pybpodapi.bpod.bpod_io": [[34, 1, 1, "", "BpodIO"]], "village.pybpodapi.bpod.bpod_io.BpodIO": [[34, 1, 1, "", "ChannelNames"], [34, 1, 1, "", "ChannelTypes"], [34, 1, 1, "", "Events"], [34, 1, 1, "", "OutputChannels"], [34, 2, 1, "", "__init__"], [34, 2, 1, "", "close"], [34, 2, 1, "", "data_available"], [34, 2, 1, "", "find_module_by_name"], [34, 2, 1, "", "load_serial_message"], [34, 2, 1, "", "loop_handler"], [34, 2, 1, "", "manual_override"], [34, 2, 1, "", "open"], [34, 2, 1, "", "reset_serial_messages"], [34, 2, 1, "", "run_state_machine"], [34, 2, 1, "", "send_state_machine"], [34, 2, 1, "", "softcode_handler_function"]], "village.pybpodapi.bpod.bpod_io.BpodIO.ChannelNames": [[34, 4, 1, "", "BNC"], [34, 4, 1, "", "PWM"], [34, 4, 1, "", "SERIAL"], [34, 4, 1, "", "VALVE"], [34, 4, 1, "", "WIRE"]], "village.pybpodapi.bpod.bpod_io.BpodIO.ChannelTypes": [[34, 4, 1, "", "INPUT"], [34, 4, 1, "", "OUTPUT"]], "village.pybpodapi.bpod.bpod_io.BpodIO.Events": [[34, 4, 1, "", "BNC1High"], [34, 4, 1, "", "Condition1"], [34, 4, 1, "", "GlobalCounter1End"], [34, 4, 1, "", "GlobalTimer1End"], [34, 4, 1, "", "GlobalTimer1Start"], [34, 4, 1, "", "PA1_Port1In"], [34, 4, 1, "", "Port1In"], [34, 4, 1, "", "Tup"], [34, 2, 1, "", "is_condition"], [34, 2, 1, "", "is_global_counter_end"], [34, 2, 1, "", "is_global_timer_cancel"], [34, 2, 1, "", "is_global_timer_end"], [34, 2, 1, "", "is_global_timer_start"], [34, 2, 1, "", "is_global_timer_trigger"], [34, 2, 1, "", "is_state_timer"]], "village.pybpodapi.bpod.bpod_io.BpodIO.OutputChannels": [[34, 4, 1, "", "BNC1High"], [34, 4, 1, "", "GlobalCounter1Reset"], [34, 4, 1, "", "GlobalTimer1Cancel"], [34, 4, 1, "", "GlobalTimer1Trig"], [34, 4, 1, "", "Serial1"], [34, 4, 1, "", "SoftCode1"], [34, 4, 1, "", "Valve1"]], "village.pybpodapi.bpod.hardware": [[36, 0, 0, "-", "channels"], [41, 0, 0, "-", "events"], [46, 0, 0, "-", "hardware"], [48, 0, 0, "-", "input_channels"], [51, 0, 0, "-", "output_channels"]], "village.pybpodapi.bpod.hardware.channels": [[37, 1, 1, "", "ChannelName"], [38, 1, 1, "", "ChannelType"], [39, 1, 1, "", "Channels"], [40, 1, 1, "", "EventsPositions"]], "village.pybpodapi.bpod.hardware.channels.ChannelName": [[37, 4, 1, "", "BNC"], [37, 4, 1, "", "PWM"], [37, 4, 1, "", "SERIAL"], [37, 4, 1, "", "VALVE"], [37, 4, 1, "", "WIRE"], [37, 2, 1, "", "__init__"]], "village.pybpodapi.bpod.hardware.channels.ChannelType": [[38, 4, 1, "", "INPUT"], [38, 4, 1, "", "OUTPUT"], [38, 2, 1, "", "__init__"]], "village.pybpodapi.bpod.hardware.channels.Channels": [[39, 2, 1, "", "__init__"], [39, 2, 1, "", "get_event_name"], [39, 2, 1, "", "setup_input_channels"], [39, 2, 1, "", "setup_output_channels"]], "village.pybpodapi.bpod.hardware.channels.EventsPositions": [[40, 2, 1, "", "__init__"]], "village.pybpodapi.bpod.hardware.events": [[42, 0, 0, "-", "base_eventname"], [44, 0, 0, "-", "bpod_events"]], "village.pybpodapi.bpod.hardware.events.base_eventname": [[43, 1, 1, "", "BaseEventName"]], "village.pybpodapi.bpod.hardware.events.base_eventname.BaseEventName": [[43, 2, 1, "", "__init__"], [43, 2, 1, "", "is_condition"], [43, 2, 1, "", "is_global_counter_end"], [43, 2, 1, "", "is_global_timer_cancel"], [43, 2, 1, "", "is_global_timer_end"], [43, 2, 1, "", "is_global_timer_start"], [43, 2, 1, "", "is_global_timer_trigger"], [43, 2, 1, "", "is_state_timer"]], "village.pybpodapi.bpod.hardware.events.bpod_events": [[45, 1, 1, "", "EventName"]], "village.pybpodapi.bpod.hardware.events.bpod_events.EventName": [[45, 4, 1, "", "BNC1High"], [45, 4, 1, "", "Condition1"], [45, 4, 1, "", "GlobalCounter1End"], [45, 4, 1, "", "GlobalTimer1End"], [45, 4, 1, "", "GlobalTimer1Start"], [45, 4, 1, "", "PA1_Port1In"], [45, 4, 1, "", "Port1In"], [45, 4, 1, "", "Tup"], [45, 2, 1, "", "__init__"], [45, 2, 1, "", "is_condition"], [45, 2, 1, "", "is_global_counter_end"], [45, 2, 1, "", "is_global_timer_cancel"], [45, 2, 1, "", "is_global_timer_end"], [45, 2, 1, "", "is_global_timer_start"], [45, 2, 1, "", "is_global_timer_trigger"], [45, 2, 1, "", "is_state_timer"]], "village.pybpodapi.bpod.hardware.hardware": [[47, 1, 1, "", "Hardware"]], "village.pybpodapi.bpod.hardware.hardware.Hardware": [[47, 2, 1, "", "__init__"], [47, 2, 1, "", "setup"]], "village.pybpodapi.bpod.hardware.input_channels": [[49, 0, 0, "-", "bpod_input_channels"]], "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels": [[50, 1, 1, "", "InputName"]], "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName": [[50, 4, 1, "", "BNC1"], [50, 4, 1, "", "BNC2"], [50, 4, 1, "", "Port1"], [50, 4, 1, "", "Port2"], [50, 4, 1, "", "Port3"], [50, 4, 1, "", "Port4"], [50, 4, 1, "", "Port5"], [50, 4, 1, "", "Port6"], [50, 4, 1, "", "Port7"], [50, 4, 1, "", "Port8"], [50, 4, 1, "", "Serial1"], [50, 4, 1, "", "Serial2"], [50, 4, 1, "", "Serial3"], [50, 4, 1, "", "USB1"], [50, 4, 1, "", "Wire1"], [50, 4, 1, "", "Wire2"], [50, 2, 1, "", "__init__"]], "village.pybpodapi.bpod.hardware.output_channels": [[52, 0, 0, "-", "bpod_output_channels"]], "village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels": [[53, 1, 1, "", "OutputChannel"]], "village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.OutputChannel": [[53, 4, 1, "", "BNC1High"], [53, 4, 1, "", "GlobalCounter1Reset"], [53, 4, 1, "", "GlobalTimer1Cancel"], [53, 4, 1, "", "GlobalTimer1Trig"], [53, 4, 1, "", "Serial1"], [53, 4, 1, "", "SoftCode1"], [53, 4, 1, "", "Valve1"], [53, 2, 1, "", "__init__"]], "village.pybpodapi.bpod.non_blockingsocketreceive": [[55, 1, 1, "", "NonBlockingSocketReceive"], [56, 3, 1, "", "UnexpectedEndOfStream"]], "village.pybpodapi.bpod.non_blockingsocketreceive.NonBlockingSocketReceive": [[55, 2, 1, "", "__init__"]], "village.pybpodapi.bpod.non_blockingstreamreader": [[58, 1, 1, "", "NonBlockingStreamReader"], [59, 3, 1, "", "UnexpectedEndOfStream"]], "village.pybpodapi.bpod.non_blockingstreamreader.NonBlockingStreamReader": [[58, 2, 1, "", "__init__"]], "village.pybpodapi.bpod_modules": [[62, 0, 0, "-", "bpod_module"], [64, 0, 0, "-", "bpod_modules"]], "village.pybpodapi.bpod_modules.bpod_module": [[63, 1, 1, "", "BpodModule"]], "village.pybpodapi.bpod_modules.bpod_module.BpodModule": [[63, 2, 1, "", "__init__"], [63, 2, 1, "", "load_message"]], "village.pybpodapi.bpod_modules.bpod_modules": [[65, 1, 1, "", "BpodModules"]], "village.pybpodapi.bpod_modules.bpod_modules.BpodModules": [[65, 2, 1, "", "__init__"]], "village.pybpodapi.com": [[67, 0, 0, "-", "arcom"], [71, 0, 0, "-", "messaging"], [106, 0, 0, "-", "protocol"], [111, 0, 0, "-", "stderr_buffer"], [113, 0, 0, "-", "stdout_buffer"]], "village.pybpodapi.com.arcom": [[68, 1, 1, "", "ArCOM"], [69, 1, 1, "", "ArduinoTypes"], [70, 1, 1, "", "DataType"]], "village.pybpodapi.com.arcom.ArCOM": [[68, 2, 1, "", "__init__"], [68, 2, 1, "", "bytes_available"], [68, 2, 1, "", "close"], [68, 2, 1, "", "open"]], "village.pybpodapi.com.arcom.ArduinoTypes": [[69, 2, 1, "", "__init__"]], "village.pybpodapi.com.arcom.DataType": [[70, 2, 1, "", "__init__"]], "village.pybpodapi.com.messaging": [[72, 0, 0, "-", "base_message"], [74, 0, 0, "-", "debug"], [76, 0, 0, "-", "end_trial"], [78, 0, 0, "-", "error"], [80, 0, 0, "-", "event_occurrence"], [82, 0, 0, "-", "event_resume"], [84, 0, 0, "-", "parser"], [86, 0, 0, "-", "session_info"], [88, 0, 0, "-", "softcode_occurrence"], [90, 0, 0, "-", "state_occurrence"], [92, 0, 0, "-", "state_transition"], [94, 0, 0, "-", "stderr"], [96, 0, 0, "-", "stdout"], [98, 0, 0, "-", "trial"], [100, 0, 0, "-", "untagged_message"], [102, 0, 0, "-", "value"], [104, 0, 0, "-", "warning"]], "village.pybpodapi.com.messaging.base_message": [[73, 1, 1, "", "BaseMessage"]], "village.pybpodapi.com.messaging.base_message.BaseMessage": [[73, 2, 1, "", "__init__"], [73, 2, 1, "", "check_type"], [73, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.debug": [[75, 1, 1, "", "DebugMessage"]], "village.pybpodapi.com.messaging.debug.DebugMessage": [[75, 2, 1, "", "__init__"], [75, 2, 1, "", "check_type"], [75, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.end_trial": [[77, 1, 1, "", "EndTrial"]], "village.pybpodapi.com.messaging.end_trial.EndTrial": [[77, 2, 1, "", "__init__"], [77, 2, 1, "", "check_type"], [77, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.error": [[79, 1, 1, "", "ErrorMessage"]], "village.pybpodapi.com.messaging.error.ErrorMessage": [[79, 2, 1, "", "__init__"], [79, 2, 1, "", "check_type"], [79, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.event_occurrence": [[81, 1, 1, "", "EventOccurrence"]], "village.pybpodapi.com.messaging.event_occurrence.EventOccurrence": [[81, 2, 1, "", "__init__"], [81, 2, 1, "", "check_type"], [81, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.event_resume": [[83, 1, 1, "", "EventResume"]], "village.pybpodapi.com.messaging.event_resume.EventResume": [[83, 2, 1, "", "__init__"], [83, 2, 1, "", "check_type"], [83, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.parser": [[85, 1, 1, "", "MessageParser"]], "village.pybpodapi.com.messaging.parser.MessageParser": [[85, 2, 1, "", "__init__"], [85, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.session_info": [[87, 1, 1, "", "SessionInfo"]], "village.pybpodapi.com.messaging.session_info.SessionInfo": [[87, 2, 1, "", "__init__"], [87, 2, 1, "", "check_type"], [87, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.softcode_occurrence": [[89, 1, 1, "", "SoftcodeOccurrence"]], "village.pybpodapi.com.messaging.softcode_occurrence.SoftcodeOccurrence": [[89, 2, 1, "", "__init__"], [89, 2, 1, "", "check_type"], [89, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.state_occurrence": [[91, 1, 1, "", "StateOccurrence"]], "village.pybpodapi.com.messaging.state_occurrence.StateOccurrence": [[91, 2, 1, "", "__init__"], [91, 2, 1, "", "check_type"], [91, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.state_transition": [[93, 1, 1, "", "StateTransition"]], "village.pybpodapi.com.messaging.state_transition.StateTransition": [[93, 2, 1, "", "__init__"], [93, 2, 1, "", "check_type"], [93, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.stderr": [[95, 1, 1, "", "StderrMessage"]], "village.pybpodapi.com.messaging.stderr.StderrMessage": [[95, 2, 1, "", "__init__"], [95, 2, 1, "", "check_type"], [95, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.stdout": [[97, 1, 1, "", "StdoutMessage"]], "village.pybpodapi.com.messaging.stdout.StdoutMessage": [[97, 2, 1, "", "__init__"], [97, 2, 1, "", "check_type"], [97, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.trial": [[99, 1, 1, "", "Trial"]], "village.pybpodapi.com.messaging.trial.Trial": [[99, 2, 1, "", "__init__"], [99, 2, 1, "", "check_type"], [99, 2, 1, "", "fromlist"], [99, 2, 1, "", "get_all_timestamps_by_event"], [99, 2, 1, "", "get_events_names"], [99, 2, 1, "", "get_timestamps_by_event_name"]], "village.pybpodapi.com.messaging.untagged_message": [[101, 1, 1, "", "UntaggedMessage"]], "village.pybpodapi.com.messaging.untagged_message.UntaggedMessage": [[101, 2, 1, "", "__init__"], [101, 2, 1, "", "check_type"], [101, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.value": [[103, 1, 1, "", "ValueMessage"]], "village.pybpodapi.com.messaging.value.ValueMessage": [[103, 2, 1, "", "__init__"], [103, 2, 1, "", "check_type"], [103, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.warning": [[105, 1, 1, "", "WarningMessage"]], "village.pybpodapi.com.messaging.warning.WarningMessage": [[105, 2, 1, "", "__init__"], [105, 2, 1, "", "check_type"], [105, 2, 1, "", "fromlist"]], "village.pybpodapi.com.protocol": [[107, 0, 0, "-", "recv_msg_headers"], [109, 0, 0, "-", "send_msg_headers"]], "village.pybpodapi.com.protocol.recv_msg_headers": [[108, 1, 1, "", "ReceiveMessageHeader"]], "village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader": [[108, 4, 1, "", "ENABLE_PORTS_OK"], [108, 4, 1, "", "HANDSHAKE_OK"], [108, 4, 1, "", "LOAD_SERIAL_MESSAGE_OK"], [108, 4, 1, "", "MODULE_EVENT_NAMES"], [108, 4, 1, "", "MODULE_REQUESTED_EVENT"], [108, 4, 1, "", "RESET_SERIAL_MESSAGES"], [108, 4, 1, "", "STATE_MACHINE_INSTALLATION_STATUS"], [108, 4, 1, "", "SYNC_CHANNEL_MODE_OK"], [108, 2, 1, "", "__init__"]], "village.pybpodapi.com.protocol.send_msg_headers": [[110, 1, 1, "", "SendMessageHeader"]], "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader": [[110, 4, 1, "", "DISCONNECT"], [110, 4, 1, "", "ECHO_SOFTCODE"], [110, 4, 1, "", "ENABLE_PORTS"], [110, 4, 1, "", "EXIT_AND_RETURN"], [110, 4, 1, "", "FIRMWARE_VERSION"], [110, 4, 1, "", "GET_MODULES"], [110, 4, 1, "", "GET_TIMESTAMP_TRANSMISSION"], [110, 4, 1, "", "HANDSHAKE"], [110, 4, 1, "", "HARDWARE_DESCRIPTION"], [110, 4, 1, "", "LOAD_SERIAL_MESSAGE"], [110, 4, 1, "", "MANUAL_OVERRIDE_EXEC_EVENT"], [110, 4, 1, "", "NEW_STATE_MATRIX"], [110, 4, 1, "", "OVERRIDE_DIGITAL_HW_STATE"], [110, 4, 1, "", "RESET_CLOCK"], [110, 4, 1, "", "RESET_SERIAL_MESSAGES"], [110, 4, 1, "", "RUN_STATE_MACHINE"], [110, 4, 1, "", "SEND_TO_HW_SERIAL"], [110, 4, 1, "", "SET_MODULE_RELAY"], [110, 4, 1, "", "SYNC_CHANNEL_MODE"], [110, 4, 1, "", "TRIGGER_SOFTCODE"], [110, 4, 1, "", "WRITE_TO_MODULE"], [110, 2, 1, "", "__init__"]], "village.pybpodapi.com.stderr_buffer": [[112, 1, 1, "", "StderrBuffer"]], "village.pybpodapi.com.stderr_buffer.StderrBuffer": [[112, 2, 1, "", "__init__"], [112, 2, 1, "", "close"], [112, 2, 1, "", "detach"], [112, 4, 1, "", "encoding"], [112, 4, 1, "", "errors"], [112, 2, 1, "", "fileno"], [112, 2, 1, "", "flush"], [112, 2, 1, "", "getvalue"], [112, 2, 1, "", "isatty"], [112, 4, 1, "", "newlines"], [112, 2, 1, "", "read"], [112, 2, 1, "", "readable"], [112, 2, 1, "", "readline"], [112, 2, 1, "", "readlines"], [112, 2, 1, "", "seek"], [112, 2, 1, "", "seekable"], [112, 2, 1, "", "tell"], [112, 2, 1, "", "truncate"], [112, 2, 1, "", "writable"], [112, 2, 1, "", "write"], [112, 2, 1, "", "writelines"]], "village.pybpodapi.com.stdout_buffer": [[114, 1, 1, "", "StdoutBuffer"]], "village.pybpodapi.com.stdout_buffer.StdoutBuffer": [[114, 2, 1, "", "__init__"], [114, 2, 1, "", "close"], [114, 2, 1, "", "detach"], [114, 4, 1, "", "encoding"], [114, 4, 1, "", "errors"], [114, 2, 1, "", "fileno"], [114, 2, 1, "", "flush"], [114, 2, 1, "", "getvalue"], [114, 2, 1, "", "isatty"], [114, 4, 1, "", "newlines"], [114, 2, 1, "", "read"], [114, 2, 1, "", "readable"], [114, 2, 1, "", "readline"], [114, 2, 1, "", "readlines"], [114, 2, 1, "", "seek"], [114, 2, 1, "", "seekable"], [114, 2, 1, "", "tell"], [114, 2, 1, "", "truncate"], [114, 2, 1, "", "writable"], [114, 2, 1, "", "write"], [114, 2, 1, "", "writelines"]], "village.pybpodapi.exceptions": [[116, 0, 0, "-", "bpod_error"]], "village.pybpodapi.exceptions.bpod_error": [[117, 3, 1, "", "BpodErrorException"]], "village.pybpodapi.session": [[120, 1, 1, "", "Session"], [121, 1, 1, "", "StreamsWrapper"]], "village.pybpodapi.session.Session": [[120, 2, 1, "", "__init__"], [120, 5, 1, "", "current_trial"]], "village.pybpodapi.session.StreamsWrapper": [[121, 2, 1, "", "__init__"]], "village.pybpodapi.state_machine": [[123, 1, 1, "", "StateMachine"], [124, 0, 0, "-", "conditions"], [126, 0, 0, "-", "global_counters"], [128, 0, 0, "-", "global_timers"], [130, 0, 0, "-", "state_machine_base"], [133, 0, 0, "-", "state_machine_builder"], [136, 0, 0, "-", "state_machine_runner"]], "village.pybpodapi.state_machine.StateMachine": [[123, 2, 1, "", "__init__"], [123, 2, 1, "", "add_state"], [123, 2, 1, "", "build_message"], [123, 2, 1, "", "build_message_32_bits"], [123, 2, 1, "", "set_condition"], [123, 2, 1, "", "set_global_counter"], [123, 2, 1, "", "set_global_timer"], [123, 2, 1, "", "set_global_timer_legacy"], [123, 2, 1, "", "update_state_numbers"]], "village.pybpodapi.state_machine.conditions": [[125, 1, 1, "", "Conditions"]], "village.pybpodapi.state_machine.conditions.Conditions": [[125, 2, 1, "", "__init__"]], "village.pybpodapi.state_machine.global_counters": [[127, 1, 1, "", "GlobalCounters"]], "village.pybpodapi.state_machine.global_counters.GlobalCounters": [[127, 2, 1, "", "__init__"]], "village.pybpodapi.state_machine.global_timers": [[129, 1, 1, "", "GlobalTimers"]], "village.pybpodapi.state_machine.global_timers.GlobalTimers": [[129, 2, 1, "", "__init__"]], "village.pybpodapi.state_machine.state_machine_base": [[131, 3, 1, "", "SMAError"], [132, 1, 1, "", "StateMachineBase"]], "village.pybpodapi.state_machine.state_machine_base.StateMachineBase": [[132, 2, 1, "", "__init__"], [132, 2, 1, "", "add_state"], [132, 2, 1, "", "set_condition"], [132, 2, 1, "", "set_global_counter"], [132, 2, 1, "", "set_global_timer"], [132, 2, 1, "", "set_global_timer_legacy"]], "village.pybpodapi.state_machine.state_machine_builder": [[134, 1, 1, "", "StateMachineBuilder"], [135, 3, 1, "", "StateMachineBuilderError"]], "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder": [[134, 2, 1, "", "__init__"], [134, 2, 1, "", "add_state"], [134, 2, 1, "", "build_message"], [134, 2, 1, "", "build_message_32_bits"], [134, 2, 1, "", "set_condition"], [134, 2, 1, "", "set_global_counter"], [134, 2, 1, "", "set_global_timer"], [134, 2, 1, "", "set_global_timer_legacy"], [134, 2, 1, "", "update_state_numbers"]], "village.pybpodapi.state_machine.state_machine_runner": [[137, 1, 1, "", "StateMachineRunner"], [138, 3, 1, "", "StateMachineRunnerError"]], "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner": [[137, 2, 1, "", "__init__"], [137, 2, 1, "", "add_state"], [137, 2, 1, "", "build_message"], [137, 2, 1, "", "build_message_32_bits"], [137, 2, 1, "", "set_condition"], [137, 2, 1, "", "set_global_counter"], [137, 2, 1, "", "set_global_timer"], [137, 2, 1, "", "set_global_timer_legacy"], [137, 2, 1, "", "update_state_numbers"]], "village.pybpodapi.utils": [[140, 0, 0, "-", "csv"], [143, 0, 0, "-", "date_parser"]], "village.pybpodapi.utils.csv": [[141, 1, 1, "", "Reader"], [142, 1, 1, "", "Writer"]], "village.pybpodapi.utils.csv.Reader": [[141, 2, 1, "", "__init__"]], "village.pybpodapi.utils.csv.Writer": [[142, 2, 1, "", "__init__"]], "village.pybpodapi.utils.date_parser": [[144, 6, 1, "", "parse"]], "village.screen": [[146, 0, 0, "-", "behavior_window"]], "village.screen.behavior_window": [[147, 1, 1, "", "BehaviorWindow"]], "village.screen.behavior_window.BehaviorWindow": [[147, 2, 1, "", "__init__"], [147, 2, 1, "", "animate"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "exception", "Python exception"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "function", "Python function"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:exception", "4": "py:attribute", "5": "py:property", "6": "py:function"}, "terms": {"": [55, 110, 123, 132, 134, 137, 149, 150, 153, 155, 157, 159, 162, 169, 170, 173, 175, 181], "0": [26, 28, 30, 32, 34, 63, 112, 114, 123, 132, 134, 137, 152, 153, 173], "000": 170, "05": 173, "07": 173, "08": 173, "0x4": [26, 28, 30, 32, 34, 110], "0x45": [167, 168], "0x64": [167, 168], "1": [4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 26, 28, 30, 32, 34, 38, 50, 68, 108, 110, 112, 114, 123, 132, 134, 137, 152, 153, 155, 162, 165, 167, 168, 170, 173, 175, 180], "10": [149, 150, 152, 165, 170, 173], "100": [152, 170, 173], "100u": [123, 132, 134, 137], "11": 152, "110": 152, "115200": 68, "12": [149, 150, 152, 153, 170], "120": [149, 150], "125": 152, "125khz": 152, "1280x720": [153, 159], "128gb": 153, "12h": 170, "12v": 152, "13": 153, "14": [155, 162], "142": 152, "145": [149, 150], "1495": 152, "15": [165, 173, 175], "15g": 165, "16": [149, 150, 155, 162], "160": 152, "17": 152, "1800": 175, "19": 152, "1kg": 165, "2": [26, 28, 30, 32, 34, 38, 50, 112, 114, 149, 150, 152, 153, 155, 162, 165, 170, 173, 175, 180], "20": [152, 155, 162], "200": 152, "2000": [149, 150], "20cm": 152, "20la": 152, "20x20": 152, "220": [149, 150], "228": 152, "24": [149, 150, 152, 155, 162, 170], "24h": 170, "25": [123, 132, 134, 137], "250": 132, "2500": 175, "255": [26, 28, 30, 32, 34, 123, 132, 134, 137, 173], "256gb": 152, "2600": 175, "2800": 175, "29": 152, "2a": 152, "2afc_protocol": [26, 28, 30, 32, 34], "2chan": 153, "2m": 152, "2mm": 152, "3": [26, 28, 30, 32, 34, 50, 110, 149, 150, 153, 155, 162, 170, 173, 175, 176], "30": [149, 150, 152], "3000": [149, 150], "300g": 165, "30x30": 152, "32": [123, 134, 137, 152], "35": 108, "3600": [123, 132, 134, 137, 173, 175], "37": 152, "3d": [149, 150, 151, 155, 162, 166, 179], "3gwy4": 152, "3mf": 165, "3mm": 152, "4": [26, 28, 30, 32, 34, 50, 110, 149, 150, 152, 153, 155, 162, 170, 173, 175], "40": [149, 150, 155, 162, 165, 175], "429496": 99, "4300": 152, "4mm": 152, "5": [50, 108, 123, 132, 134, 137, 152, 153, 165, 169], "50": [152, 173, 175], "500": [149, 150, 152, 175], "50cm": 152, "50g": 165, "54": 152, "5m": 152, "5mm": 152, "5v": 152, "6": [50, 110, 152, 170], "600": 173, "60d": 153, "69": 108, "6h": 170, "6mm": 152, "7": [50, 149, 150, 152, 155, 162], "70": [155, 162], "700g": 165, "7295": 99, "79": 152, "8": [50, 152, 155, 162], "80": 152, "85": 173, "8gb": [152, 153], "9": 152, "90": [149, 150], "900": 173, "90g": 165, "95": 152, "98": 152, "99": [152, 153], "A": [16, 123, 132, 134, 137, 149, 150, 153, 169, 170, 173, 175], "AND": [155, 162], "As": [149, 150, 170], "At": [175, 180], "But": [149, 150], "By": [149, 150, 155, 162, 175, 181], "For": [149, 150, 152, 153, 159, 165, 169, 170, 173, 175, 178], "If": [112, 114, 123, 132, 134, 137, 149, 150, 152, 153, 167, 168, 169, 170, 173, 175, 178, 179, 180], "In": [149, 150, 153, 155, 159, 162, 169, 170, 173, 175], "It": [73, 149, 150, 170, 173, 175], "No": [149, 150, 170, 173], "Not": 170, "ON": [169, 181], "On": [149, 150, 155, 162, 169], "One": 173, "Or": [149, 150], "That": [149, 150], "The": [16, 17, 26, 28, 30, 32, 34, 108, 110, 112, 114, 123, 132, 134, 137, 149, 150, 152, 153, 159, 165, 167, 168, 169, 170, 172, 175, 176, 181], "Then": [149, 150, 153], "There": [152, 159], "These": [37, 38, 45, 50, 53, 149, 150, 152, 155, 162, 170, 173, 175], "To": [153, 155, 162, 170, 173, 175, 181], "With": [155, 162], "__init__": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 26, 28, 30, 32, 34, 37, 38, 39, 40, 43, 45, 47, 50, 53, 55, 58, 63, 65, 68, 69, 70, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 108, 110, 112, 114, 120, 121, 123, 125, 127, 129, 132, 134, 137, 141, 142, 147, 173], "_arcom": [30, 32], "_bpodbase__process_opcod": [26, 28, 30, 32, 34], "_bpodbase__update_timestamp": [26, 28, 30, 32, 34], "abl": [149, 150, 160], "about": [120, 149, 150, 155, 162, 165, 173], "abov": [149, 150, 169, 175], "absolut": [112, 114], "abstract": 28, "academi": 160, "access": [149, 150, 155, 157, 161, 162, 169, 170, 173, 178, 179, 180, 181], "accident": [149, 150, 178], "accord": [37, 38, 45, 50, 53], "accordingli": [26, 28, 30, 32, 34, 169], "account": [159, 175], "accur": [169, 170, 175], "accuraci": [165, 173, 175], "acid": [149, 150, 176], "acquir": 173, "acquisit": [149, 150], "across": [149, 150], "acryl": [152, 155, 162], "action": [30, 32, 123, 132, 134, 137, 169, 172, 173], "activ": [149, 150, 153, 160, 169, 170, 175, 179, 181], "actual": [123, 134, 137], "actualiza": 147, "actualizar": 151, "ad": [112, 114, 132, 149, 150], "adapt": [155, 162], "add": [26, 28, 30, 32, 34, 123, 132, 134, 137, 149, 150, 151, 153, 159, 181], "add_stat": [123, 132, 134, 137, 173], "addict": [149, 150], "addit": [153, 169, 173, 175], "addition": [155, 162], "address": [159, 167, 168], "adequ": 173, "adjust": [149, 150, 155, 162, 170, 173, 175, 178], "admin": 160, "administ": [149, 150], "administr": [149, 150, 160], "advanc": [149, 150, 153, 173], "advanced_set": 17, "advantag": [149, 150], "advis": [149, 150], "affect": [132, 134, 175], "after": [112, 114, 149, 150, 153, 173, 175, 180], "again": 173, "aim": [149, 150], "al": 173, "alarm": [149, 150, 169, 173, 175, 176, 180, 184], "alarm_set": 17, "alert": [155, 162], "algorithm": 175, "align": 175, "all": [112, 114, 123, 132, 134, 137, 149, 150, 152, 153, 155, 160, 162, 165, 169, 170, 173, 175, 176, 179, 180, 181], "allow": [149, 150, 153, 155, 159, 160, 162, 169, 170, 172, 173, 175, 180, 181], "along": [153, 169, 179], "alreadi": [28, 112, 114, 173, 178], "also": [149, 150, 155, 157, 159, 162, 165, 170, 173, 175, 181], "altern": [151, 159], "although": [155, 162, 169], "alwai": [112, 114, 149, 150, 169, 170, 173], "am": [149, 150], "amazon": [149, 150], "amount": [149, 150, 173], "an": [16, 47, 63, 68, 81, 83, 89, 105, 112, 114, 123, 132, 134, 137, 149, 150, 155, 159, 162, 164, 165, 169, 170, 173, 175, 179, 184], "analog": [26, 28, 30, 32, 34, 37], "angl": 172, "ani": [17, 112, 114, 123, 132, 134, 137, 149, 150, 153, 155, 159, 162, 169, 173, 175], "anim": [147, 149, 150, 155, 162, 169, 170, 173, 178, 181, 184], "animaci\u00f3n": 147, "anoth": [149, 150, 155, 162, 169], "antenna": 175, "anyon": [132, 134], "apart": 173, "api": [28, 85], "appear": [153, 169, 170, 173, 181], "append": 173, "applic": [112, 114], "approach": [149, 150, 173], "appropri": 175, "approxim": [149, 150], "apt": [153, 167, 168], "ar": [17, 26, 28, 30, 32, 34, 99, 112, 114, 123, 132, 134, 137, 149, 150, 152, 153, 155, 159, 162, 167, 168, 169, 170, 173, 175, 178, 180, 181], "arcom": [30, 32], "arduino": 68, "area": [170, 175, 181], "area4": 170, "areas3": 170, "arg": [4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 173], "argument": [112, 114], "around": [149, 150, 155, 162, 175], "arrang": 165, "arrow": 180, "artifact": 175, "ask": 153, "asleep": [149, 150, 170], "assembl": [152, 179], "assembli": [152, 154, 179], "assess": [149, 150, 176], "assign": [123, 132, 134, 137, 153, 169, 181], "associ": [63, 81, 83, 89, 123, 132, 134, 137, 153], "assum": [149, 150], "attach": [155, 162], "attempt": [112, 114, 169, 170, 180], "attend": [149, 150], "attribut": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 26, 28, 30, 32, 34, 37, 38, 45, 47, 50, 53, 65, 69, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 108, 110, 112, 114, 120, 123, 137], "auditori": [155, 162], "author": 178, "auto": [153, 169], "autom": [155, 162, 175], "automat": [123, 132, 134, 137, 149, 150, 155, 159, 162, 169, 173, 178, 180], "automatis": [149, 150, 155, 162], "avail": [37, 50, 53, 152, 155, 162, 169, 173], "averag": [155, 162, 170], "avers": [149, 150], "aw": [149, 150], "awai": [149, 150], "b": [149, 150], "back": [149, 150, 173, 180], "background": 169, "backup": [161, 179], "bahsrc": 153, "balanc": [155, 162], "bambu": 165, "bambulab": 165, "ban": [149, 150], "basal_weight": [169, 181], "base": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 26, 28, 30, 32, 34, 37, 38, 39, 40, 43, 45, 47, 50, 53, 55, 58, 63, 65, 68, 69, 70, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 108, 110, 112, 114, 120, 121, 123, 125, 127, 129, 132, 134, 137, 141, 142, 147, 149, 150, 152, 155, 162, 169, 173, 175], "base_messag": [95, 97], "baseeventnam": 45, "baselin": [169, 170, 181], "basemessag": [75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105], "bashrc": 153, "basic": [152, 153], "batch": [149, 150], "batteri": [149, 150], "baudrat": [26, 28, 30, 32, 34, 68], "bcontrol": [155, 162], "becaus": [149, 150, 155, 162, 170], "been": [73, 112, 114, 132, 149, 150, 155, 162, 170, 175], "befor": [123, 132, 134, 137, 159, 173, 175, 178], "begin": [175, 180], "behavior": [1, 149, 150, 153, 157, 169, 170, 173, 176, 178, 179, 180, 181], "behavioral_task": 173, "being": [132, 137, 178], "below": [151, 152, 170, 173, 175, 176], "benefit": [149, 150], "best": [149, 150, 155, 162], "better": [149, 150, 155, 162], "between": [26, 28, 30, 32, 34, 68, 123, 132, 134, 137, 149, 150, 169, 170, 173, 175, 178], "bias": [149, 150], "bigger": [26, 28, 30, 32, 34], "bin": 153, "binari": [123, 132, 134, 137], "bit": [123, 134, 137], "black": [175, 180], "blank": 153, "blind": [149, 150], "block": [112, 114, 149, 150], "blocker": 152, "blue": [175, 180], "bnc": [26, 28, 30, 32, 34, 37, 45, 53, 178], "bnc1": 50, "bnc1high": [26, 28, 30, 32, 34, 45, 53], "bnc2": 50, "board": [26, 28, 30, 32, 34, 73, 75, 81, 83, 89, 152], "board_messag": [77, 79, 87, 101, 103], "board_timestamp": [81, 83, 89], "boardmessag": [77, 79, 87, 95, 97, 101, 103], "bonsai": [155, 162], "bool": [26, 28, 30, 32, 34, 43, 45, 132, 137, 173], "boot": [153, 159], "bore": [149, 150, 155, 162], "bot": [149, 150, 153, 161, 170, 178], "botfath": 160, "both": [153, 169, 170, 173, 175, 179], "bottl": [152, 176], "bottom": [152, 157, 165, 169, 181], "boundari": [4, 5, 6, 7, 8, 9, 10, 11, 12, 14], "box": [26, 28, 30, 32, 34, 50, 123, 132, 134, 137, 149, 150, 153, 165, 169, 170, 173, 176, 179, 181], "bpod": [28, 30, 32, 34, 37, 38, 39, 45, 47, 50, 53, 63, 65, 81, 83, 89, 97, 108, 110, 120, 123, 132, 134, 137, 149, 150, 153, 155, 157, 162, 173, 178], "bpod_bas": [26, 28, 30, 32, 34], "bpod_set": 17, "bpod_workspac": [26, 28, 30, 32, 34], "bpodbas": [26, 30, 32, 34], "bpodcomprotocol": 32, "bpodcomprotocolmodul": 34, "bpodio": 26, "brain": [155, 162], "braincircuitsbehaviorlab": 153, "briefli": [149, 150], "bright": 175, "brighter": 173, "browser": [151, 153], "buffer": [112, 114], "bui": 152, "build": [26, 28, 30, 32, 34, 110, 123, 134, 137, 151, 152, 155, 162, 165], "build_messag": [123, 134, 137], "build_message_32_bit": [123, 134, 137], "builder": 134, "built": [175, 179], "button": [169, 172, 181], "buzzer": [149, 150], "byte": [26, 28, 30, 32, 34, 108, 110, 112, 114], "bytes_avail": 68, "c": [110, 149, 150], "cabl": [152, 153, 159], "cad": 152, "cage": [149, 150, 152, 155, 162, 170, 176, 180], "calcul": 173, "calibr": [169, 170, 173, 176, 184], "call": [149, 150, 173], "cam": 170, "camelcas": 173, "camera": [149, 150, 152, 153, 155, 157, 162, 169, 170, 175, 178], "camera_set": 17, "can": [1, 16, 26, 28, 30, 32, 34, 112, 114, 123, 132, 134, 137, 149, 150, 151, 152, 153, 155, 162, 169, 170, 173, 175, 176, 178, 179, 180, 181], "cannot": [149, 150, 152, 169, 180], "cannula": [149, 150], "cap": [149, 150], "capac": [155, 162], "capsul": [152, 181], "captur": [123, 132, 134, 137, 169], "card": [153, 179], "carri": [149, 150, 155, 162], "case": [149, 150, 153, 170, 173, 175], "catch": [149, 150], "categori": 17, "caus": [123, 132, 134, 137, 149, 150, 155, 162, 170, 180], "cd": 153, "center": [169, 173], "central": [152, 155, 162, 165, 173], "certain": [155, 162, 170, 173], "challeng": 153, "chamber": [149, 150, 152, 155, 162], "chang": [81, 83, 89, 112, 114, 123, 132, 134, 137, 167, 168, 172, 173, 176, 178, 180, 181], "channel": [26, 28, 30, 32, 34, 37, 38, 50, 53, 110, 123, 132, 134, 137, 170], "channel_nam": [26, 30, 32, 34], "channel_numb": [26, 30, 32, 34], "channel_typ": [26, 30, 32, 34], "channel_valu": [123, 132, 134, 137], "channelnam": [26, 28, 30, 32, 34], "channeltyp": [26, 28, 30, 32, 34], "charact": [108, 110, 112, 114, 123, 132, 134, 137], "chat": [160, 170, 178], "check": [149, 150, 153, 155, 162, 167, 168, 169, 172, 173, 175, 176, 181], "check_typ": [73, 75, 77, 79, 81, 83, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105], "choic": [155, 162, 173], "choos": [153, 173], "chromium": 153, "circuit": [155, 162], "circumst": [149, 150], "citric": [149, 150, 176], "class": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 49, 50, 52, 53, 54, 55, 57, 58, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 136, 137, 140, 141, 142, 146, 147, 173], "classmethod": [73, 75, 77, 79, 81, 83, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105], "clean": 176, "clear": 170, "click": [153, 169, 170, 181], "clock": 110, "clone": [153, 173], "close": [26, 28, 30, 32, 34, 68, 112, 114, 149, 150, 170, 172, 180], "close_door2": 180, "closest": 157, "cloud": [149, 150], "cm": 152, "cmdline": 153, "code": [1, 26, 28, 30, 32, 34, 45, 108, 110, 132, 149, 150, 153, 155, 159, 162, 166, 167, 168, 170], "cognit": [149, 150, 155, 162], "collabor": 164, "collect": [155, 162], "color": [175, 178, 180], "columns_head": 142, "com": [30, 32, 77, 79, 87, 95, 97, 101, 103, 152, 153, 155, 162], "combin": [149, 150, 173, 175], "come": [149, 150, 155, 162, 173, 175], "comfort": 153, "command": [26, 28, 30, 32, 34, 108, 153, 160, 169, 170, 179], "comment": 152, "commerci": 159, "common": [149, 150, 170], "commun": [28, 30, 32], "compar": [149, 150, 155, 162, 173], "compat": [132, 134, 149, 150], "competit": [149, 150], "complet": [123, 132, 134, 137, 155, 162, 169, 170, 173, 179, 181], "complex": [155, 162, 173], "compon": [151, 152, 155, 162, 169, 184], "compos": [155, 162], "comprehens": 151, "compress": 110, "comput": [155, 159, 162, 179], "condit": [26, 28, 30, 32, 34, 45, 123, 132, 134, 137, 149, 150, 155, 162, 169, 175], "condition1": [26, 28, 30, 32, 34, 45], "condition_channel": [123, 132, 134, 137], "condition_numb": [123, 132, 134, 137], "config": 153, "configur": [26, 28, 30, 32, 34, 110, 153, 155, 162, 167, 168, 169, 170, 175, 178, 179, 180], "confirm": [153, 175], "connect": [26, 28, 30, 32, 34, 37, 47, 63, 68, 110, 149, 150, 152, 153, 155, 159, 161, 162, 169, 170, 179], "connector": [152, 155, 162], "consecut": 173, "consequ": [149, 150], "consid": 170, "consist": [155, 162, 173], "constant": [149, 150], "constantli": [149, 150], "construct": 175, "consult": 170, "consum": [26, 28, 30, 32, 34, 170, 173], "consumpt": [155, 162, 173], "contact": [149, 150, 155, 162], "contain": [16, 123, 132, 134, 137, 153, 170, 173, 175, 179], "content": [73, 75, 77, 79, 95, 97, 101, 105, 112, 114], "continu": [149, 150, 155, 162, 169, 173, 175, 180], "contrast": [149, 150], "control": [112, 114, 149, 150, 157, 169], "convent": 173, "convers": 160, "convert": 175, "copi": [153, 160, 179], "correct": [167, 168, 173], "correctli": [167, 168, 170, 172], "correspond": [91, 93, 99, 167, 168, 169, 170, 173], "corridor": [149, 150, 152, 157, 169, 170, 176, 178, 180, 181, 184], "cost": [149, 150, 152, 155, 162], "could": [149, 150, 170, 173], "count": [123, 132, 134, 137, 170, 175], "counter": [123, 132, 134, 137], "counter_numb": [123, 132, 134, 137], "countri": 153, "cover": [152, 170, 175], "cpu": 153, "cqrobot": [152, 167, 168], "creat": [26, 28, 30, 32, 34, 99, 159, 161, 169, 175, 184], "credenti": 159, "criteria": [149, 150, 173], "critic": 170, "crouch": 175, "csv": [169, 170, 173, 181], "cual": 151, "cue": [149, 150], "current": [26, 28, 30, 32, 34, 47, 112, 114, 120, 137, 149, 150, 155, 159, 162, 169, 170, 173], "current_st": 137, "current_tri": [120, 173], "custom": [1, 153, 155, 162], "cut": [152, 155, 162], "cycl": [169, 178], "d": [149, 150, 153, 164], "dac": [153, 178], "dai": [149, 150, 155, 162, 165, 169, 175, 178], "daili": [149, 150], "damag": [149, 150], "dark": [175, 178], "darker": [175, 180], "data": [26, 28, 30, 32, 34, 68, 110, 123, 132, 134, 137, 149, 150, 153, 155, 162, 170, 173, 180, 181, 184], "data_avail": [26, 30, 32, 34], "datafram": [170, 173], "dataset": [155, 162], "date": [144, 181], "dateutil": 153, "daytim": [155, 162, 178], "dc": 152, "de": [147, 149, 150], "debug": 169, "decid": [149, 150], "decis": [149, 150, 173], "decod": [112, 114], "decreas": [149, 150, 155, 162, 173], "def": 173, "default": [16, 112, 114, 169, 170, 173, 181], "defin": [30, 32, 38, 108, 110, 149, 150, 169, 173, 175, 181], "dehydr": [149, 150], "del": 151, "delai": [155, 162], "deliv": [155, 162, 169, 173], "deliveri": 176, "demand": [155, 162], "demo_project": 173, "depend": [149, 150, 152, 153, 155, 162, 173, 175], "depriv": [149, 150], "descript": [13, 16, 17, 26, 28, 30, 32, 34, 47, 123, 132, 134, 137, 169, 180], "descriptor": [112, 114], "design": [149, 150, 153, 155, 157, 162, 170, 175], "desir": [153, 180], "desktop": [26, 28, 30, 32, 34], "detach": [112, 114], "detail": [149, 150, 152, 153, 159, 169], "detect": [149, 150, 167, 168, 169, 178, 180, 181, 184], "determin": [112, 114, 155, 162, 170, 173, 175, 180], "dev": [26, 28, 30, 32, 34, 153], "develop": [155, 162], "devic": [30, 32, 47, 108, 110, 152, 155, 159, 161, 162, 167, 168, 178, 179], "df": 173, "df_follow_the_light": 173, "df_habitu": 173, "df_last_sess": 173, "df_previous_sess": 173, "dfrobot": [167, 168], "diagram": 180, "diamet": 152, "dibujo": 151, "dict": [99, 123, 132, 134, 137, 173], "dictionari": [99, 123, 132, 134, 137], "differ": [17, 149, 150, 155, 159, 162, 167, 168, 169, 173, 175], "difficulti": [155, 162, 173], "digit": 110, "direct": [155, 162], "directli": [26, 28, 30, 32, 34, 151], "directori": 153, "directory_set": 17, "dirt": 170, "disabl": [153, 169, 170], "disconnect": [110, 152, 157, 170, 179], "dispens": 152, "displai": [153, 159, 169, 170, 179, 181], "distribut": [149, 150, 153], "dmesg": 153, "do": [149, 150, 159], "doe": [112, 114, 149, 150, 151, 169, 170, 180], "domin": [149, 150], "don": 165, "done": 176, "door": [149, 150, 152, 155, 162, 169, 170, 172, 175, 180], "door2": 173, "down": 160, "download": [151, 152, 153, 164, 179], "drop": [170, 176], "dropbox": 173, "drug": [149, 150], "dtoverlai": 153, "due": [155, 159, 162, 170, 175], "durabl": 152, "durat": [123, 132, 134, 137, 149, 150, 155, 162, 173, 175], "dure": [149, 150, 152, 159, 170, 173, 175], "duti": 176, "dynam": 153, "e": [26, 28, 30, 32, 34, 37, 110, 149, 150, 153, 155, 162, 170], "each": [112, 114, 132, 149, 150, 152, 155, 162, 169, 170, 172, 173, 175], "easi": [149, 150, 165], "easier": 175, "easiest": 159, "easili": 179, "echo": 110, "echo_softcod": 110, "eco": [155, 162], "edit": [153, 160, 169, 181], "effect": [112, 114, 149, 150, 155, 162], "effici": [155, 162], "either": [151, 169, 173, 179], "el": [147, 151], "elaps": [170, 180], "electrod": [149, 150], "electron": [151, 155, 162], "electrophysiolog": [149, 150], "electrophysiologi": [149, 150], "element": [155, 162, 172], "elev": 175, "elif": 173, "els": [149, 150, 173], "email": 173, "emitt": 152, "empti": [112, 114, 153, 170, 175, 180], "empty_limit": 175, "en": 151, "enabl": [26, 28, 30, 32, 34, 110, 149, 150, 153, 169, 178], "enable_port": [108, 110], "enable_ports_ok": 108, "enable_uart": 153, "encod": [112, 114], "encount": 159, "end": [91, 93, 110, 112, 114, 149, 150, 169, 170, 175], "end_tim": 87, "end_timestamp": 91, "engag": [149, 150], "english": 153, "enhanc": [132, 134], "enough": [175, 176], "enrich": 176, "ensur": [132, 152, 153, 155, 162, 169, 170, 178, 181], "enter": [123, 132, 134, 137, 149, 150, 155, 162, 169, 170, 173, 175, 178, 180], "entir": [112, 114, 152, 155, 162, 179], "entranc": [149, 150, 155, 162, 170], "entri": [85, 155, 162, 169, 175], "enum": [14, 16, 17], "env": [153, 179], "environ": 179, "eof": [112, 114], "equal": [112, 114, 173], "equip": [155, 162], "equival": [26, 28, 30, 32, 34, 110], "error": [105, 112, 114, 170, 175, 180], "escap": [149, 150, 152], "especi": 153, "essenti": [169, 170, 173, 175], "esta": 151, "establish": 169, "estado": 147, "estim": [152, 165], "etc": [26, 30, 32, 34, 75, 149, 150, 153, 169, 173], "ethernet": [153, 157, 159], "evalu": 170, "even": [132, 149, 150, 153], "event": [26, 28, 30, 32, 34, 39, 45, 81, 83, 89, 99, 108, 110, 123, 132, 134, 137, 149, 150, 169, 170, 173, 180, 181], "event_id": [81, 83, 89], "event_idx": 39, "event_list": 173, "event_nam": [26, 28, 30, 32, 34, 43, 45, 81, 83, 89, 99], "eventnam": [26, 28, 30, 32, 34], "eventoccurr": 99, "events_nam": 63, "events_occurr": 99, "everi": [26, 28, 30, 32, 34, 149, 150, 153, 173, 176], "everyth": 179, "ex": [123, 132, 134, 137], "exact": 153, "exampl": [26, 28, 30, 32, 34, 99, 123, 132, 134, 137, 175], "exce": [112, 114, 123, 132, 134, 137, 175], "exceed": 170, "excel": [155, 162], "except": [18, 21, 54, 56, 57, 59, 116, 130, 131, 133, 135, 136, 138, 155, 162, 173], "execut": [26, 28, 30, 32, 34, 110, 123, 132, 134, 137, 149, 150, 169, 170], "exhaust": [155, 162], "exist": [112, 114, 123, 132, 134, 137, 184], "exit": [110, 123, 132, 134, 137, 149, 150, 152, 169, 170, 173], "exit_and_return": 110, "exit_sav": 180, "exit_unsav": 180, "expect": 175, "experi": [28, 75, 149, 150, 155, 162, 169, 173], "experiment": [149, 150, 155, 162, 173], "explain": [149, 150, 169], "explan": [153, 169], "explor": [149, 150, 173], "exploratori": [149, 150], "export": [26, 28, 30, 32, 34], "extend": [134, 137, 175], "extens": [26, 28, 30, 32, 34, 45, 149, 150, 152, 170], "extern": [149, 150, 152, 159, 170, 179], "extra_set": [167, 168], "extrem": [149, 150], "ez": 152, "f": [110, 149, 150], "facil": [149, 150], "fact": [149, 150], "facto": [149, 150], "factori": 16, "factory_valu": 16, "fail": [149, 150, 170], "failur": [149, 150, 170], "fall": [149, 150, 173], "fals": [63, 112, 114, 170, 173], "fan": 153, "far": [112, 114], "faster": 153, "faulti": 170, "feed": 169, "feedback": 175, "feel": 152, "fell": 170, "few": [149, 150, 170], "fewer": [155, 162, 170], "fi": 153, "fig1": [149, 150], "filament": [165, 175], "file": [26, 28, 30, 32, 34, 85, 112, 114, 152, 153, 155, 162, 166, 169, 170, 173, 178, 179, 181], "filenam": 173, "fileno": [112, 114], "filestream": [141, 142], "final": [26, 28, 30, 32, 34, 149, 150, 173], "final_task": 173, "find": [26, 30, 32, 34, 155, 162, 173], "find_first_occurr": 173, "find_module_by_nam": [26, 28, 30, 32, 34], "finish": [149, 150, 173], "finit": 132, "firmwar": [26, 28, 30, 32, 34, 37, 38, 45, 50, 53, 110, 153], "firmware_vers": [63, 110], "first": [108, 110, 123, 132, 134, 137, 149, 150, 159, 170, 173, 175], "first_pok": 173, "fit": 152, "fix": [149, 150, 176], "flex": 152, "flexibl": [149, 150], "flip": [26, 28, 30, 32, 34], "float": [16, 81, 83, 89, 99, 123, 132, 134, 137], "floor": 175, "fluctuat": [149, 150], "flush": [112, 114], "focus": 169, "folder": [26, 28, 30, 32, 34, 153, 173, 178, 181], "follow": [123, 132, 134, 137, 152, 153, 159, 160, 165, 167, 168, 169, 170, 173, 178, 179, 180, 181], "follow_the_light": 173, "food": [149, 150, 152, 155, 162, 176], "footag": 170, "forag": [149, 150, 155, 162], "forc": [149, 150], "force_hotplug": 153, "force_stop": 173, "forcibli": 159, "format": 169, "found": [169, 173], "foundat": 152, "four": [149, 150, 175], "frame": 152, "free": [149, 150, 152, 159, 175], "freeli": [149, 150, 155, 162], "freez": 170, "frequent": 170, "fri": [149, 150], "from": [26, 28, 30, 32, 34, 47, 55, 58, 73, 77, 79, 81, 83, 87, 89, 95, 101, 103, 108, 112, 114, 123, 132, 134, 137, 149, 150, 152, 155, 159, 160, 162, 169, 170, 173, 175, 178, 179], "fromlist": [73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105], "full": [149, 150, 151, 153, 155, 162, 165], "fulli": [173, 175], "func": 153, "func2": 153, "function": [26, 28, 30, 32, 34, 143, 169, 170, 172, 173, 176], "further": [112, 114, 172], "g": [26, 28, 30, 32, 34, 37, 110, 149, 150, 155, 162, 170], "gather": [155, 162], "gener": [39, 149, 150, 153, 155, 162, 165, 170, 173], "gentli": 172, "get": [17, 99, 110, 120, 149, 150, 153, 167, 168, 172, 173, 184], "get_all_timestamps_by_ev": 99, "get_descript": 17, "get_event_nam": 39, "get_events_nam": 99, "get_index": 17, "get_indic": 17, "get_modul": 110, "get_text": 17, "get_timestamp_transmiss": 110, "get_timestamps_by_event_nam": 99, "get_typ": 17, "get_valu": 17, "get_valve_tim": 173, "getvalu": [112, 114], "git": 153, "github": [153, 155, 160, 162, 164, 178], "give": [149, 150, 173], "given": [123, 132, 134, 137, 149, 150, 173], "glad": 164, "glass": 152, "global": [123, 132, 134, 137, 153], "global_count": 132, "global_tim": 132, "globalcount": 132, "globalcounter1end": [26, 28, 30, 32, 34, 45], "globalcounter1reset": [26, 28, 30, 32, 34, 53], "globalcounter_end": [26, 28, 30, 32, 34, 45], "globalcounterreset": [26, 28, 30, 32, 34, 53], "globaltim": 132, "globaltimer1cancel": [26, 28, 30, 32, 34, 53], "globaltimer1end": [26, 28, 30, 32, 34, 45], "globaltimer1start": [26, 28, 30, 32, 34, 45], "globaltimer1trig": [26, 28, 30, 32, 34, 53], "globaltimer_end": [26, 28, 30, 32, 34, 45], "globaltimer_start": [26, 28, 30, 32, 34, 45], "globaltimercancel": [26, 28, 30, 32, 34, 53], "globaltimertrig": [26, 28, 30, 32, 34, 53], "gmail": [155, 162], "go": [149, 150, 153, 159, 160, 173, 178, 181], "goe": 173, "good": [149, 150], "gpl": [155, 162], "green": [175, 180], "group": [17, 155, 160, 162, 169, 170], "gui": [147, 173, 179, 184], "gui_tabs_restrict": 173, "guidanc": 152, "guillotin": [149, 150], "h": 110, "ha": [112, 114, 149, 150, 153, 155, 162, 170, 173, 175, 180], "hab": [155, 162], "habitu": 173, "had": [149, 150], "half": 170, "hand": [149, 150], "handl": [26, 28, 30, 32, 34, 123, 132, 134, 137, 149, 150, 152, 155, 162], "handler": [26, 28, 30, 32, 34], "handshak": [26, 28, 30, 32, 34, 108, 110], "handshake_ok": 108, "happen": [149, 150], "hard": [149, 150, 173], "harder": [149, 150], "hardwar": [26, 28, 30, 32, 34, 39, 110, 123, 132, 134, 137, 155, 161, 162, 170], "hardware_descript": 110, "hardwareinfocontain": 47, "hat": [155, 162], "have": [73, 112, 114, 132, 149, 150, 153, 155, 162, 165, 170, 173, 175, 179], "hdmi": [152, 153], "header": [108, 110], "health": [149, 150], "heartbeat": [1, 161, 170], "heavier": 152, "help": [151, 159, 169, 173, 175], "helper": 173, "henc": [149, 150], "here": [132, 134, 152, 153, 169, 173, 179], "hidden_set": 17, "hide": 173, "high": [155, 162, 170, 173], "higher": [149, 150], "hint": [112, 114], "histori": 85, "hit": [112, 114], "hold": [132, 137, 175], "holidai": [149, 150], "home": [152, 153, 165, 170, 173, 179, 180], "homecag": [149, 150], "host_timestamp": [73, 75, 77, 79, 81, 83, 89, 91, 93, 95, 97, 101, 103, 105], "hour": [149, 150, 155, 162, 165, 173], "hourli": 170, "hous": [149, 150], "hover": 169, "how": [149, 150, 152, 169, 173, 175], "howev": [149, 150, 153, 159], "http": 153, "human": [149, 150, 155, 162], "humid": [169, 172], "hundr": [149, 150], "hw_info_contain": 47, "hw_output": 39, "hx711": [152, 167, 168], "hygien": 176, "i": [16, 17, 26, 28, 30, 32, 34, 38, 68, 108, 110, 112, 114, 132, 134, 137, 149, 150, 152, 153, 157, 159, 162, 164, 167, 168, 169, 173, 175, 176, 178, 179, 180, 181], "i2c": [167, 168], "i2cdetect": [167, 168], "id": [26, 28, 30, 32, 34, 63, 75, 152, 160, 178, 181], "ideal": 175, "identifi": [153, 170, 175], "illumin": [152, 173, 175], "iloc": 173, "imag": [153, 166, 169, 175, 179], "immedi": [112, 114, 149, 150], "impact": [149, 150, 155, 162], "implant": [149, 150], "implement": [1, 112, 114, 149, 150, 173], "impli": [149, 150], "import": 173, "improv": [149, 150, 155, 162], "inact": 169, "inch": 152, "includ": [120, 149, 150, 153, 155, 162, 169, 173, 176, 179], "increas": [149, 150, 155, 162, 173], "index": [17, 81, 83, 89], "indic": [112, 114, 149, 150, 155, 162, 170, 175, 180], "individu": [149, 150, 155, 162, 175], "ineffici": 132, "info": [169, 173], "infonam": 87, "inform": [47, 75, 120, 169, 170, 173, 176], "infovalu": 87, "infrar": 175, "inherit": 173, "ini": 178, "init": 173, "initi": [26, 28, 30, 32, 34, 110, 155, 162, 173, 180, 184], "inject": [149, 150], "inlin": 151, "input": [26, 28, 30, 32, 34, 38, 39, 45, 50, 110, 123, 132, 134, 137], "input_matrix": 132, "insert": [153, 179], "insid": [149, 150, 152, 153, 155, 162, 170, 173, 176, 180], "instal": [154, 155, 159, 162, 167, 168, 179], "instanc": [123, 132, 134, 137], "instead": 153, "instruct": [149, 150, 152, 153, 154, 159, 160, 169, 170, 179], "int": [16, 17, 26, 28, 30, 32, 34, 63, 81, 83, 89, 123, 132, 134, 137, 173], "intak": [149, 150, 170], "integ": [123, 132, 134, 137], "integr": [149, 150, 155, 162], "intens": 173, "intent": [149, 150], "inter": 173, "interact": [28, 112, 114, 155, 162], "interest": [149, 150], "interfac": [68, 152, 153], "intern": [123, 132, 134, 137, 152], "internet": [149, 150, 153, 159, 170, 179], "interv": 173, "interven": [149, 150], "intervent": [149, 150, 155, 162, 180], "introduc": [149, 150], "invalid": 170, "investig": 170, "invit": [149, 150], "involv": [149, 150, 155, 162, 173], "io": [112, 114], "ip": 159, "ir": 152, "is_condit": [26, 28, 30, 32, 34, 43, 45], "is_global_counter_end": [26, 28, 30, 32, 34, 43, 45], "is_global_timer_cancel": [26, 28, 30, 32, 34, 43, 45], "is_global_timer_end": [26, 28, 30, 32, 34, 43, 45], "is_global_timer_start": [26, 28, 30, 32, 34, 43, 45], "is_global_timer_trigg": [26, 28, 30, 32, 34, 43, 45], "is_run": [132, 137], "is_state_tim": [26, 28, 30, 32, 34, 43, 45], "isatti": [112, 114], "iso": [153, 166], "issu": [159, 164, 169, 170], "item": [153, 169, 173], "iti_st": 173, "iti_tim": 173, "its": [16, 149, 150, 153, 155, 157, 162, 169, 170, 180, 181], "ivar": 132, "j": 110, "jitteri": 153, "john": [26, 28, 30, 32, 34], "jump": [153, 175], "just": [149, 150, 173], "k": 110, "keep": [132, 134, 149, 150, 152], "kei": [16, 17, 99, 123, 132, 134, 137, 155, 162], "kept": [132, 134], "kernel": 153, "keyboard": [153, 157, 159, 179], "kg": 152, "khz": 152, "kind": [149, 150], "know": [149, 150, 169], "known": 172, "kwd": [4, 5, 6, 7, 8, 9, 10, 11, 12, 14], "l": 110, "la": 147, "lab": [149, 150, 155, 162], "lamp": 175, "languag": 153, "larg": [152, 155, 162, 170, 175], "larger": [155, 162, 173], "laser": [149, 150, 152, 155, 162], "last": [149, 150, 170, 173, 175], "last_task": 173, "later": 173, "latest": 169, "launch": [169, 170, 180], "launch_auto": 180, "lead": 180, "learn": [149, 150, 155, 162, 173], "least": [170, 173, 175], "leav": [149, 150, 169], "led": [26, 28, 30, 32, 34, 37, 152, 169], "left": [152, 165, 169, 173], "left_easi": 173, "left_hard": 173, "left_poke_act": 173, "left_valve_opening_tim": 173, "legaci": [123, 132, 134, 137], "legal": [155, 162], "len": 173, "length": [112, 114], "less": [132, 149, 150, 153, 170], "let": [155, 162, 173], "level": 173, "libitum": [149, 150], "libportaudio2": 153, "libqt5multimedia5": 153, "librari": [132, 134], "licens": [155, 162, 173], "lick": 173, "lick_teach": 173, "lid": [152, 155, 162], "light": [149, 150, 152, 169, 170, 173, 175, 178], "light_intensity_high": 173, "light_intensity_low": 173, "lighter": 180, "like": [26, 30, 32, 34, 75, 132, 134, 149, 150, 155, 162, 164, 170], "line": [75, 85, 112, 114, 153], "link": [123, 132, 134, 137, 153, 155, 162], "linux": 153, "list": [16, 17, 26, 28, 30, 32, 34, 63, 85, 91, 93, 99, 112, 114, 120, 123, 132, 134, 137, 154, 169, 170, 173, 178, 179], "listen": [123, 132, 134, 137], "lite": 159, "live": [155, 162], "ll": [152, 159, 165], "lo": 151, "load": [26, 28, 30, 32, 34, 63, 110], "load_cont": 85, "load_messag": 63, "load_serial_messag": [26, 28, 30, 32, 34, 108, 110], "load_serial_message_ok": 108, "locat": [149, 150, 170, 175, 181], "locomotor": [149, 150], "log": [159, 169, 181], "logic": [26, 28, 30, 32, 34, 134, 137, 173], "login": 153, "long": [149, 150, 155, 162, 170], "longer": [149, 150], "longitudin": [149, 150], "look": 173, "loop": [26, 28, 30, 32, 34], "loop_handl": [26, 28, 30, 32, 34], "loop_interv": [123, 132, 134, 137], "loop_mod": [123, 132, 134, 137], "lot": [132, 134, 173], "loud": [149, 150], "low": [155, 162, 170, 173], "lower_cas": 173, "lumin": 175, "m": [110, 153, 175], "machin": [26, 28, 30, 32, 34, 91, 93, 123, 132, 134, 137, 173, 184], "made": [149, 150, 155, 162, 173], "magenta": 175, "mai": [73, 149, 150, 153, 170, 173, 175, 180], "main": [39, 153, 176, 178, 179], "main_set": 17, "maintain": [149, 150, 176], "mainten": [152, 184], "make": [149, 150, 152, 153, 173, 175, 181], "mal": 151, "malfunct": 170, "manag": [153, 173, 176, 179], "mandatori": 173, "mani": [149, 150, 170, 175], "manifest": 132, "manipul": [149, 150, 180], "manual": [26, 30, 32, 34, 110, 149, 150, 151, 153, 155, 162, 169, 173, 176, 180], "manual_overrid": [26, 30, 32, 34], "manual_override_exec_ev": 110, "margin": 175, "marinraf": [155, 162], "mark": 175, "mask": 176, "match": 153, "matlab": [132, 134], "matrix": [110, 123, 132, 134, 137], "max_stat": [125, 127, 129], "maxim": [149, 150], "maximum": [149, 150, 173, 175], "maximum_dur": [169, 173], "maximum_number_of_tri": 169, "md": 173, "mean": 173, "meant": [149, 150], "measur": [149, 150], "mechan": [155, 162], "memori": [149, 150], "mention": 165, "menu": [169, 173], "messag": [21, 26, 28, 30, 32, 34, 63, 73, 77, 79, 81, 83, 85, 87, 89, 95, 97, 101, 103, 105, 108, 110, 123, 134, 137, 169, 170, 173, 181], "message_api": 28, "message_id": [26, 28, 30, 32, 34], "messageapi": 28, "met": 173, "meta_output_nam": 132, "meth": 85, "method": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 26, 28, 30, 32, 34, 37, 38, 39, 40, 43, 45, 47, 50, 53, 55, 58, 63, 65, 68, 69, 70, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 108, 110, 112, 114, 120, 121, 123, 125, 127, 129, 132, 134, 137, 141, 142, 147], "metric": 173, "mg995": 152, "mice": [149, 150, 152, 155, 162, 176], "micro": [152, 153], "microsecond": 132, "middl": 173, "might": 175, "millilit": 173, "min": [149, 150, 170, 173], "mind": [132, 134, 155, 162], "mini": [155, 162], "minim": 175, "minimum": [149, 150, 155, 162, 170, 173, 180], "minimum_dur": 173, "minor": 175, "minut": [165, 169, 170], "misconfigur": 170, "miss": [149, 150, 170], "mistak": 175, "mistakenli": 170, "mm": [149, 150, 152], "mode": [26, 28, 30, 32, 34, 110, 169, 178, 180], "model": [26, 28, 30, 32, 34, 85, 165, 167, 168], "modif": [149, 150], "modifi": [153, 167, 168, 169, 173], "modul": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 22, 23, 24, 25, 26, 28, 30, 32, 34, 35, 39, 41, 47, 48, 51, 61, 63, 66, 71, 106, 108, 110, 115, 122, 139, 145, 153], "module_event_nam": 108, "module_nam": 63, "module_requested_ev": 108, "moment": [149, 150], "mon": [149, 150], "mondai": [149, 150, 169], "monipol": 173, "monitor": [123, 132, 134, 137, 149, 150, 153, 155, 157, 162, 172, 181], "monopol": [149, 150], "montar": 151, "month": [149, 150, 155, 162, 170, 176], "more": [112, 114, 149, 150, 155, 162, 169, 170, 173], "moreov": [149, 150, 155, 162], "morn": [149, 150], "most": [112, 114, 149, 150, 155, 162, 169, 170], "motiv": [149, 150, 155, 162], "motor": [151, 153, 155, 157, 162, 172], "motor_set": 17, "mount": 152, "mous": [149, 150, 152, 153, 155, 157, 159, 162, 173, 175, 179], "move": [173, 175], "msg": [63, 112, 114], "msg_id": 63, "much": [149, 150], "multi": [155, 162], "multimedia": 153, "multipl": [149, 150, 170, 173, 175], "must": [37, 38, 45, 50, 53, 112, 114, 123, 132, 134, 137, 149, 150, 160, 169, 172, 173, 175, 178], "mv": 176, "my": [149, 150], "my_bpod": [26, 28, 30, 32, 34], "n_condit": 125, "n_global_count": 127, "n_global_tim": 129, "n_serial_ev": 63, "name": [4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 26, 28, 30, 32, 34, 37, 39, 70, 75, 81, 83, 89, 91, 93, 99, 108, 110, 123, 132, 134, 137, 169, 173, 181], "name_of_the_project": 173, "nan": 173, "nano": 153, "navig": [149, 150, 153, 172], "nearbi": [149, 150], "necessari": [149, 150, 153, 155, 162, 176, 179], "necessarili": [149, 150], "need": [149, 150, 152, 155, 159, 162, 165, 173, 175, 176, 179], "neg": [112, 114], "nest": [155, 162], "net_port": 28, "network": 159, "neurolux": [149, 150], "never": [160, 170, 178], "new": [26, 28, 30, 32, 34, 110, 112, 114, 149, 150, 153, 160, 169, 173, 184], "new_sma_s": 28, "new_state_matrix": 110, "newbot": 160, "newlin": [112, 114], "next": [153, 169, 173, 180, 181], "next_session_tim": [169, 181], "next_set": [169, 181], "next_task": 173, "night": [149, 150, 169, 170, 175, 178], "nighttim": [155, 162, 178], "nobodi": [149, 150], "noir": [152, 153], "nois": 175, "non": [112, 114, 159], "none": [4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 17, 26, 28, 30, 32, 34, 63, 73, 75, 77, 79, 81, 83, 87, 89, 95, 97, 99, 101, 103, 105, 112, 114, 120, 123, 132, 134, 137, 142, 147, 153, 169, 173], "normal": [149, 150], "not_allow": 175, "note": [153, 175], "notif": [155, 162, 178], "now": [110, 153, 159, 173, 175, 179], "number": [26, 28, 30, 32, 34, 110, 112, 114, 123, 132, 134, 137, 149, 150, 152, 153, 169, 170, 173, 175], "o": [34, 110, 159, 179], "object": [2, 16, 17, 19, 20, 26, 28, 30, 32, 34, 37, 38, 39, 40, 43, 47, 50, 53, 55, 58, 63, 65, 68, 69, 70, 73, 85, 108, 110, 112, 114, 120, 121, 125, 127, 129, 132, 141, 142, 173], "objectivis": [149, 150], "observ": 175, "obtain": [47, 149, 150, 160, 178, 181], "occasion": [149, 150], "occup": [155, 162], "occupi": [149, 150, 175], "occur": [123, 132, 134, 137, 170, 175, 180], "occurr": [91, 93, 99, 173], "ocean": 152, "off": 169, "off_messag": [123, 132, 134, 137], "offer": [155, 162], "offset": [112, 114], "often": [149, 150, 155, 162, 170], "omit": [112, 114], "on_messag": [123, 132, 134, 137], "on_set_delai": [123, 132, 134, 137], "onc": [149, 150, 157, 159, 169, 170, 173, 176, 179, 180], "one": [26, 28, 30, 32, 34, 110, 112, 114, 123, 132, 134, 137, 149, 150, 153, 155, 162, 169, 170, 173, 175], "oneset_trigg": [123, 132, 134, 137], "onli": [112, 114, 149, 150, 153, 170, 173, 175, 179], "online_plot": 173, "onto": 179, "opb100": 152, "opb100z": 152, "opcod": [26, 28, 30, 32, 34], "open": [26, 28, 30, 32, 34, 68, 149, 150, 159, 160, 164, 165, 169, 170, 172, 173, 179, 180], "open_door2": 180, "opencv": 153, "oper": [112, 114, 149, 150, 153, 155, 159, 162, 175, 179], "optim": [149, 150, 155, 162, 165, 175], "option": [26, 28, 30, 32, 34, 153, 155, 159, 162, 169], "optogenet": [149, 150], "orang": 180, "order": 170, "ordered_list_of_ev": 173, "organ": [149, 150, 152], "orient": 165, "origin": [73, 132, 134], "oserror": [112, 114], "oshw": [155, 162], "osmot": [149, 150], "other": [149, 150, 152, 153, 155, 157, 159, 160, 162, 170, 173, 175], "other_vari": 173, "otherwis": [26, 28, 30, 32, 34, 173], "our": [149, 150, 155, 162, 164, 173], "out": [26, 30, 32, 34, 149, 150, 155, 162, 173, 175], "outag": [149, 150, 170], "output": [26, 28, 30, 32, 34, 38, 39, 53, 123, 132, 134, 137, 173], "output_act": [123, 132, 134, 137, 173], "output_matrix": 132, "outputchannel": [26, 28, 30, 32, 34], "outsid": [149, 150, 175, 178], "over": [149, 150, 169, 170, 179], "overrid": [1, 26, 28, 30, 32, 34, 110, 112, 114], "override_digital_hw_st": 110, "overview": 184, "own": [149, 150, 155, 162, 173, 179, 180], "p1": 165, "pa1_port1in": [26, 28, 30, 32, 34, 45], "pace": [149, 150, 155, 162], "packag": 153, "page": [151, 153, 159, 164], "pair": [149, 150], "panel": 153, "para": 151, "param": [26, 28, 30, 32, 34, 68, 123, 132, 134, 137], "paramet": [26, 28, 30, 32, 34, 39, 43, 45, 47, 63, 81, 83, 85, 89, 91, 93, 99, 103, 123, 132, 134, 137, 149, 150, 169, 173, 175, 178, 181], "pars": 85, "part": [149, 150, 151, 154, 155, 162, 165, 179], "particip": [160, 170], "particular": [16, 149, 150], "pass": [149, 150, 170, 173], "password": 153, "past": [149, 150], "path": [26, 28, 30, 32, 34, 120, 153], "pattern": 153, "paus": [149, 150], "pc": 73, "pd": 173, "pdf": 151, "pegar": 151, "penalti": [149, 150], "per": [149, 150, 155, 162, 170, 173], "percentag": [149, 150], "perceptu": [149, 150], "perfectli": 175, "perform": [30, 32, 149, 150, 155, 159, 162, 169, 173, 180], "performance_last_sess": 173, "performance_previous_sess": 173, "perhap": [149, 150], "period": [149, 150, 155, 162, 169, 173], "peripher": [149, 150], "permit": 175, "person": [149, 150], "pharmacolog": [149, 150], "phase": [149, 150], "phone": 159, "photog": 170, "physic": [153, 170], "pi": [149, 150, 152, 155, 157, 159, 162, 169, 179], "pick": 173, "piec": [149, 150, 179], "pieza": 151, "pin2": 153, "pipelin": [149, 150], "pixel": [170, 175], "pla": 165, "place": [149, 150, 157, 173, 181], "plai": [155, 162, 169, 170], "plan": 179, "plastic": [149, 150, 152, 155, 162], "platform": 178, "pleas": 151, "plot": [169, 170, 173, 184], "plu": [149, 150], "plug": [155, 162], "plugin": 153, "po": [112, 114], "point": [149, 150, 179, 180], "poke": 173, "poner": 151, "port": [26, 28, 30, 32, 34, 45, 50, 110, 123, 132, 134, 137, 153, 155, 157, 162, 169, 173, 178], "port1": [26, 28, 30, 32, 34, 45, 50, 173], "port1in": [26, 28, 30, 32, 34, 45, 173], "port1lit": [123, 132, 134, 137], "port1out": 99, "port2": [50, 173], "port2in": [99, 173], "port2out": 99, "port3": [50, 173], "port3in": [99, 173], "port3lit": [123, 132, 134, 137], "port3out": 99, "port4": 50, "port5": 50, "port6": 50, "port7": 50, "port8": 50, "port_vari": 173, "posit": [112, 114, 123, 132, 134, 137, 149, 150, 155, 157, 162, 169], "possibl": [17, 155, 162, 173, 175, 180], "postur": 175, "potenti": 170, "power": [149, 150, 152, 153, 155, 159, 162, 170], "practic": [149, 150], "pre": [149, 150, 153, 179], "preced": [149, 150], "precis": 132, "predict": [149, 150, 155, 162], "prefer": [155, 162, 179], "preinstal": 153, "premis": [149, 150], "present": [153, 170, 178], "preset": [149, 150], "press": 172, "prevent": [149, 150, 152, 169, 170, 173, 178], "preview": 181, "previou": [149, 150], "previous": [123, 132, 134, 137], "price": 152, "principl": [149, 150], "print": [97, 149, 150, 151, 155, 162, 166], "printabl": 179, "privat": [30, 32, 170, 178], "pro": [153, 178], "probe": [149, 150], "problem": [149, 150, 170, 176], "proce": [153, 179], "procedur": 184, "process": [26, 28, 30, 32, 34, 55, 58, 77, 79, 87, 95, 101, 103, 149, 150, 153, 155, 162, 170, 173, 175], "program": [132, 149, 150, 179], "progress": [149, 150, 169, 173, 176], "prohibit": 170, "project": [1, 155, 162, 164, 181], "prolong": 170, "promot": [155, 162], "promptli": [149, 150], "proper": 176, "properli": [153, 176], "properti": [120, 173], "prosoci": [149, 150], "protect": [149, 150, 155, 162], "protocol": [26, 28, 30, 32, 34, 97, 155, 162, 169, 181, 184], "provid": [112, 114, 149, 150, 151, 152, 153, 155, 162, 165, 169, 170, 175, 176, 179], "pulseaudio": 153, "pump": [149, 150, 152, 169, 173], "punish": [149, 150, 173], "punish_condit": 173, "punish_st": 173, "punishment_tim": 173, "purchas": [152, 179], "purpos": [149, 150, 155, 162], "push": [152, 172], "put": [149, 150], "pwm": [26, 28, 30, 32, 34, 37, 153], "pwm1": [123, 132, 134, 137, 173], "pwm2": [123, 132, 134, 137, 173], "pwm3": 173, "py": [85, 103, 153, 167, 168, 173, 179], "pybod": [149, 150], "pybpodapi": [26, 28, 30, 32, 34, 132, 134], "pybpodgui_plugin": [77, 79, 85, 87, 95, 97, 101, 103], "pyqt5": 153, "python": [68, 132, 134, 155, 162, 167, 168, 169, 173, 179], "python3": 153, "qtmultimedia": 153, "qualiti": [149, 150, 152], "qualnam": [4, 5, 6, 7, 8, 9, 10, 11, 12, 14], "quantifi": [149, 150], "quantit": [149, 150], "question": [149, 150], "quickli": [149, 150, 180], "qwidget": 147, "r": 110, "rain": [155, 162], "rais": [112, 114], "random": 173, "rang": [123, 132, 134, 137, 155, 162, 175], "rare": [149, 150], "raspberri": [149, 150, 155, 157, 159, 162, 167, 168, 169, 179], "raspi": [153, 159], "rat": [149, 150, 155, 162], "raw": [165, 169], "rca": 152, "re": [149, 150, 153, 169], "reach": [112, 114, 149, 150, 169, 173, 180], "react": [149, 150], "reactiv": 170, "read": [55, 58, 112, 114, 170, 172], "readabl": [112, 114], "reader": [149, 150, 152, 155, 157, 162, 169, 170, 175, 181], "readi": [153, 173, 179, 180], "readlin": [112, 114], "readm": 173, "ready_to_initi": 173, "real": [155, 162, 169, 184], "realli": 153, "realvnc": 159, "reason": [149, 150, 159, 175], "reboot": 153, "receiv": [26, 30, 32, 34, 47, 108, 152, 155, 160, 162, 173, 179, 184], "recent": [155, 162, 169], "recogn": [153, 167, 168], "recogniz": 153, "recommend": [159, 165], "record": [149, 150, 169, 173, 175, 181], "rectangl": 175, "red": [175, 180], "reduc": [132, 149, 150, 173], "reduct": [155, 162], "reenter": [149, 150], "refer": [153, 169, 181], "referenc": [123, 132, 134, 137], "reflect": 175, "refractori": [169, 173], "refractory_period": 173, "regard": [149, 150, 155, 162], "regardless": [153, 159], "regist": [26, 28, 30, 32, 34, 173], "register_valu": 173, "regress": 173, "regul": [149, 150, 155, 162], "rel": [112, 114], "relai": 110, "relaunch": 170, "releas": [26, 28, 30, 32, 34], "reliabl": [149, 150, 152, 155, 162, 175], "reload": 153, "remain": [170, 175, 178, 180], "rememb": 173, "remot": [149, 150, 153, 155, 157, 161, 162, 170, 179, 180], "remov": [149, 150, 153, 155, 162, 176], "render": [153, 169], "repeat": [132, 149, 150], "repetit": [99, 149, 150, 155, 162], "repinta": 147, "replac": [123, 134, 137, 165], "report": [149, 150, 164, 170, 176], "repositori": [153, 155, 162, 166, 173, 178], "repres": [28, 47, 73, 75, 77, 79, 81, 83, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 173, 175, 180, 181], "represent": [16, 17], "reproduc": [149, 150], "request": [30, 32, 108, 110], "requir": [149, 150, 155, 162, 165, 170, 173, 175, 176, 179, 180, 181], "research": [149, 150, 155, 162], "reserv": [149, 150], "reset": [26, 28, 30, 32, 34, 110], "reset_clock": 110, "reset_serial_messag": [26, 28, 30, 32, 34, 108, 110], "resolut": [153, 159], "resolv": [149, 150, 169, 170, 180], "resourc": [155, 162], "respond": [149, 150, 173, 184], "respons": [149, 150, 155, 162, 170], "response_tim": 173, "rest": [149, 150, 153], "restart": [149, 150, 170], "restrict": [170, 173], "result": 170, "retriev": [26, 28, 30, 32, 34, 112, 114, 170], "return": [17, 26, 28, 30, 32, 34, 39, 43, 45, 68, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 110, 112, 114, 120, 123, 132, 134, 137, 147, 169, 173, 180], "review": [170, 176, 179], "reward": [149, 150, 155, 162, 173], "reward_amount_ml": 173, "reward_st": 173, "reward_state_left": 173, "reward_state_right": 173, "rfid": [149, 150, 153, 155, 157, 162, 165, 169, 170, 175, 180, 181], "right": [152, 153, 165, 169, 173], "right_easi": 173, "right_hard": 173, "right_poke_act": 173, "right_valve_opening_tim": 173, "rigid": 152, "rigor": [155, 162], "rodent": [149, 150, 155, 162], "room": [149, 150, 169, 175, 178], "root": 170, "routin": 176, "row": [73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 170, 181], "rpi": 178, "rtype": [26, 28, 30, 32, 34], "run": [26, 28, 30, 32, 34, 110, 120, 132, 137, 149, 150, 155, 162, 167, 168, 169, 173, 179, 180], "run_asap": [26, 28, 30, 32, 34], "run_clos": [170, 180], "run_first": [170, 180], "run_open": [170, 180], "run_state_machin": [26, 28, 30, 32, 34, 108, 110], "run_villag": [169, 179], "safe": [149, 150, 175], "safeti": 170, "same": [149, 150, 159, 173], "sanwork": [155, 162], "save": [85, 169, 173, 180, 184], "save_insid": 180, "save_outsid": 180, "scale": [149, 150, 152, 155, 162, 169, 170, 172, 180], "scenario": [170, 180], "schedul": [149, 150, 161, 173], "scheme": 110, "scipi": 153, "sck": 55, "scratch": 179, "screen": [159, 169, 170, 172, 178, 179, 181], "screen_set": 17, "screenshot": 170, "screwdriv": 179, "script": [149, 150, 173], "sd": [152, 153, 179], "se": 151, "seamless": [155, 162], "search": [26, 28, 30, 32, 34, 160], "second": [123, 132, 134, 137, 149, 150, 169, 170, 173, 175], "section": [152, 155, 159, 162, 169, 170, 175, 176], "see": [123, 132, 134, 137, 159, 170], "seealso": 103, "seek": [112, 114], "seekabl": [112, 114], "select": [153, 160, 169, 170, 172, 173, 178, 181], "self": [149, 150, 173], "send": [1, 26, 28, 30, 32, 34, 63, 110, 123, 134, 137, 149, 150, 155, 160, 161, 162, 170, 173], "send_ev": [123, 132, 134, 137], "send_state_machin": [26, 28, 30, 32, 34], "send_to_hw_seri": 110, "sensor": [152, 153, 155, 157, 162, 169], "sent": [110, 170, 175], "separ": [112, 114, 152, 175], "sequenc": 180, "sequenti": 173, "serial": [26, 28, 30, 32, 34, 37, 53, 68, 110], "serial1": [26, 28, 30, 32, 34, 50, 53], "serial1_3": 50, "serial1_4": 50, "serial2": 50, "serial3": 50, "serial_channel": [26, 28, 30, 32, 34], "serial_messag": [26, 28, 30, 32, 34], "serial_port": [26, 28, 30, 32, 34, 63, 68], "serialportnam": 68, "serv": [155, 162], "server": [1, 77, 79, 87, 95, 101, 103, 149, 150, 159, 170], "server_set": 17, "servic": [149, 150], "servo": [152, 155, 157, 162], "session": [26, 28, 30, 32, 34, 73, 85, 110, 112, 114, 149, 150, 155, 162, 169, 170, 173], "session_io": 85, "session_nam": [26, 28, 30, 32, 34], "session_plot": 173, "sessionio": 85, "set": [26, 28, 30, 32, 34, 37, 38, 45, 47, 50, 53, 110, 112, 114, 123, 132, 134, 137, 149, 150, 157, 159, 160, 167, 168, 170, 172, 173, 175, 179, 181, 184], "set_condit": [123, 132, 134, 137], "set_global_count": [123, 132, 134, 137], "set_global_tim": [123, 132, 134, 137], "set_global_timer_legaci": [123, 132, 134, 137], "set_module_relai": 110, "setup": [47, 152, 155, 162], "setup_input_channel": 39, "setup_output_channel": 39, "setuptools_scm": 153, "seven": [149, 150], "sever": [149, 150, 155, 162, 169, 170, 173], "shadow": 175, "shape": [155, 162], "share": [155, 160, 162, 178], "shine": [155, 162], "short": [149, 150], "shorter": [149, 150], "should": [26, 28, 30, 32, 34, 112, 114, 123, 132, 134, 137, 149, 150, 153, 169, 170, 172, 173, 175, 181], "show": 169, "shown": [149, 150, 170, 173], "sht31": [152, 167, 168], "side": [169, 173], "signal": [1, 149, 150, 155, 161, 162, 170], "signific": [155, 162], "significantli": 175, "similar": [149, 150, 175, 178], "similarli": 175, "simpl": [149, 150, 173], "simple_task": 173, "simpler": 173, "simpli": [153, 159, 170, 175, 179], "simplifi": [68, 155, 162, 173], "simultan": 175, "sinc": 170, "singl": [155, 162, 165, 175], "site": 153, "situat": 170, "size": [70, 112, 114, 155, 162, 175], "slack": 173, "slight": 175, "slightli": 170, "slot": 152, "sma": [26, 28, 30, 32, 34, 99, 123, 132, 134, 137], "small": [151, 152], "so": [112, 114, 132, 134, 149, 150, 153, 173, 181], "social": [155, 162], "soft": [26, 28, 30, 32, 34, 110], "softcod": [26, 28, 30, 32, 34, 53, 89], "softcode1": [26, 28, 30, 32, 34, 53], "softcode_funct": 173, "softcode_handler_funct": [26, 28, 30, 32, 34], "softwar": [149, 150, 154, 155, 162, 179], "sole": 175, "solut": [155, 162, 170], "some": [155, 159, 162, 165, 170, 173, 178, 181], "someon": [149, 150], "someth": [149, 150, 176], "sometim": [149, 150], "son": 151, "sound": [149, 150, 153, 169, 170, 173, 178], "sound_calibr": 169, "sound_devic": 178, "sound_funct": 173, "sound_set": 17, "sounddevic": 153, "sourc": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 26, 28, 30, 32, 34, 37, 38, 39, 40, 43, 45, 47, 50, 53, 55, 56, 58, 59, 63, 65, 68, 69, 70, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 108, 110, 112, 114, 117, 120, 121, 123, 125, 127, 129, 131, 132, 134, 135, 137, 138, 141, 142, 144, 147, 152, 153, 164], "space": [155, 162], "span": 175, "speaker": [152, 169], "special": [155, 162], "specif": [37, 38, 45, 50, 53, 91, 93, 153, 169, 173, 175, 176], "specifi": [112, 114, 153, 169, 170], "spi": 153, "stabil": [149, 150, 152], "stabl": [149, 150, 155, 162, 175, 180], "staff": [149, 150], "stage": [149, 150, 173], "stai": [149, 150, 175], "stainless": 152, "standard": [149, 150, 155, 162, 169, 173], "start": [4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 26, 28, 30, 32, 34, 91, 93, 112, 114, 123, 132, 134, 137, 149, 150, 153, 160, 169, 170, 175, 184], "start_tim": 87, "state": [26, 28, 30, 32, 34, 81, 83, 89, 91, 93, 99, 110, 112, 114, 123, 132, 134, 137, 149, 150, 155, 162, 170, 173, 184], "state_change_condit": [123, 132, 134, 137, 173], "state_machin": [26, 28, 30, 32, 34], "state_machine_installation_statu": 108, "state_nam": [91, 93, 123, 132, 134, 137, 173], "state_tim": [123, 132, 134, 137, 173], "state_timer_matrix": 132, "statedur": [91, 93], "statemachin": [26, 28, 30, 32, 34, 99], "statemachinebas": 134, "statemachinebuild": 137, "statemachinerunn": 123, "statement": 97, "stateoccurr": 99, "states_occurr": 99, "static": [26, 28, 30, 32, 34, 43, 45], "statu": [155, 162, 169, 175], "stderr": [55, 58, 77, 79, 87, 95, 101, 103], "stdout": [55, 58], "steel": 152, "step": [153, 159, 167, 168], "still": [123, 132, 134, 137, 149, 150, 180], "stimuli": [149, 150, 153, 155, 162, 169, 178], "stimulu": 173, "stimulus_st": 173, "stimulus_state_output": 173, "stl": 165, "stop": [26, 28, 30, 32, 34, 152, 173], "store": [91, 93, 120, 153, 173, 178], "str": [16, 17, 26, 28, 30, 32, 34, 43, 45, 81, 83, 85, 89, 91, 93, 99, 123, 132, 134, 137, 173], "straightforward": [173, 179], "stream": [55, 58, 112, 114, 121], "strength": [155, 162], "stress": [149, 150, 155, 162], "stretch": 175, "string": [16, 17, 112, 114, 123, 132, 134, 137], "stringio": [112, 114], "strong": [149, 150], "structur": [132, 134, 152], "studi": [149, 150], "studio": 165, "subclass": [112, 114], "subfold": 173, "subgroup": [149, 150], "subject": [149, 150, 155, 162, 169, 173, 184], "subject_limit": 175, "subject_plot": 173, "suboptim": 159, "subscript": 159, "subset": 165, "substitut": [149, 150], "success": 108, "successfulli": [149, 150], "sucros": [149, 150, 176], "sudo": [153, 167, 168], "suffer": [149, 150], "suffici": [149, 150, 173], "suggest": 170, "suit": [149, 150], "sum": 173, "summari": [169, 170], "sundai": [149, 150, 169], "super": 173, "superenum": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13], "suppli": [152, 153], "supplier": 152, "support": [26, 28, 30, 32, 34, 37, 151, 152, 165], "sure": [149, 150, 152, 153, 173, 181], "surprisingli": [149, 150], "suspect": 176, "switch": [149, 150, 169, 178], "symbol": [153, 170], "symlink": 153, "sync": [26, 28, 30, 32, 34, 110, 123, 132, 134, 137], "sync_channel": [26, 28, 30, 32, 34], "sync_channel_mod": [108, 110], "sync_channel_mode_ok": 108, "sync_mod": [26, 28, 30, 32, 34], "synchron": [26, 28, 30, 32, 34, 123, 132, 134, 137], "system": [17, 149, 150, 151, 152, 157, 159, 166, 167, 168, 169, 173, 175, 176, 178, 184], "system_info": 181, "system_nam": 173, "sz": 152, "t": [110, 112, 114, 132, 165], "tab": [160, 173], "tabl": [169, 181], "tag": [155, 162, 169, 181], "take": [123, 132, 134, 137, 149, 150, 165, 173], "talk": 173, "tandem": [155, 162], "target": 173, "target_ev": [123, 132, 134, 137], "task": [75, 149, 150, 152, 155, 162], "tast": [149, 150], "team": 159, "technic": [149, 150], "telegram": [149, 150, 153, 155, 161, 162, 169, 175, 176, 178, 184], "telegram_chat": [160, 178], "telegram_set": 17, "telegram_token": [160, 178], "telegram_us": 178, "tell": [112, 114], "temperatur": [149, 150, 152, 153, 155, 157, 162, 169, 170, 172], "temporari": 170, "termin": [153, 169, 170, 179], "test": [26, 28, 30, 32, 34, 149, 150, 155, 159, 162, 169, 184], "tether": [149, 150], "text": [112, 114, 153, 160, 173], "textio": [112, 114], "textiobas": [112, 114], "than": [26, 28, 30, 32, 34, 132, 149, 150, 153, 170], "thei": [17, 123, 134, 137, 149, 150, 152, 169, 173], "them": [149, 150, 152, 165, 169, 173, 175], "therefor": 169, "thi": [1, 26, 28, 30, 32, 34, 81, 83, 89, 91, 93, 112, 114, 123, 132, 134, 137, 149, 150, 151, 153, 155, 159, 160, 162, 169, 170, 173, 175, 176, 179, 180, 181], "thing": 75, "this_trial_typ": 173, "those": [173, 175], "though": 175, "three": [155, 162, 165, 173], "threshold": [123, 132, 134, 137, 170, 173, 175, 178], "through": [26, 28, 30, 32, 34, 63, 149, 150, 155, 162, 169, 173], "time": [123, 132, 134, 137, 149, 150, 155, 159, 162, 169, 170, 173, 175, 181, 184], "timeout": [68, 173], "timer": [123, 132, 134, 137, 169], "timer_dur": [123, 132, 134, 137], "timer_for_respons": 173, "timer_id": [123, 132, 134, 137], "timestamp": [26, 28, 30, 32, 34, 81, 83, 89, 91, 93, 99, 110], "todo": [132, 151, 153], "togeth": [149, 150, 155, 162], "toggl": 169, "token": 178, "too": [149, 150, 152, 170], "tool": [167, 168], "toolbar": 153, "top": [149, 150, 152, 155, 162, 165, 169, 172, 175], "tornillo": 151, "torqu": 152, "total": [112, 114, 152, 155, 162, 173], "total_states_ad": 132, "touch": [152, 172], "touchscreen": [149, 150, 155, 162, 175, 178], "touchscreen_set": 17, "towerpro": 152, "track": [149, 150, 169], "tradit": [149, 150], "train": [149, 150, 151, 162, 164, 165, 169, 170, 176, 179, 181, 184], "training_protocol": 173, "training_set": 173, "trainingprotocol": 173, "transact": 68, "transform": [149, 150], "transient": [149, 150], "transit": [123, 132, 134, 137, 170, 173, 180], "transmiss": 110, "transpar": [149, 150, 152, 155, 162], "transport": [149, 150, 155, 162], "trial": [26, 28, 30, 32, 34, 120, 132, 149, 150, 169, 170, 173], "trial_data": 173, "trial_start_timestamp": 99, "trial_typ": 173, "trials_last_sess": 173, "trials_previous_sess": 173, "trigger": [110, 123, 132, 134, 137, 149, 150, 153, 169, 170, 173, 175, 180], "trigger_softcod": 110, "troubleshoot": [169, 170], "true": [73, 75, 77, 79, 81, 83, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 112, 114, 173], "truncat": [112, 114], "try": [149, 150], "tty": [26, 28, 30, 32, 34], "ttyacm": 153, "ttyacm0": 153, "ttyacm1": 153, "ttyacm2": 153, "tube": [155, 162], "tune": [149, 150], "tunnel": 152, "tup": [26, 28, 30, 32, 34, 45, 99, 123, 132, 134, 137, 173], "tupl": [123, 132, 134, 137], "turn": [169, 173], "tv": [149, 150], "two": [149, 150, 153, 155, 157, 162, 169, 170, 173, 175, 176, 180], "txt": 153, "txtline": 85, "type": [4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 17, 26, 28, 30, 32, 34, 38, 43, 45, 85, 99, 110, 120, 123, 134, 137, 147, 149, 150, 153, 155, 162, 170, 173, 175, 178, 179], "typestr": [73, 75, 77, 79, 81, 83, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105], "typic": [149, 150, 153, 175, 180], "u": [110, 149, 150, 179], "udevadm": 153, "ultim": [149, 150], "unchang": [112, 114], "unconsci": [149, 150], "undeclar": [123, 132, 134, 137], "under": [155, 162, 169], "underli": [112, 114], "understand": 153, "unexpect": [149, 150], "uniformli": [149, 150], "uniqu": [26, 28, 30, 32, 34, 123, 132, 134, 137, 181], "unless": [165, 175, 179], "unlik": [123, 132, 134, 137, 149, 150, 175], "unrespons": 170, "unsuccess": 169, "until": [112, 114, 123, 132, 134, 137, 149, 150, 170, 173], "unus": [112, 114], "unusu": 170, "up": [47, 149, 150, 152, 157, 159, 175, 178, 179], "updat": [26, 28, 30, 32, 34, 155, 162, 173], "update_state_numb": [123, 134, 137], "upgrad": 153, "upload": 28, "us": [26, 28, 30, 32, 34, 63, 112, 114, 123, 132, 134, 137, 149, 150, 151, 152, 155, 159, 162, 167, 168, 169, 170, 172, 173, 178, 184], "usag": 153, "usb": [152, 157], "usb1": 50, "usbmodem1293": [26, 28, 30, 32, 34], "use_screen": 178, "use_soundcard": 178, "user": [26, 28, 30, 32, 34, 155, 160, 162, 169, 173, 178, 180], "usernam": 153, "username_to_id_bot": 160, "usual": [55, 58, 112, 114, 153, 170, 175], "v": [110, 152, 153], "v3": 152, "vacant": 170, "valid": [123, 132, 134, 137], "valu": [4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 17, 26, 30, 32, 34, 37, 38, 45, 50, 53, 99, 103, 123, 132, 134, 137, 153, 169, 173, 175, 181], "value_nam": 103, "value_typ": 16, "valueerror": [112, 114], "valv": [26, 28, 30, 32, 34, 37, 53, 169, 173], "valve1": [26, 28, 30, 32, 34, 53, 173], "valve3": 173, "valve_opening_tim": 173, "valve_to_open": 173, "vaol": 152, "vari": [153, 175], "variabl": [28, 81, 83, 89, 91, 93, 99, 132, 137, 149, 150, 169, 173], "variat": 175, "variou": [152, 155, 162, 170], "vc4": 153, "ven": 151, "venv": 153, "veri": [149, 150, 155, 162], "verifi": [167, 168, 170, 172], "version": [26, 28, 30, 32, 34, 123, 132, 134, 137, 151, 152, 155, 162, 173], "via": [123, 132, 134, 137, 149, 150, 155, 162, 173], "video": [153, 155, 162, 169, 170], "view": [151, 155, 162, 169, 170, 181], "view_detect": 175, "viewer": 159, "villag": [149, 150, 151, 162, 164, 165, 167, 168, 169, 170, 173, 179], "village_project": 173, "virtual": [110, 132], "visual": [169, 173, 175], "volum": [169, 173], "wa": [28, 170, 173], "wai": [149, 150, 159], "wait": [149, 150, 170, 173, 180], "wait_exit": 180, "wake": [149, 150, 170], "want": [149, 150, 153, 173], "warn": [149, 150, 169, 170], "watch": 170, "water": [149, 150, 152, 169, 170, 173, 176], "water_calibr": [169, 173], "wayland": 153, "we": [149, 150, 151, 155, 159, 162, 164, 165, 169, 173, 175, 179], "web": 153, "webpag": 159, "week": [149, 150, 176], "weekend": [149, 150], "weigh": [170, 181], "weight": [149, 150, 153, 155, 162, 169, 170, 172, 181], "welcom": [132, 134], "welfar": [155, 162, 169], "well": [149, 150, 157, 169], "were": [123, 134, 137, 149, 150, 165, 170, 173], "what": [149, 150, 152], "whatev": 173, "when": [16, 17, 26, 28, 30, 32, 34, 123, 132, 134, 137, 149, 150, 152, 153, 169, 173, 175, 176], "whenc": [112, 114], "whenev": [153, 170], "where": [123, 132, 134, 137, 152, 153, 155, 162, 169, 170, 173, 175, 181], "whether": [28, 112, 114, 132, 137, 149, 150, 170, 175, 180], "which": [112, 114, 132, 134, 149, 150, 155, 162, 169, 170, 173, 179, 180], "while": [26, 28, 30, 32, 34, 137, 149, 150, 155, 162, 175, 180], "white": [152, 155, 162, 175], "whole": [132, 134, 155, 162], "whose": [99, 123, 132, 134, 137, 149, 150], "why": [149, 150], "wi": 153, "wide": [152, 153, 155, 162], "window": [159, 179], "wire": [26, 28, 30, 32, 34, 37, 152, 159], "wire1": 50, "wire2": 50, "wireless": [149, 150], "within": [149, 150, 169, 173, 175], "without": [99, 149, 150, 152, 169, 170, 172], "won": 132, "work": [149, 150, 153, 167, 168, 173, 176], "workspace_path": [26, 28, 30, 32, 34], "would": [149, 150, 173], "wrap": [155, 162], "writabl": [112, 114], "write": [26, 30, 32, 34, 110, 112, 114, 160], "write_to_modul": 110, "writelin": [112, 114], "written": [112, 114], "wrong": [170, 173], "x": [110, 149, 150, 152], "x1": 152, "x11": 153, "x2": 152, "x20": 152, "x3": 152, "x6": 152, "x7": 152, "x8": 152, "y": [147, 151, 153, 167, 168], "ye": [149, 150, 153], "yet": [132, 149, 150, 155, 162], "you": [1, 123, 132, 134, 137, 149, 150, 151, 152, 155, 159, 162, 164, 165, 167, 168, 169, 170, 173, 176, 179, 181], "your": [1, 132, 149, 150, 151, 153, 155, 159, 160, 162, 179, 181], "z": 110, "zero": [123, 132, 134, 137], "zone": 175}, "titles": ["classes", "change_hour_run", "ChangeHourRun", "enums", "Actions", "Active", "AreaActive", "Color", "Cycle", "DataTable", "Info", "Save", "ScreenActive", "State", "SuperEnum", "settings_class", "Setting", "Settings", "training", "Settings", "Training", "village.classes.training.TrainingError", "devices", "gui", "pybpodapi", "bpod", "Bpod", "bpod_base", "BpodBase", "bpod_com_protocol", "BpodCOMProtocol", "bpod_com_protocol_modules", "BpodCOMProtocolModules", "bpod_io", "BpodIO", "hardware", "channels", "ChannelName", "ChannelType", "Channels", "EventsPositions", "events", "base_eventname", "BaseEventName", "bpod_events", "EventName", "hardware", "Hardware", "input_channels", "bpod_input_channels", "InputName", "output_channels", "bpod_output_channels", "OutputChannel", "non_blockingsocketreceive", "NonBlockingSocketReceive", "village.pybpodapi.bpod.non_blockingsocketreceive.UnexpectedEndOfStream", "non_blockingstreamreader", "NonBlockingStreamReader", "village.pybpodapi.bpod.non_blockingstreamreader.UnexpectedEndOfStream", "settings", "bpod_modules", "bpod_module", "BpodModule", "bpod_modules", "BpodModules", "com", "arcom", "ArCOM", "ArduinoTypes", "DataType", "messaging", "base_message", "BaseMessage", "debug", "DebugMessage", "end_trial", "EndTrial", "error", "ErrorMessage", "event_occurrence", "EventOccurrence", "event_resume", "EventResume", "parser", "MessageParser", "session_info", "SessionInfo", "softcode_occurrence", "SoftcodeOccurrence", "state_occurrence", "StateOccurrence", "state_transition", "StateTransition", "stderr", "StderrMessage", "stdout", "StdoutMessage", "trial", "Trial", "untagged_message", "UntaggedMessage", "value", "ValueMessage", "warning", "WarningMessage", "protocol", "recv_msg_headers", "ReceiveMessageHeader", "send_msg_headers", "SendMessageHeader", "stderr_buffer", "StderrBuffer", "stdout_buffer", "StdoutBuffer", "exceptions", "bpod_error", "village.pybpodapi.exceptions.bpod_error.BpodErrorException", "protocol", "session", "Session", "StreamsWrapper", "state_machine", "StateMachine", "conditions", "Conditions", "global_counters", "GlobalCounters", "global_timers", "GlobalTimers", "state_machine_base", "village.pybpodapi.state_machine.state_machine_base.SMAError", "StateMachineBase", "state_machine_builder", "StateMachineBuilder", "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilderError", "state_machine_runner", "StateMachineRunner", "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunnerError", "utils", "csv", "Reader", "Writer", "date_parser", "parse", "screen", "behavior_window", "BehaviorWindow", "API", "&lt;no title&gt;", "FAQ", "Assembly Instructions", "List of Parts", "Software Installation", "How to Build It", "What Is The Training Village?", "Schedule Backups", "Hardware Connections", "Send Heartbeat Signals to a Remote Device", "Configure Remote Access", "Create a Telegram Bot", "Initial Configuration", "How Does It Work?", "System ISO Image", "Code Repository", "3D Printing Files", "Resources", "Temperature or Weight Sensor Connection Error", "Troubleshooting", "GUI Overview", "Receive and Respond to Telegram Alarms", "Animal Procedures", "Calibrate and Test Corridor Components", "Create a Training Protocol", "Saved Data", "Calibrate and Test Animal Detection", "Maintenance", "Create Real-Time Plots", "Initial Settings", "Getting Started", "System State Machine", "Create New Subjects", "Test a Training Protocol", "Use an Existing Training Protocol", "User Guide"], "titleterms": {"": 180, "3d": [152, 165], "A": 180, "In": 180, "It": [154, 155, 162, 179], "The": [155, 162, 173, 180], "access": [153, 159], "action": 4, "activ": 5, "after": 170, "after_tri": 173, "alarm": [160, 170], "alia": 153, "aluminium": 152, "an": [153, 160, 180, 183], "anim": [171, 175, 180], "api": 148, "arcom": [67, 68], "arduinotyp": 69, "areaact": 6, "assembli": 151, "b": 180, "backup": 156, "base_eventnam": 42, "base_messag": 72, "baseeventnam": 43, "basemessag": 73, "befor": 180, "behavior": [152, 155, 162, 175], "behavior_window": 146, "behaviorwindow": 147, "biweekli": 176, "bot": 160, "both": 180, "box": [152, 155, 162, 175, 180], "bpod": [25, 26, 56, 59, 152], "bpod_bas": 27, "bpod_com_protocol": 29, "bpod_com_protocol_modul": 31, "bpod_error": [116, 117], "bpod_ev": 44, "bpod_input_channel": 49, "bpod_io": 33, "bpod_modul": [61, 62, 64], "bpod_output_channel": 52, "bpodbas": 28, "bpodcomprotocol": 30, "bpodcomprotocolmodul": 32, "bpoderrorexcept": 117, "bpodio": 34, "bpodmodul": [63, 65], "build": [154, 179], "cabl": 165, "cage": 165, "calibr": [172, 175], "cam": 152, "camera": 165, "case": 180, "chang": 153, "change_hour_run": 1, "changehourrun": 2, "channel": [36, 39], "channelnam": 37, "channeltyp": 38, "check": [160, 170], "class": [0, 21, 148], "close": 173, "cnc": 152, "code": [164, 173], "color": 7, "com": 66, "commun": 153, "compon": 172, "condit": [124, 125], "configur": [159, 161], "connect": [157, 167, 168], "connector": 165, "consist": 153, "control": [155, 162], "corridor": [155, 162, 165, 172, 175], "creat": [153, 160, 173, 177, 181], "create_tri": 173, "csv": 140, "custom": 173, "cycl": [8, 180], "dai": 170, "daili": 176, "data": [169, 174], "datat": 9, "datatyp": 70, "date_pars": 143, "debug": 74, "debugmessag": 75, "default_training_set": 173, "detect": [170, 175], "devic": [22, 148, 153, 158], "doe": [155, 162], "door": 165, "electron": 152, "end_trial": 76, "endtrial": 77, "enum": 3, "environ": 153, "error": [78, 167, 168], "errormessag": 79, "event": 41, "event_occurr": 80, "event_resum": 82, "eventnam": 45, "eventoccurr": 81, "eventresum": 83, "eventsposit": 40, "everi": 170, "exampl": 173, "except": [115, 117], "exist": [160, 183], "extrus": 152, "faq": 150, "file": 165, "finish": 170, "first": 153, "followthelight": 173, "get": 179, "global_count": 126, "global_tim": 128, "globalcount": 127, "globaltim": 129, "gui": [23, 148, 169], "gui_tab": 173, "guid": 184, "hardwar": [35, 46, 47, 153, 157], "hat": 152, "heartbeat": 158, "homecag": 152, "hour": 170, "hous": [155, 162], "how": [154, 155, 162], "i": [155, 170], "i2c": 153, "imag": 163, "info": 10, "initi": [161, 178], "input_channel": 48, "inputnam": 50, "instal": 153, "instruct": 151, "interrog": 170, "iso": 163, "launch": [153, 179], "leav": 180, "librari": 153, "list": 152, "machin": [152, 180], "main": 169, "mainten": 176, "make": 160, "maximum": 180, "messag": 71, "messagepars": 85, "method": 173, "monitor": 169, "monthli": 176, "mount": 165, "name": 153, "need": 153, "new": 181, "non_blockingsocketrec": [54, 56], "non_blockingstreamread": [57, 59], "nonblockingsocketrec": 55, "nonblockingstreamread": 58, "normal": 180, "o": 153, "occasion": 176, "open": [155, 162], "option": [173, 180], "organ": [165, 173], "other": 148, "output_channel": 51, "outputchannel": 53, "overview": 169, "pars": 144, "parser": 84, "part": 152, "perform": 170, "pi": 153, "pin": 153, "pip": 153, "plot": 177, "port": 152, "prefer": 153, "preliminari": 179, "prepar": 170, "print": [152, 165], "procedur": 171, "project": 173, "protocol": [106, 118, 173, 182, 183], "pybpodapi": [24, 56, 59, 117, 131, 135, 138, 148], "python": 153, "raspberri": [152, 153], "reader": 141, "real": 177, "receiv": 170, "receivemessagehead": 108, "recv_msg_head": 107, "remot": [158, 159], "repositori": 164, "resourc": 166, "respond": 170, "rfid": 152, "rule": 153, "run": [153, 170], "save": [11, 174], "schedul": 156, "screen": [145, 152, 153], "screenact": 12, "send": 158, "send_msg_head": 109, "sendmessagehead": 110, "sensor": [167, 168], "serial": 153, "servo": 153, "session": [119, 120, 180], "session_info": 86, "sessioninfo": 87, "set": [16, 17, 19, 60, 153, 169, 178], "settings_class": 15, "signal": 158, "smaerror": 131, "softcode_occurr": 88, "softcodeoccurr": 89, "softwar": 153, "sound": 152, "sourc": [155, 162], "stai": 180, "start": [173, 179], "state": [13, 180], "state_machin": [122, 131, 135, 138], "state_machine_bas": [130, 131], "state_machine_build": [133, 135], "state_machine_runn": [136, 138], "state_occurr": 90, "state_transit": 92, "statemachin": 123, "statemachinebas": 132, "statemachinebuild": 134, "statemachinebuildererror": 135, "statemachinerunn": 137, "statemachinerunnererror": 138, "stateoccurr": 91, "statetransit": 93, "stderr": 94, "stderr_buff": 111, "stderrbuff": 112, "stderrmessag": 95, "stdout": 96, "stdout_buff": 113, "stdoutbuff": 114, "stdoutmessag": 97, "step": 179, "streamswrapp": 121, "structur": 173, "subject": [170, 180, 181], "superenum": 14, "system": [153, 155, 162, 163, 165, 170, 179, 180], "task": [169, 170, 173, 180], "telegram": [160, 170], "temperatur": [167, 168], "test": [172, 175, 182], "time": [153, 177, 180], "token": 160, "train": [18, 20, 21, 152, 153, 155, 173, 182, 183], "trainingerror": 21, "trial": [98, 99], "trigger": 160, "troubleshoot": 168, "tube": [152, 165], "twice": 170, "uart": 153, "udev": 153, "unexpectedendofstream": [56, 59], "untagged_messag": 100, "untaggedmessag": 101, "until": 180, "updat": 153, "update_training_set": 173, "us": [153, 183], "usag": [155, 162], "usb": 153, "user": 184, "util": 139, "valu": 102, "valuemessag": 103, "via": 153, "villag": [21, 56, 59, 117, 131, 135, 138, 152, 153, 155], "warn": 104, "warningmessag": 105, "weekli": 176, "weight": [167, 168], "what": [153, 155], "when": 170, "while": 170, "work": [155, 162], "writer": 142, "you": 153, "your": 173, "yourself": 179}})