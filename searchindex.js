Search.setIndex({"alltitles": {"3D-Printed Parts": [[184, "d-printed-parts"], [186, "d-printed-parts"]], "API": [[180, null]], "Accessing Pins via Hardware (for Servos) and Using UART Pin for Communication": [[185, "accessing-pins-via-hardware-for-servos-and-using-uart-pin-for-communication"], [186, "accessing-pins-via-hardware-for-servos-and-using-uart-pin-for-communication"]], "Actions": [[5, null]], "Active": [[6, null]], "Alarms": [[197, "alarms"], [205, "alarms"]], "Aluminium Extrusions and Tubes": [[184, "aluminium-extrusions-and-tubes"], [186, "aluminium-extrusions-and-tubes"]], "Animal Entry and Exit Logic": [[187, "animal-entry-and-exit-logic"], [190, null]], "Animal Procedures": [[198, null], [205, "animal-procedures"]], "ArCOM": [[94, null]], "ArduinoTypes": [[95, null]], "AreaActive": [[7, null]], "Assembly Instructions": [[183, null], [186, "assembly-instructions"]], "BaseEventName": [[69, null]], "BaseMessage": [[99, null]], "BehaviourWindow": [[175, null]], "Biweekly": [[200, "biweekly"], [205, "biweekly"]], "Bpod": [[52, null]], "BpodBase": [[54, null]], "BpodCOMProtocol": [[56, null]], "BpodCOMProtocolModules": [[58, null]], "BpodIO": [[60, null]], "BpodModule": [[89, null]], "BpodModules": [[91, null]], "CNC Machined Parts": [[184, "cnc-machined-parts"], [186, "cnc-machined-parts"]], "CameraProtocol": [[16, null]], "Changing Preferences": [[185, "changing-preferences"], [186, "changing-preferences"]], "ChannelName": [[63, null]], "ChannelType": [[64, null]], "Channels": [[65, null]], "Check the token of an existing bot": [[204, "check-the-token-of-an-existing-bot"], [205, "check-the-token-of-an-existing-bot"]], "Classes": [[180, "classes"]], "Code": [[201, "code"], [205, "code"]], "Collection": [[3, null]], "Color": [[8, null]], "Conditions": [[151, null]], "Configure remote access": [[202, null], [205, "configure-remote-access"]], "Create a Telegram Bot": [[204, null], [205, "create-a-telegram-bot"]], "Creating a Python Environment and Installing pip Libraries": [[185, "creating-a-python-environment-and-installing-pip-libraries"], [186, "creating-a-python-environment-and-installing-pip-libraries"]], "Cycle": [[9, null]], "Daily": [[200, "daily"], [205, "daily"]], "Data Collection": [[182, null]], "DataTable": [[10, null]], "DataType": [[96, null]], "DebugMessage": [[101, null]], "Devices": [[180, "devices"]], "Electronic Components": [[184, "electronic-components"], [186, "electronic-components"]], "EndTrial": [[103, null]], "ErrorMessage": [[105, null]], "Event": [[28, null]], "EventName": [[71, null]], "EventOccurrence": [[107, null]], "EventProtocol": [[17, null]], "EventResume": [[109, null]], "EventsPositions": [[66, null]], "Example": [[179, null]], "First Boot Configuration": [[196, "first-boot-configuration"], [205, "first-boot-configuration"]], "Getting Started": [[199, null], [205, "getting-started"]], "GlobalCounters": [[153, null]], "GlobalTimers": [[155, null]], "Gui": [[180, "gui"]], "Hardware": [[73, null]], "How Does It Work?": [[187, "how-does-it-work"], [191, null]], "How to Build the Training Village": [[186, null]], "I2C Communication": [[185, "i2c-communication"], [186, "i2c-communication"]], "Info": [[11, null]], "InputName": [[76, null]], "Install village": [[185, "install-village"], [186, "install-village"]], "Installing Needed Libraries": [[185, "installing-needed-libraries"], [186, "installing-needed-libraries"]], "Interrogate the system": [[197, "interrogate-the-system"], [205, "interrogate-the-system"]], "Launch Raspberry Pi OS for the First Time": [[185, "launch-raspberry-pi-os-for-the-first-time"], [186, "launch-raspberry-pi-os-for-the-first-time"]], "List of Parts": [[184, null], [186, "list-of-parts"]], "Log": [[49, null]], "Maintenance": [[200, null], [205, "maintenance"]], "Make the bot triggers the alarms": [[204, "make-the-bot-triggers-the-alarms"], [205, "make-the-bot-triggers-the-alarms"]], "MessageParser": [[111, null]], "Monthly": [[200, "monthly"], [205, "monthly"]], "NonBlockingSocketReceive": [[81, null]], "NonBlockingStreamReader": [[84, null]], "Occasionally": [[200, "occasionally"], [205, "occasionally"]], "Open Source": [[187, "open-source"], [192, null]], "Other": [[180, "other"]], "Output": [[29, null]], "OutputChannel": [[79, null]], "Project Structure": [[201, null], [205, "project-structure"]], "PyBpod": [[38, null]], "PyBpodProtocol": [[18, null]], "Pybpodapi": [[180, "pybpodapi"]], "RTPlots": [[172, null]], "Reader": [[167, null]], "ReceiveMessageHeader": [[134, null]], "Receiving and responding to Telegram Alarms": [[197, null], [205, "receiving-and-responding-to-telegram-alarms"]], "Resources": [[195, null]], "Scale": [[42, null]], "ScaleProtocol": [[19, null]], "Screen Settings": [[185, "screen-settings"], [186, "screen-settings"]], "ScreenActive": [[12, null]], "SendMessageHeader": [[136, null]], "Session": [[146, null]], "SessionInfo": [[113, null]], "Setting": [[23, null]], "Settings": [[24, null], [33, null]], "Softcode": [[39, null]], "SoftcodeOccurrence": [[115, null]], "Software Installation": [[185, null], [186, "software-installation"]], "Software Launch and Configuration": [[196, "software-launch-and-configuration"], [205, "software-launch-and-configuration"]], "State": [[13, null]], "StateMachine": [[149, null]], "StateMachineBase": [[158, null]], "StateMachineBuilder": [[160, null]], "StateMachineRunner": [[163, null]], "StateOccurrence": [[117, null]], "StateTransition": [[119, null]], "StderrBuffer": [[138, null]], "StderrMessage": [[121, null]], "StdoutBuffer": [[140, null]], "StdoutMessage": [[123, null]], "StreamsWrapper": [[147, null]], "Subject": [[26, null]], "SuperEnum": [[14, null]], "System State Machine": [[203, null], [205, "system-state-machine"]], "Task": [[30, null]], "Tasks": [[201, "tasks"], [205, "tasks"]], "TelegramBotProtocol": [[20, null]], "TempSensor": [[45, null]], "TempSensorProtocol": [[21, null]], "The Controller": [[187, "the-controller"], [188, null]], "The Corridor": [[187, "the-corridor"], [189, null]], "TimeUtils": [[177, null]], "Training": [[34, null]], "Trial": [[125, null]], "Udev Rules for Consistent USB Device Naming": [[185, "udev-rules-for-consistent-usb-device-naming"], [186, "udev-rules-for-consistent-usb-device-naming"]], "UntaggedMessage": [[127, null]], "Updating the System": [[185, "updating-the-system"], [186, "updating-the-system"]], "User Guide": [[205, null]], "Using the GUI": [[196, null], [205, "using-the-gui"]], "ValueMessage": [[129, null]], "WarningMessage": [[131, null]], "Weekly": [[200, "weekly"], [205, "weekly"]], "What Is The Training Village?": [[187, null]], "What You Need": [[185, "what-you-need"], [186, "what-you-need"]], "Writer": [[168, null]], "arcom": [[93, null]], "base_eventname": [[68, null]], "base_message": [[98, null]], "behaviour_window": [[174, null]], "bpod": [[37, null], [51, null]], "bpod_base": [[53, null]], "bpod_com_protocol": [[55, null]], "bpod_com_protocol_modules": [[57, null]], "bpod_error": [[142, null]], "bpod_events": [[70, null]], "bpod_input_channels": [[75, null]], "bpod_io": [[59, null]], "bpod_module": [[88, null]], "bpod_modules": [[87, null], [90, null]], "bpod_output_channels": [[78, null]], "channels": [[62, null]], "classes": [[1, null]], "collection": [[2, null]], "com": [[92, null]], "conditions": [[150, null]], "csv": [[166, null]], "date_parser": [[169, null]], "debug": [[100, null]], "devices": [[36, null]], "end_trial": [[102, null]], "enums": [[4, null]], "error": [[104, null]], "event_occurrence": [[106, null]], "event_resume": [[108, null]], "events": [[67, null]], "exceptions": [[141, null]], "get_bpod": [[40, null]], "get_scale": [[43, null]], "get_temp_sensor": [[46, null]], "global_counters": [[152, null]], "global_timers": [[154, null]], "gui": [[47, null]], "hardware": [[61, null], [72, null]], "input_channels": [[74, null]], "log": [[48, null]], "messaging": [[97, null]], "non_blockingsocketreceive": [[80, null]], "non_blockingstreamreader": [[83, null]], "output_channels": [[77, null]], "parse": [[170, null]], "parser": [[110, null]], "protocol": [[132, null], [144, null]], "protocols": [[15, null]], "pybpodapi": [[50, null]], "recv_msg_headers": [[133, null]], "rt_plots": [[171, null]], "scale": [[41, null]], "screen": [[173, null]], "send_msg_headers": [[135, null]], "session": [[145, null]], "session_info": [[112, null]], "settings": [[86, null]], "settings_class": [[22, null]], "softcode_occurrence": [[114, null]], "state_machine": [[148, null]], "state_machine_base": [[156, null]], "state_machine_builder": [[159, null]], "state_machine_runner": [[162, null]], "state_occurrence": [[116, null]], "state_transition": [[118, null]], "stderr": [[120, null]], "stderr_buffer": [[137, null]], "stdout": [[122, null]], "stdout_buffer": [[139, null]], "subject": [[25, null]], "task": [[27, null]], "temp_sensor": [[44, null]], "time_utils": [[176, null]], "training": [[32, null]], "trial": [[124, null]], "untagged_message": [[126, null]], "utils": [[165, null]], "value": [[128, null]], "video": [[178, null]], "village.classes.task.TaskError": [[31, null]], "village.classes.training.TrainingError": [[35, null]], "village.pybpodapi.bpod.non_blockingsocketreceive.UnexpectedEndOfStream": [[82, null]], "village.pybpodapi.bpod.non_blockingstreamreader.UnexpectedEndOfStream": [[85, null]], "village.pybpodapi.exceptions.bpod_error.BpodErrorException": [[143, null]], "village.pybpodapi.state_machine.state_machine_base.SMAError": [[157, null]], "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilderError": [[161, null]], "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunnerError": [[164, null]], "warning": [[130, null]]}, "docnames": ["TODO-LINK", "api_generated/village.classes", "api_generated/village.classes.collection", "api_generated/village.classes.collection.Collection", "api_generated/village.classes.enums", "api_generated/village.classes.enums.Actions", "api_generated/village.classes.enums.Active", "api_generated/village.classes.enums.AreaActive", "api_generated/village.classes.enums.Color", "api_generated/village.classes.enums.Cycle", "api_generated/village.classes.enums.DataTable", "api_generated/village.classes.enums.Info", "api_generated/village.classes.enums.ScreenActive", "api_generated/village.classes.enums.State", "api_generated/village.classes.enums.SuperEnum", "api_generated/village.classes.protocols", "api_generated/village.classes.protocols.CameraProtocol", "api_generated/village.classes.protocols.EventProtocol", "api_generated/village.classes.protocols.PyBpodProtocol", "api_generated/village.classes.protocols.ScaleProtocol", "api_generated/village.classes.protocols.TelegramBotProtocol", "api_generated/village.classes.protocols.TempSensorProtocol", "api_generated/village.classes.settings_class", "api_generated/village.classes.settings_class.Setting", "api_generated/village.classes.settings_class.Settings", "api_generated/village.classes.subject", "api_generated/village.classes.subject.Subject", "api_generated/village.classes.task", "api_generated/village.classes.task.Event", "api_generated/village.classes.task.Output", "api_generated/village.classes.task.Task", "api_generated/village.classes.task.TaskError", "api_generated/village.classes.training", "api_generated/village.classes.training.Settings", "api_generated/village.classes.training.Training", "api_generated/village.classes.training.TrainingError", "api_generated/village.devices", "api_generated/village.devices.bpod", "api_generated/village.devices.bpod.PyBpod", "api_generated/village.devices.bpod.Softcode", "api_generated/village.devices.bpod.get_bpod", "api_generated/village.devices.scale", "api_generated/village.devices.scale.Scale", "api_generated/village.devices.scale.get_scale", "api_generated/village.devices.temp_sensor", "api_generated/village.devices.temp_sensor.TempSensor", "api_generated/village.devices.temp_sensor.get_temp_sensor", "api_generated/village.gui", "api_generated/village.log", "api_generated/village.log.Log", "api_generated/village.pybpodapi", "api_generated/village.pybpodapi.bpod", "api_generated/village.pybpodapi.bpod.Bpod", "api_generated/village.pybpodapi.bpod.bpod_base", "api_generated/village.pybpodapi.bpod.bpod_base.BpodBase", "api_generated/village.pybpodapi.bpod.bpod_com_protocol", "api_generated/village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol", "api_generated/village.pybpodapi.bpod.bpod_com_protocol_modules", "api_generated/village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules", "api_generated/village.pybpodapi.bpod.bpod_io", "api_generated/village.pybpodapi.bpod.bpod_io.BpodIO", "api_generated/village.pybpodapi.bpod.hardware", "api_generated/village.pybpodapi.bpod.hardware.channels", "api_generated/village.pybpodapi.bpod.hardware.channels.ChannelName", "api_generated/village.pybpodapi.bpod.hardware.channels.ChannelType", "api_generated/village.pybpodapi.bpod.hardware.channels.Channels", "api_generated/village.pybpodapi.bpod.hardware.channels.EventsPositions", "api_generated/village.pybpodapi.bpod.hardware.events", "api_generated/village.pybpodapi.bpod.hardware.events.base_eventname", "api_generated/village.pybpodapi.bpod.hardware.events.base_eventname.BaseEventName", "api_generated/village.pybpodapi.bpod.hardware.events.bpod_events", "api_generated/village.pybpodapi.bpod.hardware.events.bpod_events.EventName", "api_generated/village.pybpodapi.bpod.hardware.hardware", "api_generated/village.pybpodapi.bpod.hardware.hardware.Hardware", "api_generated/village.pybpodapi.bpod.hardware.input_channels", "api_generated/village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels", "api_generated/village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName", "api_generated/village.pybpodapi.bpod.hardware.output_channels", "api_generated/village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels", "api_generated/village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.OutputChannel", "api_generated/village.pybpodapi.bpod.non_blockingsocketreceive", "api_generated/village.pybpodapi.bpod.non_blockingsocketreceive.NonBlockingSocketReceive", "api_generated/village.pybpodapi.bpod.non_blockingsocketreceive.UnexpectedEndOfStream", "api_generated/village.pybpodapi.bpod.non_blockingstreamreader", "api_generated/village.pybpodapi.bpod.non_blockingstreamreader.NonBlockingStreamReader", "api_generated/village.pybpodapi.bpod.non_blockingstreamreader.UnexpectedEndOfStream", "api_generated/village.pybpodapi.bpod.settings", "api_generated/village.pybpodapi.bpod_modules", "api_generated/village.pybpodapi.bpod_modules.bpod_module", "api_generated/village.pybpodapi.bpod_modules.bpod_module.BpodModule", "api_generated/village.pybpodapi.bpod_modules.bpod_modules", "api_generated/village.pybpodapi.bpod_modules.bpod_modules.BpodModules", "api_generated/village.pybpodapi.com", "api_generated/village.pybpodapi.com.arcom", "api_generated/village.pybpodapi.com.arcom.ArCOM", "api_generated/village.pybpodapi.com.arcom.ArduinoTypes", "api_generated/village.pybpodapi.com.arcom.DataType", "api_generated/village.pybpodapi.com.messaging", "api_generated/village.pybpodapi.com.messaging.base_message", "api_generated/village.pybpodapi.com.messaging.base_message.BaseMessage", "api_generated/village.pybpodapi.com.messaging.debug", "api_generated/village.pybpodapi.com.messaging.debug.DebugMessage", "api_generated/village.pybpodapi.com.messaging.end_trial", "api_generated/village.pybpodapi.com.messaging.end_trial.EndTrial", "api_generated/village.pybpodapi.com.messaging.error", "api_generated/village.pybpodapi.com.messaging.error.ErrorMessage", "api_generated/village.pybpodapi.com.messaging.event_occurrence", "api_generated/village.pybpodapi.com.messaging.event_occurrence.EventOccurrence", "api_generated/village.pybpodapi.com.messaging.event_resume", "api_generated/village.pybpodapi.com.messaging.event_resume.EventResume", "api_generated/village.pybpodapi.com.messaging.parser", "api_generated/village.pybpodapi.com.messaging.parser.MessageParser", "api_generated/village.pybpodapi.com.messaging.session_info", "api_generated/village.pybpodapi.com.messaging.session_info.SessionInfo", "api_generated/village.pybpodapi.com.messaging.softcode_occurrence", "api_generated/village.pybpodapi.com.messaging.softcode_occurrence.SoftcodeOccurrence", "api_generated/village.pybpodapi.com.messaging.state_occurrence", "api_generated/village.pybpodapi.com.messaging.state_occurrence.StateOccurrence", "api_generated/village.pybpodapi.com.messaging.state_transition", "api_generated/village.pybpodapi.com.messaging.state_transition.StateTransition", "api_generated/village.pybpodapi.com.messaging.stderr", "api_generated/village.pybpodapi.com.messaging.stderr.StderrMessage", "api_generated/village.pybpodapi.com.messaging.stdout", "api_generated/village.pybpodapi.com.messaging.stdout.StdoutMessage", "api_generated/village.pybpodapi.com.messaging.trial", "api_generated/village.pybpodapi.com.messaging.trial.Trial", "api_generated/village.pybpodapi.com.messaging.untagged_message", "api_generated/village.pybpodapi.com.messaging.untagged_message.UntaggedMessage", "api_generated/village.pybpodapi.com.messaging.value", "api_generated/village.pybpodapi.com.messaging.value.ValueMessage", "api_generated/village.pybpodapi.com.messaging.warning", "api_generated/village.pybpodapi.com.messaging.warning.WarningMessage", "api_generated/village.pybpodapi.com.protocol", "api_generated/village.pybpodapi.com.protocol.recv_msg_headers", "api_generated/village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader", "api_generated/village.pybpodapi.com.protocol.send_msg_headers", "api_generated/village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader", "api_generated/village.pybpodapi.com.stderr_buffer", "api_generated/village.pybpodapi.com.stderr_buffer.StderrBuffer", "api_generated/village.pybpodapi.com.stdout_buffer", "api_generated/village.pybpodapi.com.stdout_buffer.StdoutBuffer", "api_generated/village.pybpodapi.exceptions", "api_generated/village.pybpodapi.exceptions.bpod_error", "api_generated/village.pybpodapi.exceptions.bpod_error.BpodErrorException", "api_generated/village.pybpodapi.protocol", "api_generated/village.pybpodapi.session", "api_generated/village.pybpodapi.session.Session", "api_generated/village.pybpodapi.session.StreamsWrapper", "api_generated/village.pybpodapi.state_machine", "api_generated/village.pybpodapi.state_machine.StateMachine", "api_generated/village.pybpodapi.state_machine.conditions", "api_generated/village.pybpodapi.state_machine.conditions.Conditions", "api_generated/village.pybpodapi.state_machine.global_counters", "api_generated/village.pybpodapi.state_machine.global_counters.GlobalCounters", "api_generated/village.pybpodapi.state_machine.global_timers", "api_generated/village.pybpodapi.state_machine.global_timers.GlobalTimers", "api_generated/village.pybpodapi.state_machine.state_machine_base", "api_generated/village.pybpodapi.state_machine.state_machine_base.SMAError", "api_generated/village.pybpodapi.state_machine.state_machine_base.StateMachineBase", "api_generated/village.pybpodapi.state_machine.state_machine_builder", "api_generated/village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder", "api_generated/village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilderError", "api_generated/village.pybpodapi.state_machine.state_machine_runner", "api_generated/village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner", "api_generated/village.pybpodapi.state_machine.state_machine_runner.StateMachineRunnerError", "api_generated/village.pybpodapi.utils", "api_generated/village.pybpodapi.utils.csv", "api_generated/village.pybpodapi.utils.csv.Reader", "api_generated/village.pybpodapi.utils.csv.Writer", "api_generated/village.pybpodapi.utils.date_parser", "api_generated/village.pybpodapi.utils.date_parser.parse", "api_generated/village.rt_plots", "api_generated/village.rt_plots.RTPlots", "api_generated/village.screen", "api_generated/village.screen.behaviour_window", "api_generated/village.screen.behaviour_window.BehaviourWindow", "api_generated/village.time_utils", "api_generated/village.time_utils.TimeUtils", "api_generated/village.video", "api_generated/village.video.Example", "api_index", "data_collection/data_collection", "data_collection_index", "how_to_build/assembly_instructions", "how_to_build/list_of_parts", "how_to_build/software_installation", "how_to_build_index", "index", "main/controller", "main/corridor", "main/entry", "main/how_does", "main/open_source", "main/what_is", "resources/resources", "resources_index", "user_guide/GUI", "user_guide/alarms", "user_guide/animal_procedures", "user_guide/getting_started", "user_guide/maintenance", "user_guide/project_structure", "user_guide/remote", "user_guide/state_machine", "user_guide/telegram", "user_guide_index"], "envversion": {"nbsphinx": 4, "sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1}, "filenames": ["TODO-LINK.md", "api_generated/village.classes.rst", "api_generated/village.classes.collection.rst", "api_generated/village.classes.collection.Collection.rst", "api_generated/village.classes.enums.rst", "api_generated/village.classes.enums.Actions.rst", "api_generated/village.classes.enums.Active.rst", "api_generated/village.classes.enums.AreaActive.rst", "api_generated/village.classes.enums.Color.rst", "api_generated/village.classes.enums.Cycle.rst", "api_generated/village.classes.enums.DataTable.rst", "api_generated/village.classes.enums.Info.rst", "api_generated/village.classes.enums.ScreenActive.rst", "api_generated/village.classes.enums.State.rst", "api_generated/village.classes.enums.SuperEnum.rst", "api_generated/village.classes.protocols.rst", "api_generated/village.classes.protocols.CameraProtocol.rst", "api_generated/village.classes.protocols.EventProtocol.rst", "api_generated/village.classes.protocols.PyBpodProtocol.rst", "api_generated/village.classes.protocols.ScaleProtocol.rst", "api_generated/village.classes.protocols.TelegramBotProtocol.rst", "api_generated/village.classes.protocols.TempSensorProtocol.rst", "api_generated/village.classes.settings_class.rst", "api_generated/village.classes.settings_class.Setting.rst", "api_generated/village.classes.settings_class.Settings.rst", "api_generated/village.classes.subject.rst", "api_generated/village.classes.subject.Subject.rst", "api_generated/village.classes.task.rst", "api_generated/village.classes.task.Event.rst", "api_generated/village.classes.task.Output.rst", "api_generated/village.classes.task.Task.rst", "api_generated/village.classes.task.TaskError.rst", "api_generated/village.classes.training.rst", "api_generated/village.classes.training.Settings.rst", "api_generated/village.classes.training.Training.rst", "api_generated/village.classes.training.TrainingError.rst", "api_generated/village.devices.rst", "api_generated/village.devices.bpod.rst", "api_generated/village.devices.bpod.PyBpod.rst", "api_generated/village.devices.bpod.Softcode.rst", "api_generated/village.devices.bpod.get_bpod.rst", "api_generated/village.devices.scale.rst", "api_generated/village.devices.scale.Scale.rst", "api_generated/village.devices.scale.get_scale.rst", "api_generated/village.devices.temp_sensor.rst", "api_generated/village.devices.temp_sensor.TempSensor.rst", "api_generated/village.devices.temp_sensor.get_temp_sensor.rst", "api_generated/village.gui.rst", "api_generated/village.log.rst", "api_generated/village.log.Log.rst", "api_generated/village.pybpodapi.rst", "api_generated/village.pybpodapi.bpod.rst", "api_generated/village.pybpodapi.bpod.Bpod.rst", "api_generated/village.pybpodapi.bpod.bpod_base.rst", "api_generated/village.pybpodapi.bpod.bpod_base.BpodBase.rst", "api_generated/village.pybpodapi.bpod.bpod_com_protocol.rst", "api_generated/village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.rst", "api_generated/village.pybpodapi.bpod.bpod_com_protocol_modules.rst", "api_generated/village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.rst", "api_generated/village.pybpodapi.bpod.bpod_io.rst", "api_generated/village.pybpodapi.bpod.bpod_io.BpodIO.rst", "api_generated/village.pybpodapi.bpod.hardware.rst", "api_generated/village.pybpodapi.bpod.hardware.channels.rst", "api_generated/village.pybpodapi.bpod.hardware.channels.ChannelName.rst", "api_generated/village.pybpodapi.bpod.hardware.channels.ChannelType.rst", "api_generated/village.pybpodapi.bpod.hardware.channels.Channels.rst", "api_generated/village.pybpodapi.bpod.hardware.channels.EventsPositions.rst", "api_generated/village.pybpodapi.bpod.hardware.events.rst", "api_generated/village.pybpodapi.bpod.hardware.events.base_eventname.rst", "api_generated/village.pybpodapi.bpod.hardware.events.base_eventname.BaseEventName.rst", "api_generated/village.pybpodapi.bpod.hardware.events.bpod_events.rst", "api_generated/village.pybpodapi.bpod.hardware.events.bpod_events.EventName.rst", "api_generated/village.pybpodapi.bpod.hardware.hardware.rst", "api_generated/village.pybpodapi.bpod.hardware.hardware.Hardware.rst", "api_generated/village.pybpodapi.bpod.hardware.input_channels.rst", "api_generated/village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.rst", "api_generated/village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.rst", "api_generated/village.pybpodapi.bpod.hardware.output_channels.rst", "api_generated/village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.rst", "api_generated/village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.OutputChannel.rst", "api_generated/village.pybpodapi.bpod.non_blockingsocketreceive.rst", "api_generated/village.pybpodapi.bpod.non_blockingsocketreceive.NonBlockingSocketReceive.rst", "api_generated/village.pybpodapi.bpod.non_blockingsocketreceive.UnexpectedEndOfStream.rst", "api_generated/village.pybpodapi.bpod.non_blockingstreamreader.rst", "api_generated/village.pybpodapi.bpod.non_blockingstreamreader.NonBlockingStreamReader.rst", "api_generated/village.pybpodapi.bpod.non_blockingstreamreader.UnexpectedEndOfStream.rst", "api_generated/village.pybpodapi.bpod.settings.rst", "api_generated/village.pybpodapi.bpod_modules.rst", "api_generated/village.pybpodapi.bpod_modules.bpod_module.rst", "api_generated/village.pybpodapi.bpod_modules.bpod_module.BpodModule.rst", "api_generated/village.pybpodapi.bpod_modules.bpod_modules.rst", "api_generated/village.pybpodapi.bpod_modules.bpod_modules.BpodModules.rst", "api_generated/village.pybpodapi.com.rst", "api_generated/village.pybpodapi.com.arcom.rst", "api_generated/village.pybpodapi.com.arcom.ArCOM.rst", "api_generated/village.pybpodapi.com.arcom.ArduinoTypes.rst", "api_generated/village.pybpodapi.com.arcom.DataType.rst", "api_generated/village.pybpodapi.com.messaging.rst", "api_generated/village.pybpodapi.com.messaging.base_message.rst", "api_generated/village.pybpodapi.com.messaging.base_message.BaseMessage.rst", "api_generated/village.pybpodapi.com.messaging.debug.rst", "api_generated/village.pybpodapi.com.messaging.debug.DebugMessage.rst", "api_generated/village.pybpodapi.com.messaging.end_trial.rst", "api_generated/village.pybpodapi.com.messaging.end_trial.EndTrial.rst", "api_generated/village.pybpodapi.com.messaging.error.rst", "api_generated/village.pybpodapi.com.messaging.error.ErrorMessage.rst", "api_generated/village.pybpodapi.com.messaging.event_occurrence.rst", "api_generated/village.pybpodapi.com.messaging.event_occurrence.EventOccurrence.rst", "api_generated/village.pybpodapi.com.messaging.event_resume.rst", "api_generated/village.pybpodapi.com.messaging.event_resume.EventResume.rst", "api_generated/village.pybpodapi.com.messaging.parser.rst", "api_generated/village.pybpodapi.com.messaging.parser.MessageParser.rst", "api_generated/village.pybpodapi.com.messaging.session_info.rst", "api_generated/village.pybpodapi.com.messaging.session_info.SessionInfo.rst", "api_generated/village.pybpodapi.com.messaging.softcode_occurrence.rst", "api_generated/village.pybpodapi.com.messaging.softcode_occurrence.SoftcodeOccurrence.rst", "api_generated/village.pybpodapi.com.messaging.state_occurrence.rst", "api_generated/village.pybpodapi.com.messaging.state_occurrence.StateOccurrence.rst", "api_generated/village.pybpodapi.com.messaging.state_transition.rst", "api_generated/village.pybpodapi.com.messaging.state_transition.StateTransition.rst", "api_generated/village.pybpodapi.com.messaging.stderr.rst", "api_generated/village.pybpodapi.com.messaging.stderr.StderrMessage.rst", "api_generated/village.pybpodapi.com.messaging.stdout.rst", "api_generated/village.pybpodapi.com.messaging.stdout.StdoutMessage.rst", "api_generated/village.pybpodapi.com.messaging.trial.rst", "api_generated/village.pybpodapi.com.messaging.trial.Trial.rst", "api_generated/village.pybpodapi.com.messaging.untagged_message.rst", "api_generated/village.pybpodapi.com.messaging.untagged_message.UntaggedMessage.rst", "api_generated/village.pybpodapi.com.messaging.value.rst", "api_generated/village.pybpodapi.com.messaging.value.ValueMessage.rst", "api_generated/village.pybpodapi.com.messaging.warning.rst", "api_generated/village.pybpodapi.com.messaging.warning.WarningMessage.rst", "api_generated/village.pybpodapi.com.protocol.rst", "api_generated/village.pybpodapi.com.protocol.recv_msg_headers.rst", "api_generated/village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader.rst", "api_generated/village.pybpodapi.com.protocol.send_msg_headers.rst", "api_generated/village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.rst", "api_generated/village.pybpodapi.com.stderr_buffer.rst", "api_generated/village.pybpodapi.com.stderr_buffer.StderrBuffer.rst", "api_generated/village.pybpodapi.com.stdout_buffer.rst", "api_generated/village.pybpodapi.com.stdout_buffer.StdoutBuffer.rst", "api_generated/village.pybpodapi.exceptions.rst", "api_generated/village.pybpodapi.exceptions.bpod_error.rst", "api_generated/village.pybpodapi.exceptions.bpod_error.BpodErrorException.rst", "api_generated/village.pybpodapi.protocol.rst", "api_generated/village.pybpodapi.session.rst", "api_generated/village.pybpodapi.session.Session.rst", "api_generated/village.pybpodapi.session.StreamsWrapper.rst", "api_generated/village.pybpodapi.state_machine.rst", "api_generated/village.pybpodapi.state_machine.StateMachine.rst", "api_generated/village.pybpodapi.state_machine.conditions.rst", "api_generated/village.pybpodapi.state_machine.conditions.Conditions.rst", "api_generated/village.pybpodapi.state_machine.global_counters.rst", "api_generated/village.pybpodapi.state_machine.global_counters.GlobalCounters.rst", "api_generated/village.pybpodapi.state_machine.global_timers.rst", "api_generated/village.pybpodapi.state_machine.global_timers.GlobalTimers.rst", "api_generated/village.pybpodapi.state_machine.state_machine_base.rst", "api_generated/village.pybpodapi.state_machine.state_machine_base.SMAError.rst", "api_generated/village.pybpodapi.state_machine.state_machine_base.StateMachineBase.rst", "api_generated/village.pybpodapi.state_machine.state_machine_builder.rst", "api_generated/village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder.rst", "api_generated/village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilderError.rst", "api_generated/village.pybpodapi.state_machine.state_machine_runner.rst", "api_generated/village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner.rst", "api_generated/village.pybpodapi.state_machine.state_machine_runner.StateMachineRunnerError.rst", "api_generated/village.pybpodapi.utils.rst", "api_generated/village.pybpodapi.utils.csv.rst", "api_generated/village.pybpodapi.utils.csv.Reader.rst", "api_generated/village.pybpodapi.utils.csv.Writer.rst", "api_generated/village.pybpodapi.utils.date_parser.rst", "api_generated/village.pybpodapi.utils.date_parser.parse.rst", "api_generated/village.rt_plots.rst", "api_generated/village.rt_plots.RTPlots.rst", "api_generated/village.screen.rst", "api_generated/village.screen.behaviour_window.rst", "api_generated/village.screen.behaviour_window.BehaviourWindow.rst", "api_generated/village.time_utils.rst", "api_generated/village.time_utils.TimeUtils.rst", "api_generated/village.video.rst", "api_generated/village.video.Example.rst", "api_index.rst", "data_collection/data_collection.md", "data_collection_index.rst", "how_to_build/assembly_instructions.md", "how_to_build/list_of_parts.md", "how_to_build/software_installation.md", "how_to_build_index.rst", "index.rst", "main/controller.md", "main/corridor.md", "main/entry.md", "main/how_does.md", "main/open_source.md", "main/what_is.md", "resources/resources.md", "resources_index.rst", "user_guide/GUI.md", "user_guide/alarms.md", "user_guide/animal_procedures.md", "user_guide/getting_started.md", "user_guide/maintenance.md", "user_guide/project_structure.md", "user_guide/remote.md", "user_guide/state_machine.md", "user_guide/telegram.md", "user_guide_index.rst"], "indexentries": {"__init__() (actions method)": [[5, "village.classes.enums.Actions.__init__", false]], "__init__() (active method)": [[6, "village.classes.enums.Active.__init__", false]], "__init__() (arcom method)": [[94, "village.pybpodapi.com.arcom.ArCOM.__init__", false]], "__init__() (arduinotypes method)": [[95, "village.pybpodapi.com.arcom.ArduinoTypes.__init__", false]], "__init__() (areaactive method)": [[7, "village.classes.enums.AreaActive.__init__", false]], "__init__() (baseeventname method)": [[69, "village.pybpodapi.bpod.hardware.events.base_eventname.BaseEventName.__init__", false]], "__init__() (basemessage method)": [[99, "village.pybpodapi.com.messaging.base_message.BaseMessage.__init__", false]], "__init__() (behaviourwindow method)": [[175, "village.screen.behaviour_window.BehaviourWindow.__init__", false]], "__init__() (bpod method)": [[52, "village.pybpodapi.bpod.Bpod.__init__", false]], "__init__() (bpodbase method)": [[54, "village.pybpodapi.bpod.bpod_base.BpodBase.__init__", false]], "__init__() (bpodcomprotocol method)": [[56, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.__init__", false]], "__init__() (bpodcomprotocolmodules method)": [[58, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.__init__", false]], "__init__() (bpodio method)": [[60, "village.pybpodapi.bpod.bpod_io.BpodIO.__init__", false]], "__init__() (bpodmodule method)": [[89, "village.pybpodapi.bpod_modules.bpod_module.BpodModule.__init__", false]], "__init__() (bpodmodules method)": [[91, "village.pybpodapi.bpod_modules.bpod_modules.BpodModules.__init__", false]], "__init__() (cameraprotocol method)": [[16, "village.classes.protocols.CameraProtocol.__init__", false]], "__init__() (channelname method)": [[63, "village.pybpodapi.bpod.hardware.channels.ChannelName.__init__", false]], "__init__() (channels method)": [[65, "village.pybpodapi.bpod.hardware.channels.Channels.__init__", false]], "__init__() (channeltype method)": [[64, "village.pybpodapi.bpod.hardware.channels.ChannelType.__init__", false]], "__init__() (collection method)": [[3, "village.classes.collection.Collection.__init__", false]], "__init__() (color method)": [[8, "village.classes.enums.Color.__init__", false]], "__init__() (conditions method)": [[151, "village.pybpodapi.state_machine.conditions.Conditions.__init__", false]], "__init__() (cycle method)": [[9, "village.classes.enums.Cycle.__init__", false]], "__init__() (datatable method)": [[10, "village.classes.enums.DataTable.__init__", false]], "__init__() (datatype method)": [[96, "village.pybpodapi.com.arcom.DataType.__init__", false]], "__init__() (debugmessage method)": [[101, "village.pybpodapi.com.messaging.debug.DebugMessage.__init__", false]], "__init__() (endtrial method)": [[103, "village.pybpodapi.com.messaging.end_trial.EndTrial.__init__", false]], "__init__() (errormessage method)": [[105, "village.pybpodapi.com.messaging.error.ErrorMessage.__init__", false]], "__init__() (event method)": [[28, "village.classes.task.Event.__init__", false]], "__init__() (eventname method)": [[71, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.__init__", false]], "__init__() (eventoccurrence method)": [[107, "village.pybpodapi.com.messaging.event_occurrence.EventOccurrence.__init__", false]], "__init__() (eventprotocol method)": [[17, "village.classes.protocols.EventProtocol.__init__", false]], "__init__() (eventresume method)": [[109, "village.pybpodapi.com.messaging.event_resume.EventResume.__init__", false]], "__init__() (eventspositions method)": [[66, "village.pybpodapi.bpod.hardware.channels.EventsPositions.__init__", false]], "__init__() (example method)": [[179, "village.video.Example.__init__", false]], "__init__() (globalcounters method)": [[153, "village.pybpodapi.state_machine.global_counters.GlobalCounters.__init__", false]], "__init__() (globaltimers method)": [[155, "village.pybpodapi.state_machine.global_timers.GlobalTimers.__init__", false]], "__init__() (hardware method)": [[73, "village.pybpodapi.bpod.hardware.hardware.Hardware.__init__", false]], "__init__() (info method)": [[11, "village.classes.enums.Info.__init__", false]], "__init__() (inputname method)": [[76, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.__init__", false]], "__init__() (log method)": [[49, "village.log.Log.__init__", false]], "__init__() (messageparser method)": [[111, "village.pybpodapi.com.messaging.parser.MessageParser.__init__", false]], "__init__() (nonblockingsocketreceive method)": [[81, "village.pybpodapi.bpod.non_blockingsocketreceive.NonBlockingSocketReceive.__init__", false]], "__init__() (nonblockingstreamreader method)": [[84, "village.pybpodapi.bpod.non_blockingstreamreader.NonBlockingStreamReader.__init__", false]], "__init__() (output method)": [[29, "village.classes.task.Output.__init__", false]], "__init__() (outputchannel method)": [[79, "village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.OutputChannel.__init__", false]], "__init__() (pybpod method)": [[38, "village.devices.bpod.PyBpod.__init__", false]], "__init__() (pybpodprotocol method)": [[18, "village.classes.protocols.PyBpodProtocol.__init__", false]], "__init__() (reader method)": [[167, "village.pybpodapi.utils.csv.Reader.__init__", false]], "__init__() (receivemessageheader method)": [[134, "village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader.__init__", false]], "__init__() (rtplots method)": [[172, "village.rt_plots.RTPlots.__init__", false]], "__init__() (scale method)": [[42, "village.devices.scale.Scale.__init__", false]], "__init__() (scaleprotocol method)": [[19, "village.classes.protocols.ScaleProtocol.__init__", false]], "__init__() (screenactive method)": [[12, "village.classes.enums.ScreenActive.__init__", false]], "__init__() (sendmessageheader method)": [[136, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.__init__", false]], "__init__() (session method)": [[146, "village.pybpodapi.session.Session.__init__", false]], "__init__() (sessioninfo method)": [[113, "village.pybpodapi.com.messaging.session_info.SessionInfo.__init__", false]], "__init__() (setting method)": [[23, "village.classes.settings_class.Setting.__init__", false]], "__init__() (settings method)": [[24, "village.classes.settings_class.Settings.__init__", false], [33, "village.classes.training.Settings.__init__", false]], "__init__() (softcode method)": [[39, "village.devices.bpod.Softcode.__init__", false]], "__init__() (softcodeoccurrence method)": [[115, "village.pybpodapi.com.messaging.softcode_occurrence.SoftcodeOccurrence.__init__", false]], "__init__() (state method)": [[13, "village.classes.enums.State.__init__", false]], "__init__() (statemachine method)": [[149, "village.pybpodapi.state_machine.StateMachine.__init__", false]], "__init__() (statemachinebase method)": [[158, "village.pybpodapi.state_machine.state_machine_base.StateMachineBase.__init__", false]], "__init__() (statemachinebuilder method)": [[160, "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder.__init__", false]], "__init__() (statemachinerunner method)": [[163, "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner.__init__", false]], "__init__() (stateoccurrence method)": [[117, "village.pybpodapi.com.messaging.state_occurrence.StateOccurrence.__init__", false]], "__init__() (statetransition method)": [[119, "village.pybpodapi.com.messaging.state_transition.StateTransition.__init__", false]], "__init__() (stderrbuffer method)": [[138, "village.pybpodapi.com.stderr_buffer.StderrBuffer.__init__", false]], "__init__() (stderrmessage method)": [[121, "village.pybpodapi.com.messaging.stderr.StderrMessage.__init__", false]], "__init__() (stdoutbuffer method)": [[140, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.__init__", false]], "__init__() (stdoutmessage method)": [[123, "village.pybpodapi.com.messaging.stdout.StdoutMessage.__init__", false]], "__init__() (streamswrapper method)": [[147, "village.pybpodapi.session.StreamsWrapper.__init__", false]], "__init__() (subject method)": [[26, "village.classes.subject.Subject.__init__", false]], "__init__() (superenum method)": [[14, "village.classes.enums.SuperEnum.__init__", false]], "__init__() (task method)": [[30, "village.classes.task.Task.__init__", false]], "__init__() (telegrambotprotocol method)": [[20, "village.classes.protocols.TelegramBotProtocol.__init__", false]], "__init__() (tempsensor method)": [[45, "village.devices.temp_sensor.TempSensor.__init__", false]], "__init__() (tempsensorprotocol method)": [[21, "village.classes.protocols.TempSensorProtocol.__init__", false]], "__init__() (timeutils method)": [[177, "village.time_utils.TimeUtils.__init__", false]], "__init__() (training method)": [[34, "village.classes.training.Training.__init__", false]], "__init__() (trial method)": [[125, "village.pybpodapi.com.messaging.trial.Trial.__init__", false]], "__init__() (untaggedmessage method)": [[127, "village.pybpodapi.com.messaging.untagged_message.UntaggedMessage.__init__", false]], "__init__() (valuemessage method)": [[129, "village.pybpodapi.com.messaging.value.ValueMessage.__init__", false]], "__init__() (warningmessage method)": [[131, "village.pybpodapi.com.messaging.warning.WarningMessage.__init__", false]], "__init__() (writer method)": [[168, "village.pybpodapi.utils.csv.Writer.__init__", false]], "actions (class in village.classes.enums)": [[5, "village.classes.enums.Actions", false]], "active (class in village.classes.enums)": [[6, "village.classes.enums.Active", false]], "add_state() (statemachine method)": [[149, "village.pybpodapi.state_machine.StateMachine.add_state", false]], "add_state() (statemachinebase method)": [[158, "village.pybpodapi.state_machine.state_machine_base.StateMachineBase.add_state", false]], "add_state() (statemachinebuilder method)": [[160, "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder.add_state", false]], "add_state() (statemachinerunner method)": [[163, "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner.add_state", false]], "arcom (class in village.pybpodapi.com.arcom)": [[94, "village.pybpodapi.com.arcom.ArCOM", false]], "arduinotypes (class in village.pybpodapi.com.arcom)": [[95, "village.pybpodapi.com.arcom.ArduinoTypes", false]], "areaactive (class in village.classes.enums)": [[7, "village.classes.enums.AreaActive", false]], "baseeventname (class in village.pybpodapi.bpod.hardware.events.base_eventname)": [[69, "village.pybpodapi.bpod.hardware.events.base_eventname.BaseEventName", false]], "basemessage (class in village.pybpodapi.com.messaging.base_message)": [[99, "village.pybpodapi.com.messaging.base_message.BaseMessage", false]], "behaviourwindow (class in village.screen.behaviour_window)": [[175, "village.screen.behaviour_window.BehaviourWindow", false]], "bnc (bpod.channelnames attribute)": [[52, "village.pybpodapi.bpod.Bpod.ChannelNames.BNC", false]], "bnc (bpodbase.channelnames attribute)": [[54, "village.pybpodapi.bpod.bpod_base.BpodBase.ChannelNames.BNC", false]], "bnc (bpodcomprotocol.channelnames attribute)": [[56, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.ChannelNames.BNC", false]], "bnc (bpodcomprotocolmodules.channelnames attribute)": [[58, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.ChannelNames.BNC", false]], "bnc (bpodio.channelnames attribute)": [[60, "village.pybpodapi.bpod.bpod_io.BpodIO.ChannelNames.BNC", false]], "bnc (channelname attribute)": [[63, "village.pybpodapi.bpod.hardware.channels.ChannelName.BNC", false]], "bnc1 (inputname attribute)": [[76, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.BNC1", false]], "bnc1high (bpod.events attribute)": [[52, "village.pybpodapi.bpod.Bpod.Events.BNC1High", false]], "bnc1high (bpod.outputchannels attribute)": [[52, "village.pybpodapi.bpod.Bpod.OutputChannels.BNC1High", false]], "bnc1high (bpodbase.events attribute)": [[54, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.BNC1High", false]], "bnc1high (bpodbase.outputchannels attribute)": [[54, "village.pybpodapi.bpod.bpod_base.BpodBase.OutputChannels.BNC1High", false]], "bnc1high (bpodcomprotocol.events attribute)": [[56, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.BNC1High", false]], "bnc1high (bpodcomprotocol.outputchannels attribute)": [[56, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.OutputChannels.BNC1High", false]], "bnc1high (bpodcomprotocolmodules.events attribute)": [[58, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.BNC1High", false]], "bnc1high (bpodcomprotocolmodules.outputchannels attribute)": [[58, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.OutputChannels.BNC1High", false]], "bnc1high (bpodio.events attribute)": [[60, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.BNC1High", false]], "bnc1high (bpodio.outputchannels attribute)": [[60, "village.pybpodapi.bpod.bpod_io.BpodIO.OutputChannels.BNC1High", false]], "bnc1high (event attribute)": [[28, "village.classes.task.Event.BNC1High", false]], "bnc1high (eventname attribute)": [[71, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.BNC1High", false]], "bnc1high (output attribute)": [[29, "village.classes.task.Output.BNC1High", false]], "bnc1high (outputchannel attribute)": [[79, "village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.OutputChannel.BNC1High", false]], "bnc2 (inputname attribute)": [[76, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.BNC2", false]], "bpod (class in village.pybpodapi.bpod)": [[52, "village.pybpodapi.bpod.Bpod", false]], "bpod.channelnames (class in village.pybpodapi.bpod)": [[52, "village.pybpodapi.bpod.Bpod.ChannelNames", false]], "bpod.channeltypes (class in village.pybpodapi.bpod)": [[52, "village.pybpodapi.bpod.Bpod.ChannelTypes", false]], "bpod.events (class in village.pybpodapi.bpod)": [[52, "village.pybpodapi.bpod.Bpod.Events", false]], "bpod.outputchannels (class in village.pybpodapi.bpod)": [[52, "village.pybpodapi.bpod.Bpod.OutputChannels", false]], "bpodbase (class in village.pybpodapi.bpod.bpod_base)": [[54, "village.pybpodapi.bpod.bpod_base.BpodBase", false]], "bpodbase.channelnames (class in village.pybpodapi.bpod.bpod_base)": [[54, "village.pybpodapi.bpod.bpod_base.BpodBase.ChannelNames", false]], "bpodbase.channeltypes (class in village.pybpodapi.bpod.bpod_base)": [[54, "village.pybpodapi.bpod.bpod_base.BpodBase.ChannelTypes", false]], "bpodbase.events (class in village.pybpodapi.bpod.bpod_base)": [[54, "village.pybpodapi.bpod.bpod_base.BpodBase.Events", false]], "bpodbase.outputchannels (class in village.pybpodapi.bpod.bpod_base)": [[54, "village.pybpodapi.bpod.bpod_base.BpodBase.OutputChannels", false]], "bpodcomprotocol (class in village.pybpodapi.bpod.bpod_com_protocol)": [[56, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol", false]], "bpodcomprotocol.channelnames (class in village.pybpodapi.bpod.bpod_com_protocol)": [[56, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.ChannelNames", false]], "bpodcomprotocol.channeltypes (class in village.pybpodapi.bpod.bpod_com_protocol)": [[56, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.ChannelTypes", false]], "bpodcomprotocol.events (class in village.pybpodapi.bpod.bpod_com_protocol)": [[56, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events", false]], "bpodcomprotocol.outputchannels (class in village.pybpodapi.bpod.bpod_com_protocol)": [[56, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.OutputChannels", false]], "bpodcomprotocolmodules (class in village.pybpodapi.bpod.bpod_com_protocol_modules)": [[58, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules", false]], "bpodcomprotocolmodules.channelnames (class in village.pybpodapi.bpod.bpod_com_protocol_modules)": [[58, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.ChannelNames", false]], "bpodcomprotocolmodules.channeltypes (class in village.pybpodapi.bpod.bpod_com_protocol_modules)": [[58, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.ChannelTypes", false]], "bpodcomprotocolmodules.events (class in village.pybpodapi.bpod.bpod_com_protocol_modules)": [[58, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events", false]], "bpodcomprotocolmodules.outputchannels (class in village.pybpodapi.bpod.bpod_com_protocol_modules)": [[58, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.OutputChannels", false]], "bpoderrorexception": [[143, "village.pybpodapi.exceptions.bpod_error.BpodErrorException", false]], "bpodio (class in village.pybpodapi.bpod.bpod_io)": [[60, "village.pybpodapi.bpod.bpod_io.BpodIO", false]], "bpodio.channelnames (class in village.pybpodapi.bpod.bpod_io)": [[60, "village.pybpodapi.bpod.bpod_io.BpodIO.ChannelNames", false]], "bpodio.channeltypes (class in village.pybpodapi.bpod.bpod_io)": [[60, "village.pybpodapi.bpod.bpod_io.BpodIO.ChannelTypes", false]], "bpodio.events (class in village.pybpodapi.bpod.bpod_io)": [[60, "village.pybpodapi.bpod.bpod_io.BpodIO.Events", false]], "bpodio.outputchannels (class in village.pybpodapi.bpod.bpod_io)": [[60, "village.pybpodapi.bpod.bpod_io.BpodIO.OutputChannels", false]], "bpodmodule (class in village.pybpodapi.bpod_modules.bpod_module)": [[89, "village.pybpodapi.bpod_modules.bpod_module.BpodModule", false]], "bpodmodules (class in village.pybpodapi.bpod_modules.bpod_modules)": [[91, "village.pybpodapi.bpod_modules.bpod_modules.BpodModules", false]], "build_message() (statemachine method)": [[149, "village.pybpodapi.state_machine.StateMachine.build_message", false]], "build_message() (statemachinebuilder method)": [[160, "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder.build_message", false]], "build_message() (statemachinerunner method)": [[163, "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner.build_message", false]], "build_message_32_bits() (statemachine method)": [[149, "village.pybpodapi.state_machine.StateMachine.build_message_32_bits", false]], "build_message_32_bits() (statemachinebuilder method)": [[160, "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder.build_message_32_bits", false]], "build_message_32_bits() (statemachinerunner method)": [[163, "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner.build_message_32_bits", false]], "bytes_available() (arcom method)": [[94, "village.pybpodapi.com.arcom.ArCOM.bytes_available", false]], "cameraprotocol (class in village.classes.protocols)": [[16, "village.classes.protocols.CameraProtocol", false]], "channelname (class in village.pybpodapi.bpod.hardware.channels)": [[63, "village.pybpodapi.bpod.hardware.channels.ChannelName", false]], "channels (class in village.pybpodapi.bpod.hardware.channels)": [[65, "village.pybpodapi.bpod.hardware.channels.Channels", false]], "channeltype (class in village.pybpodapi.bpod.hardware.channels)": [[64, "village.pybpodapi.bpod.hardware.channels.ChannelType", false]], "check_type() (basemessage class method)": [[99, "village.pybpodapi.com.messaging.base_message.BaseMessage.check_type", false]], "check_type() (debugmessage class method)": [[101, "village.pybpodapi.com.messaging.debug.DebugMessage.check_type", false]], "check_type() (endtrial class method)": [[103, "village.pybpodapi.com.messaging.end_trial.EndTrial.check_type", false]], "check_type() (errormessage class method)": [[105, "village.pybpodapi.com.messaging.error.ErrorMessage.check_type", false]], "check_type() (eventoccurrence class method)": [[107, "village.pybpodapi.com.messaging.event_occurrence.EventOccurrence.check_type", false]], "check_type() (eventresume class method)": [[109, "village.pybpodapi.com.messaging.event_resume.EventResume.check_type", false]], "check_type() (sessioninfo class method)": [[113, "village.pybpodapi.com.messaging.session_info.SessionInfo.check_type", false]], "check_type() (softcodeoccurrence class method)": [[115, "village.pybpodapi.com.messaging.softcode_occurrence.SoftcodeOccurrence.check_type", false]], "check_type() (stateoccurrence class method)": [[117, "village.pybpodapi.com.messaging.state_occurrence.StateOccurrence.check_type", false]], "check_type() (statetransition class method)": [[119, "village.pybpodapi.com.messaging.state_transition.StateTransition.check_type", false]], "check_type() (stderrmessage class method)": [[121, "village.pybpodapi.com.messaging.stderr.StderrMessage.check_type", false]], "check_type() (stdoutmessage class method)": [[123, "village.pybpodapi.com.messaging.stdout.StdoutMessage.check_type", false]], "check_type() (trial class method)": [[125, "village.pybpodapi.com.messaging.trial.Trial.check_type", false]], "check_type() (untaggedmessage class method)": [[127, "village.pybpodapi.com.messaging.untagged_message.UntaggedMessage.check_type", false]], "check_type() (valuemessage class method)": [[129, "village.pybpodapi.com.messaging.value.ValueMessage.check_type", false]], "check_type() (warningmessage class method)": [[131, "village.pybpodapi.com.messaging.warning.WarningMessage.check_type", false]], "close() (arcom method)": [[94, "village.pybpodapi.com.arcom.ArCOM.close", false]], "close() (bpod method)": [[52, "village.pybpodapi.bpod.Bpod.close", false]], "close() (bpodbase method)": [[54, "village.pybpodapi.bpod.bpod_base.BpodBase.close", false]], "close() (bpodcomprotocol method)": [[56, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.close", false]], "close() (bpodcomprotocolmodules method)": [[58, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.close", false]], "close() (bpodio method)": [[60, "village.pybpodapi.bpod.bpod_io.BpodIO.close", false]], "close() (softcode method)": [[39, "village.devices.bpod.Softcode.close", false]], "close() (stderrbuffer method)": [[138, "village.pybpodapi.com.stderr_buffer.StderrBuffer.close", false]], "close() (stdoutbuffer method)": [[140, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.close", false]], "collection (class in village.classes.collection)": [[3, "village.classes.collection.Collection", false]], "color (class in village.classes.enums)": [[8, "village.classes.enums.Color", false]], "condition1 (bpod.events attribute)": [[52, "village.pybpodapi.bpod.Bpod.Events.Condition1", false]], "condition1 (bpodbase.events attribute)": [[54, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.Condition1", false]], "condition1 (bpodcomprotocol.events attribute)": [[56, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.Condition1", false]], "condition1 (bpodcomprotocolmodules.events attribute)": [[58, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.Condition1", false]], "condition1 (bpodio.events attribute)": [[60, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.Condition1", false]], "condition1 (event attribute)": [[28, "village.classes.task.Event.Condition1", false]], "condition1 (eventname attribute)": [[71, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.Condition1", false]], "conditions (class in village.pybpodapi.state_machine.conditions)": [[151, "village.pybpodapi.state_machine.conditions.Conditions", false]], "current_trial (session property)": [[146, "village.pybpodapi.session.Session.current_trial", false]], "cycle (class in village.classes.enums)": [[9, "village.classes.enums.Cycle", false]], "data_available() (bpod method)": [[52, "village.pybpodapi.bpod.Bpod.data_available", false]], "data_available() (bpodcomprotocol method)": [[56, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.data_available", false]], "data_available() (bpodcomprotocolmodules method)": [[58, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.data_available", false]], "data_available() (bpodio method)": [[60, "village.pybpodapi.bpod.bpod_io.BpodIO.data_available", false]], "datatable (class in village.classes.enums)": [[10, "village.classes.enums.DataTable", false]], "datatype (class in village.pybpodapi.com.arcom)": [[96, "village.pybpodapi.com.arcom.DataType", false]], "debugmessage (class in village.pybpodapi.com.messaging.debug)": [[101, "village.pybpodapi.com.messaging.debug.DebugMessage", false]], "detach() (stderrbuffer method)": [[138, "village.pybpodapi.com.stderr_buffer.StderrBuffer.detach", false]], "detach() (stdoutbuffer method)": [[140, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.detach", false]], "disconnect (sendmessageheader attribute)": [[136, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.DISCONNECT", false]], "echo_softcode (sendmessageheader attribute)": [[136, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.ECHO_SOFTCODE", false]], "enable_ports (sendmessageheader attribute)": [[136, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.ENABLE_PORTS", false]], "enable_ports_ok (receivemessageheader attribute)": [[134, "village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader.ENABLE_PORTS_OK", false]], "encoding (stderrbuffer attribute)": [[138, "village.pybpodapi.com.stderr_buffer.StderrBuffer.encoding", false]], "encoding (stdoutbuffer attribute)": [[140, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.encoding", false]], "endtrial (class in village.pybpodapi.com.messaging.end_trial)": [[103, "village.pybpodapi.com.messaging.end_trial.EndTrial", false]], "errormessage (class in village.pybpodapi.com.messaging.error)": [[105, "village.pybpodapi.com.messaging.error.ErrorMessage", false]], "errors (stderrbuffer attribute)": [[138, "village.pybpodapi.com.stderr_buffer.StderrBuffer.errors", false]], "errors (stdoutbuffer attribute)": [[140, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.errors", false]], "event (class in village.classes.task)": [[28, "village.classes.task.Event", false]], "eventname (class in village.pybpodapi.bpod.hardware.events.bpod_events)": [[71, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName", false]], "eventoccurrence (class in village.pybpodapi.com.messaging.event_occurrence)": [[107, "village.pybpodapi.com.messaging.event_occurrence.EventOccurrence", false]], "eventprotocol (class in village.classes.protocols)": [[17, "village.classes.protocols.EventProtocol", false]], "eventresume (class in village.pybpodapi.com.messaging.event_resume)": [[109, "village.pybpodapi.com.messaging.event_resume.EventResume", false]], "eventspositions (class in village.pybpodapi.bpod.hardware.channels)": [[66, "village.pybpodapi.bpod.hardware.channels.EventsPositions", false]], "example (class in village.video)": [[179, "village.video.Example", false]], "exit_and_return (sendmessageheader attribute)": [[136, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.EXIT_AND_RETURN", false]], "fileno() (stderrbuffer method)": [[138, "village.pybpodapi.com.stderr_buffer.StderrBuffer.fileno", false]], "fileno() (stdoutbuffer method)": [[140, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.fileno", false]], "find_module_by_name() (bpod method)": [[52, "village.pybpodapi.bpod.Bpod.find_module_by_name", false]], "find_module_by_name() (bpodbase method)": [[54, "village.pybpodapi.bpod.bpod_base.BpodBase.find_module_by_name", false]], "find_module_by_name() (bpodcomprotocol method)": [[56, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.find_module_by_name", false]], "find_module_by_name() (bpodcomprotocolmodules method)": [[58, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.find_module_by_name", false]], "find_module_by_name() (bpodio method)": [[60, "village.pybpodapi.bpod.bpod_io.BpodIO.find_module_by_name", false]], "firmware_version (sendmessageheader attribute)": [[136, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.FIRMWARE_VERSION", false]], "flush() (stderrbuffer method)": [[138, "village.pybpodapi.com.stderr_buffer.StderrBuffer.flush", false]], "flush() (stdoutbuffer method)": [[140, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.flush", false]], "fromlist() (basemessage class method)": [[99, "village.pybpodapi.com.messaging.base_message.BaseMessage.fromlist", false]], "fromlist() (debugmessage class method)": [[101, "village.pybpodapi.com.messaging.debug.DebugMessage.fromlist", false]], "fromlist() (endtrial class method)": [[103, "village.pybpodapi.com.messaging.end_trial.EndTrial.fromlist", false]], "fromlist() (errormessage class method)": [[105, "village.pybpodapi.com.messaging.error.ErrorMessage.fromlist", false]], "fromlist() (eventoccurrence class method)": [[107, "village.pybpodapi.com.messaging.event_occurrence.EventOccurrence.fromlist", false]], "fromlist() (eventresume class method)": [[109, "village.pybpodapi.com.messaging.event_resume.EventResume.fromlist", false]], "fromlist() (messageparser method)": [[111, "village.pybpodapi.com.messaging.parser.MessageParser.fromlist", false]], "fromlist() (sessioninfo class method)": [[113, "village.pybpodapi.com.messaging.session_info.SessionInfo.fromlist", false]], "fromlist() (softcodeoccurrence class method)": [[115, "village.pybpodapi.com.messaging.softcode_occurrence.SoftcodeOccurrence.fromlist", false]], "fromlist() (stateoccurrence class method)": [[117, "village.pybpodapi.com.messaging.state_occurrence.StateOccurrence.fromlist", false]], "fromlist() (statetransition class method)": [[119, "village.pybpodapi.com.messaging.state_transition.StateTransition.fromlist", false]], "fromlist() (stderrmessage class method)": [[121, "village.pybpodapi.com.messaging.stderr.StderrMessage.fromlist", false]], "fromlist() (stdoutmessage class method)": [[123, "village.pybpodapi.com.messaging.stdout.StdoutMessage.fromlist", false]], "fromlist() (trial class method)": [[125, "village.pybpodapi.com.messaging.trial.Trial.fromlist", false]], "fromlist() (untaggedmessage class method)": [[127, "village.pybpodapi.com.messaging.untagged_message.UntaggedMessage.fromlist", false]], "fromlist() (valuemessage class method)": [[129, "village.pybpodapi.com.messaging.value.ValueMessage.fromlist", false]], "fromlist() (warningmessage class method)": [[131, "village.pybpodapi.com.messaging.warning.WarningMessage.fromlist", false]], "get() (settings method)": [[24, "village.classes.settings_class.Settings.get", false]], "get_all_timestamps_by_event() (trial method)": [[125, "village.pybpodapi.com.messaging.trial.Trial.get_all_timestamps_by_event", false]], "get_bpod() (in module village.devices.bpod)": [[40, "village.devices.bpod.get_bpod", false]], "get_description() (settings method)": [[24, "village.classes.settings_class.Settings.get_description", false]], "get_event_name() (channels method)": [[65, "village.pybpodapi.bpod.hardware.channels.Channels.get_event_name", false]], "get_events_names() (trial method)": [[125, "village.pybpodapi.com.messaging.trial.Trial.get_events_names", false]], "get_index() (settings method)": [[24, "village.classes.settings_class.Settings.get_index", false]], "get_indices() (settings method)": [[24, "village.classes.settings_class.Settings.get_indices", false]], "get_modules (sendmessageheader attribute)": [[136, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.GET_MODULES", false]], "get_scale() (in module village.devices.scale)": [[43, "village.devices.scale.get_scale", false]], "get_temp_sensor() (in module village.devices.temp_sensor)": [[46, "village.devices.temp_sensor.get_temp_sensor", false]], "get_text() (settings method)": [[24, "village.classes.settings_class.Settings.get_text", false]], "get_timestamp_transmission (sendmessageheader attribute)": [[136, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.GET_TIMESTAMP_TRANSMISSION", false]], "get_timestamps_by_event_name() (trial method)": [[125, "village.pybpodapi.com.messaging.trial.Trial.get_timestamps_by_event_name", false]], "get_type() (settings method)": [[24, "village.classes.settings_class.Settings.get_type", false]], "get_values() (settings method)": [[24, "village.classes.settings_class.Settings.get_values", false]], "getvalue() (stderrbuffer method)": [[138, "village.pybpodapi.com.stderr_buffer.StderrBuffer.getvalue", false]], "getvalue() (stdoutbuffer method)": [[140, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.getvalue", false]], "globalcounter1end (bpod.events attribute)": [[52, "village.pybpodapi.bpod.Bpod.Events.GlobalCounter1End", false]], "globalcounter1end (bpodbase.events attribute)": [[54, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.GlobalCounter1End", false]], "globalcounter1end (bpodcomprotocol.events attribute)": [[56, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.GlobalCounter1End", false]], "globalcounter1end (bpodcomprotocolmodules.events attribute)": [[58, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.GlobalCounter1End", false]], "globalcounter1end (bpodio.events attribute)": [[60, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.GlobalCounter1End", false]], "globalcounter1end (event attribute)": [[28, "village.classes.task.Event.GlobalCounter1End", false]], "globalcounter1end (eventname attribute)": [[71, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.GlobalCounter1End", false]], "globalcounterreset (bpod.outputchannels attribute)": [[52, "village.pybpodapi.bpod.Bpod.OutputChannels.GlobalCounterReset", false]], "globalcounterreset (bpodbase.outputchannels attribute)": [[54, "village.pybpodapi.bpod.bpod_base.BpodBase.OutputChannels.GlobalCounterReset", false]], "globalcounterreset (bpodcomprotocol.outputchannels attribute)": [[56, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.OutputChannels.GlobalCounterReset", false]], "globalcounterreset (bpodcomprotocolmodules.outputchannels attribute)": [[58, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.OutputChannels.GlobalCounterReset", false]], "globalcounterreset (bpodio.outputchannels attribute)": [[60, "village.pybpodapi.bpod.bpod_io.BpodIO.OutputChannels.GlobalCounterReset", false]], "globalcounterreset (output attribute)": [[29, "village.classes.task.Output.GlobalCounterReset", false]], "globalcounterreset (outputchannel attribute)": [[79, "village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.OutputChannel.GlobalCounterReset", false]], "globalcounters (class in village.pybpodapi.state_machine.global_counters)": [[153, "village.pybpodapi.state_machine.global_counters.GlobalCounters", false]], "globaltimer1cancel (bpod.outputchannels attribute)": [[52, "village.pybpodapi.bpod.Bpod.OutputChannels.GlobalTimer1Cancel", false]], "globaltimer1cancel (bpodbase.outputchannels attribute)": [[54, "village.pybpodapi.bpod.bpod_base.BpodBase.OutputChannels.GlobalTimer1Cancel", false]], "globaltimer1cancel (bpodcomprotocol.outputchannels attribute)": [[56, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.OutputChannels.GlobalTimer1Cancel", false]], "globaltimer1cancel (bpodcomprotocolmodules.outputchannels attribute)": [[58, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.OutputChannels.GlobalTimer1Cancel", false]], "globaltimer1cancel (bpodio.outputchannels attribute)": [[60, "village.pybpodapi.bpod.bpod_io.BpodIO.OutputChannels.GlobalTimer1Cancel", false]], "globaltimer1cancel (output attribute)": [[29, "village.classes.task.Output.GlobalTimer1Cancel", false]], "globaltimer1cancel (outputchannel attribute)": [[79, "village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.OutputChannel.GlobalTimer1Cancel", false]], "globaltimer1end (bpod.events attribute)": [[52, "village.pybpodapi.bpod.Bpod.Events.GlobalTimer1End", false]], "globaltimer1end (bpodbase.events attribute)": [[54, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.GlobalTimer1End", false]], "globaltimer1end (bpodcomprotocol.events attribute)": [[56, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.GlobalTimer1End", false]], "globaltimer1end (bpodcomprotocolmodules.events attribute)": [[58, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.GlobalTimer1End", false]], "globaltimer1end (bpodio.events attribute)": [[60, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.GlobalTimer1End", false]], "globaltimer1end (event attribute)": [[28, "village.classes.task.Event.GlobalTimer1End", false]], "globaltimer1end (eventname attribute)": [[71, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.GlobalTimer1End", false]], "globaltimer1start (bpod.events attribute)": [[52, "village.pybpodapi.bpod.Bpod.Events.GlobalTimer1Start", false]], "globaltimer1start (bpodbase.events attribute)": [[54, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.GlobalTimer1Start", false]], "globaltimer1start (bpodcomprotocol.events attribute)": [[56, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.GlobalTimer1Start", false]], "globaltimer1start (bpodcomprotocolmodules.events attribute)": [[58, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.GlobalTimer1Start", false]], "globaltimer1start (bpodio.events attribute)": [[60, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.GlobalTimer1Start", false]], "globaltimer1start (event attribute)": [[28, "village.classes.task.Event.GlobalTimer1Start", false]], "globaltimer1start (eventname attribute)": [[71, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.GlobalTimer1Start", false]], "globaltimer1trig (bpod.outputchannels attribute)": [[52, "village.pybpodapi.bpod.Bpod.OutputChannels.GlobalTimer1Trig", false]], "globaltimer1trig (bpodbase.outputchannels attribute)": [[54, "village.pybpodapi.bpod.bpod_base.BpodBase.OutputChannels.GlobalTimer1Trig", false]], "globaltimer1trig (bpodcomprotocol.outputchannels attribute)": [[56, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.OutputChannels.GlobalTimer1Trig", false]], "globaltimer1trig (bpodcomprotocolmodules.outputchannels attribute)": [[58, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.OutputChannels.GlobalTimer1Trig", false]], "globaltimer1trig (bpodio.outputchannels attribute)": [[60, "village.pybpodapi.bpod.bpod_io.BpodIO.OutputChannels.GlobalTimer1Trig", false]], "globaltimer1trig (output attribute)": [[29, "village.classes.task.Output.GlobalTimer1Trig", false]], "globaltimer1trig (outputchannel attribute)": [[79, "village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.OutputChannel.GlobalTimer1Trig", false]], "globaltimers (class in village.pybpodapi.state_machine.global_timers)": [[155, "village.pybpodapi.state_machine.global_timers.GlobalTimers", false]], "handshake (sendmessageheader attribute)": [[136, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.HANDSHAKE", false]], "handshake_ok (receivemessageheader attribute)": [[134, "village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader.HANDSHAKE_OK", false]], "hardware (class in village.pybpodapi.bpod.hardware.hardware)": [[73, "village.pybpodapi.bpod.hardware.hardware.Hardware", false]], "hardware_description (sendmessageheader attribute)": [[136, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.HARDWARE_DESCRIPTION", false]], "info (class in village.classes.enums)": [[11, "village.classes.enums.Info", false]], "input (bpod.channeltypes attribute)": [[52, "village.pybpodapi.bpod.Bpod.ChannelTypes.INPUT", false]], "input (bpodbase.channeltypes attribute)": [[54, "village.pybpodapi.bpod.bpod_base.BpodBase.ChannelTypes.INPUT", false]], "input (bpodcomprotocol.channeltypes attribute)": [[56, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.ChannelTypes.INPUT", false]], "input (bpodcomprotocolmodules.channeltypes attribute)": [[58, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.ChannelTypes.INPUT", false]], "input (bpodio.channeltypes attribute)": [[60, "village.pybpodapi.bpod.bpod_io.BpodIO.ChannelTypes.INPUT", false]], "input (channeltype attribute)": [[64, "village.pybpodapi.bpod.hardware.channels.ChannelType.INPUT", false]], "inputname (class in village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels)": [[76, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName", false]], "is_condition() (baseeventname static method)": [[69, "village.pybpodapi.bpod.hardware.events.base_eventname.BaseEventName.is_condition", false]], "is_condition() (bpod.events static method)": [[52, "village.pybpodapi.bpod.Bpod.Events.is_condition", false]], "is_condition() (bpodbase.events static method)": [[54, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.is_condition", false]], "is_condition() (bpodcomprotocol.events static method)": [[56, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.is_condition", false]], "is_condition() (bpodcomprotocolmodules.events static method)": [[58, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.is_condition", false]], "is_condition() (bpodio.events static method)": [[60, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.is_condition", false]], "is_condition() (event static method)": [[28, "village.classes.task.Event.is_condition", false]], "is_condition() (eventname static method)": [[71, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.is_condition", false]], "is_global_counter_end() (baseeventname static method)": [[69, "village.pybpodapi.bpod.hardware.events.base_eventname.BaseEventName.is_global_counter_end", false]], "is_global_counter_end() (bpod.events static method)": [[52, "village.pybpodapi.bpod.Bpod.Events.is_global_counter_end", false]], "is_global_counter_end() (bpodbase.events static method)": [[54, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.is_global_counter_end", false]], "is_global_counter_end() (bpodcomprotocol.events static method)": [[56, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.is_global_counter_end", false]], "is_global_counter_end() (bpodcomprotocolmodules.events static method)": [[58, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.is_global_counter_end", false]], "is_global_counter_end() (bpodio.events static method)": [[60, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.is_global_counter_end", false]], "is_global_counter_end() (event static method)": [[28, "village.classes.task.Event.is_global_counter_end", false]], "is_global_counter_end() (eventname static method)": [[71, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.is_global_counter_end", false]], "is_global_timer_cancel() (baseeventname static method)": [[69, "village.pybpodapi.bpod.hardware.events.base_eventname.BaseEventName.is_global_timer_cancel", false]], "is_global_timer_cancel() (bpod.events static method)": [[52, "village.pybpodapi.bpod.Bpod.Events.is_global_timer_cancel", false]], "is_global_timer_cancel() (bpodbase.events static method)": [[54, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.is_global_timer_cancel", false]], "is_global_timer_cancel() (bpodcomprotocol.events static method)": [[56, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.is_global_timer_cancel", false]], "is_global_timer_cancel() (bpodcomprotocolmodules.events static method)": [[58, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.is_global_timer_cancel", false]], "is_global_timer_cancel() (bpodio.events static method)": [[60, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.is_global_timer_cancel", false]], "is_global_timer_cancel() (event static method)": [[28, "village.classes.task.Event.is_global_timer_cancel", false]], "is_global_timer_cancel() (eventname static method)": [[71, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.is_global_timer_cancel", false]], "is_global_timer_end() (baseeventname static method)": [[69, "village.pybpodapi.bpod.hardware.events.base_eventname.BaseEventName.is_global_timer_end", false]], "is_global_timer_end() (bpod.events static method)": [[52, "village.pybpodapi.bpod.Bpod.Events.is_global_timer_end", false]], "is_global_timer_end() (bpodbase.events static method)": [[54, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.is_global_timer_end", false]], "is_global_timer_end() (bpodcomprotocol.events static method)": [[56, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.is_global_timer_end", false]], "is_global_timer_end() (bpodcomprotocolmodules.events static method)": [[58, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.is_global_timer_end", false]], "is_global_timer_end() (bpodio.events static method)": [[60, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.is_global_timer_end", false]], "is_global_timer_end() (event static method)": [[28, "village.classes.task.Event.is_global_timer_end", false]], "is_global_timer_end() (eventname static method)": [[71, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.is_global_timer_end", false]], "is_global_timer_start() (baseeventname static method)": [[69, "village.pybpodapi.bpod.hardware.events.base_eventname.BaseEventName.is_global_timer_start", false]], "is_global_timer_start() (bpod.events static method)": [[52, "village.pybpodapi.bpod.Bpod.Events.is_global_timer_start", false]], "is_global_timer_start() (bpodbase.events static method)": [[54, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.is_global_timer_start", false]], "is_global_timer_start() (bpodcomprotocol.events static method)": [[56, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.is_global_timer_start", false]], "is_global_timer_start() (bpodcomprotocolmodules.events static method)": [[58, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.is_global_timer_start", false]], "is_global_timer_start() (bpodio.events static method)": [[60, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.is_global_timer_start", false]], "is_global_timer_start() (event static method)": [[28, "village.classes.task.Event.is_global_timer_start", false]], "is_global_timer_start() (eventname static method)": [[71, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.is_global_timer_start", false]], "is_global_timer_trigger() (baseeventname static method)": [[69, "village.pybpodapi.bpod.hardware.events.base_eventname.BaseEventName.is_global_timer_trigger", false]], "is_global_timer_trigger() (bpod.events static method)": [[52, "village.pybpodapi.bpod.Bpod.Events.is_global_timer_trigger", false]], "is_global_timer_trigger() (bpodbase.events static method)": [[54, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.is_global_timer_trigger", false]], "is_global_timer_trigger() (bpodcomprotocol.events static method)": [[56, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.is_global_timer_trigger", false]], "is_global_timer_trigger() (bpodcomprotocolmodules.events static method)": [[58, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.is_global_timer_trigger", false]], "is_global_timer_trigger() (bpodio.events static method)": [[60, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.is_global_timer_trigger", false]], "is_global_timer_trigger() (event static method)": [[28, "village.classes.task.Event.is_global_timer_trigger", false]], "is_global_timer_trigger() (eventname static method)": [[71, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.is_global_timer_trigger", false]], "is_state_timer() (baseeventname static method)": [[69, "village.pybpodapi.bpod.hardware.events.base_eventname.BaseEventName.is_state_timer", false]], "is_state_timer() (bpod.events static method)": [[52, "village.pybpodapi.bpod.Bpod.Events.is_state_timer", false]], "is_state_timer() (bpodbase.events static method)": [[54, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.is_state_timer", false]], "is_state_timer() (bpodcomprotocol.events static method)": [[56, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.is_state_timer", false]], "is_state_timer() (bpodcomprotocolmodules.events static method)": [[58, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.is_state_timer", false]], "is_state_timer() (bpodio.events static method)": [[60, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.is_state_timer", false]], "is_state_timer() (event static method)": [[28, "village.classes.task.Event.is_state_timer", false]], "is_state_timer() (eventname static method)": [[71, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.is_state_timer", false]], "isatty() (stderrbuffer method)": [[138, "village.pybpodapi.com.stderr_buffer.StderrBuffer.isatty", false]], "isatty() (stdoutbuffer method)": [[140, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.isatty", false]], "kill() (softcode method)": [[39, "village.devices.bpod.Softcode.kill", false]], "load_message() (bpodmodule method)": [[89, "village.pybpodapi.bpod_modules.bpod_module.BpodModule.load_message", false]], "load_serial_message (sendmessageheader attribute)": [[136, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.LOAD_SERIAL_MESSAGE", false]], "load_serial_message() (bpod method)": [[52, "village.pybpodapi.bpod.Bpod.load_serial_message", false]], "load_serial_message() (bpodbase method)": [[54, "village.pybpodapi.bpod.bpod_base.BpodBase.load_serial_message", false]], "load_serial_message() (bpodcomprotocol method)": [[56, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.load_serial_message", false]], "load_serial_message() (bpodcomprotocolmodules method)": [[58, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.load_serial_message", false]], "load_serial_message() (bpodio method)": [[60, "village.pybpodapi.bpod.bpod_io.BpodIO.load_serial_message", false]], "load_serial_message_ok (receivemessageheader attribute)": [[134, "village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader.LOAD_SERIAL_MESSAGE_OK", false]], "log (class in village.log)": [[49, "village.log.Log", false]], "loop_handler() (bpod method)": [[52, "village.pybpodapi.bpod.Bpod.loop_handler", false]], "loop_handler() (bpodbase method)": [[54, "village.pybpodapi.bpod.bpod_base.BpodBase.loop_handler", false]], "loop_handler() (bpodcomprotocol method)": [[56, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.loop_handler", false]], "loop_handler() (bpodcomprotocolmodules method)": [[58, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.loop_handler", false]], "loop_handler() (bpodio method)": [[60, "village.pybpodapi.bpod.bpod_io.BpodIO.loop_handler", false]], "manual_override() (bpod method)": [[52, "village.pybpodapi.bpod.Bpod.manual_override", false]], "manual_override() (bpodcomprotocol method)": [[56, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.manual_override", false]], "manual_override() (bpodcomprotocolmodules method)": [[58, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.manual_override", false]], "manual_override() (bpodio method)": [[60, "village.pybpodapi.bpod.bpod_io.BpodIO.manual_override", false]], "manual_override_exec_event (sendmessageheader attribute)": [[136, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.MANUAL_OVERRIDE_EXEC_EVENT", false]], "messageparser (class in village.pybpodapi.com.messaging.parser)": [[111, "village.pybpodapi.com.messaging.parser.MessageParser", false]], "module": [[1, "module-village.classes", false], [2, "module-village.classes.collection", false], [4, "module-village.classes.enums", false], [15, "module-village.classes.protocols", false], [22, "module-village.classes.settings_class", false], [25, "module-village.classes.subject", false], [27, "module-village.classes.task", false], [32, "module-village.classes.training", false], [36, "module-village.devices", false], [37, "module-village.devices.bpod", false], [41, "module-village.devices.scale", false], [44, "module-village.devices.temp_sensor", false], [47, "module-village.gui", false], [48, "module-village.log", false], [50, "module-village.pybpodapi", false], [51, "module-village.pybpodapi.bpod", false], [53, "module-village.pybpodapi.bpod.bpod_base", false], [55, "module-village.pybpodapi.bpod.bpod_com_protocol", false], [57, "module-village.pybpodapi.bpod.bpod_com_protocol_modules", false], [59, "module-village.pybpodapi.bpod.bpod_io", false], [61, "module-village.pybpodapi.bpod.hardware", false], [62, "module-village.pybpodapi.bpod.hardware.channels", false], [67, "module-village.pybpodapi.bpod.hardware.events", false], [68, "module-village.pybpodapi.bpod.hardware.events.base_eventname", false], [70, "module-village.pybpodapi.bpod.hardware.events.bpod_events", false], [72, "module-village.pybpodapi.bpod.hardware.hardware", false], [74, "module-village.pybpodapi.bpod.hardware.input_channels", false], [75, "module-village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels", false], [77, "module-village.pybpodapi.bpod.hardware.output_channels", false], [78, "module-village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels", false], [80, "module-village.pybpodapi.bpod.non_blockingsocketreceive", false], [83, "module-village.pybpodapi.bpod.non_blockingstreamreader", false], [86, "module-village.pybpodapi.bpod.settings", false], [87, "module-village.pybpodapi.bpod_modules", false], [88, "module-village.pybpodapi.bpod_modules.bpod_module", false], [90, "module-village.pybpodapi.bpod_modules.bpod_modules", false], [92, "module-village.pybpodapi.com", false], [93, "module-village.pybpodapi.com.arcom", false], [97, "module-village.pybpodapi.com.messaging", false], [98, "module-village.pybpodapi.com.messaging.base_message", false], [100, "module-village.pybpodapi.com.messaging.debug", false], [102, "module-village.pybpodapi.com.messaging.end_trial", false], [104, "module-village.pybpodapi.com.messaging.error", false], [106, "module-village.pybpodapi.com.messaging.event_occurrence", false], [108, "module-village.pybpodapi.com.messaging.event_resume", false], [110, "module-village.pybpodapi.com.messaging.parser", false], [112, "module-village.pybpodapi.com.messaging.session_info", false], [114, "module-village.pybpodapi.com.messaging.softcode_occurrence", false], [116, "module-village.pybpodapi.com.messaging.state_occurrence", false], [118, "module-village.pybpodapi.com.messaging.state_transition", false], [120, "module-village.pybpodapi.com.messaging.stderr", false], [122, "module-village.pybpodapi.com.messaging.stdout", false], [124, "module-village.pybpodapi.com.messaging.trial", false], [126, "module-village.pybpodapi.com.messaging.untagged_message", false], [128, "module-village.pybpodapi.com.messaging.value", false], [130, "module-village.pybpodapi.com.messaging.warning", false], [132, "module-village.pybpodapi.com.protocol", false], [133, "module-village.pybpodapi.com.protocol.recv_msg_headers", false], [135, "module-village.pybpodapi.com.protocol.send_msg_headers", false], [137, "module-village.pybpodapi.com.stderr_buffer", false], [139, "module-village.pybpodapi.com.stdout_buffer", false], [141, "module-village.pybpodapi.exceptions", false], [142, "module-village.pybpodapi.exceptions.bpod_error", false], [144, "module-village.pybpodapi.protocol", false], [145, "module-village.pybpodapi.session", false], [148, "module-village.pybpodapi.state_machine", false], [150, "module-village.pybpodapi.state_machine.conditions", false], [152, "module-village.pybpodapi.state_machine.global_counters", false], [154, "module-village.pybpodapi.state_machine.global_timers", false], [156, "module-village.pybpodapi.state_machine.state_machine_base", false], [159, "module-village.pybpodapi.state_machine.state_machine_builder", false], [162, "module-village.pybpodapi.state_machine.state_machine_runner", false], [165, "module-village.pybpodapi.utils", false], [166, "module-village.pybpodapi.utils.csv", false], [169, "module-village.pybpodapi.utils.date_parser", false], [171, "module-village.rt_plots", false], [173, "module-village.screen", false], [174, "module-village.screen.behaviour_window", false], [176, "module-village.time_utils", false], [178, "module-village.video", false]], "module_event_names (receivemessageheader attribute)": [[134, "village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader.MODULE_EVENT_NAMES", false]], "module_requested_event (receivemessageheader attribute)": [[134, "village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader.MODULE_REQUESTED_EVENT", false]], "new_state_matrix (sendmessageheader attribute)": [[136, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.NEW_STATE_MATRIX", false]], "newlines (stderrbuffer attribute)": [[138, "village.pybpodapi.com.stderr_buffer.StderrBuffer.newlines", false]], "newlines (stdoutbuffer attribute)": [[140, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.newlines", false]], "nonblockingsocketreceive (class in village.pybpodapi.bpod.non_blockingsocketreceive)": [[81, "village.pybpodapi.bpod.non_blockingsocketreceive.NonBlockingSocketReceive", false]], "nonblockingstreamreader (class in village.pybpodapi.bpod.non_blockingstreamreader)": [[84, "village.pybpodapi.bpod.non_blockingstreamreader.NonBlockingStreamReader", false]], "open() (arcom method)": [[94, "village.pybpodapi.com.arcom.ArCOM.open", false]], "open() (bpod method)": [[52, "village.pybpodapi.bpod.Bpod.open", false]], "open() (bpodbase method)": [[54, "village.pybpodapi.bpod.bpod_base.BpodBase.open", false]], "open() (bpodcomprotocol method)": [[56, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.open", false]], "open() (bpodcomprotocolmodules method)": [[58, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.open", false]], "open() (bpodio method)": [[60, "village.pybpodapi.bpod.bpod_io.BpodIO.open", false]], "output (bpod.channeltypes attribute)": [[52, "village.pybpodapi.bpod.Bpod.ChannelTypes.OUTPUT", false]], "output (bpodbase.channeltypes attribute)": [[54, "village.pybpodapi.bpod.bpod_base.BpodBase.ChannelTypes.OUTPUT", false]], "output (bpodcomprotocol.channeltypes attribute)": [[56, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.ChannelTypes.OUTPUT", false]], "output (bpodcomprotocolmodules.channeltypes attribute)": [[58, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.ChannelTypes.OUTPUT", false]], "output (bpodio.channeltypes attribute)": [[60, "village.pybpodapi.bpod.bpod_io.BpodIO.ChannelTypes.OUTPUT", false]], "output (channeltype attribute)": [[64, "village.pybpodapi.bpod.hardware.channels.ChannelType.OUTPUT", false]], "output (class in village.classes.task)": [[29, "village.classes.task.Output", false]], "outputchannel (class in village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels)": [[79, "village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.OutputChannel", false]], "override_digital_hw_state (sendmessageheader attribute)": [[136, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.OVERRIDE_DIGITAL_HW_STATE", false]], "pa1_port1in (bpod.events attribute)": [[52, "village.pybpodapi.bpod.Bpod.Events.PA1_Port1In", false]], "pa1_port1in (bpodbase.events attribute)": [[54, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.PA1_Port1In", false]], "pa1_port1in (bpodcomprotocol.events attribute)": [[56, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.PA1_Port1In", false]], "pa1_port1in (bpodcomprotocolmodules.events attribute)": [[58, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.PA1_Port1In", false]], "pa1_port1in (bpodio.events attribute)": [[60, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.PA1_Port1In", false]], "pa1_port1in (event attribute)": [[28, "village.classes.task.Event.PA1_Port1In", false]], "pa1_port1in (eventname attribute)": [[71, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.PA1_Port1In", false]], "parse() (in module village.pybpodapi.utils.date_parser)": [[170, "village.pybpodapi.utils.date_parser.parse", false]], "port1 (inputname attribute)": [[76, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Port1", false]], "port1in (bpod.events attribute)": [[52, "village.pybpodapi.bpod.Bpod.Events.Port1In", false]], "port1in (bpodbase.events attribute)": [[54, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.Port1In", false]], "port1in (bpodcomprotocol.events attribute)": [[56, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.Port1In", false]], "port1in (bpodcomprotocolmodules.events attribute)": [[58, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.Port1In", false]], "port1in (bpodio.events attribute)": [[60, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.Port1In", false]], "port1in (event attribute)": [[28, "village.classes.task.Event.Port1In", false]], "port1in (eventname attribute)": [[71, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.Port1In", false]], "port2 (inputname attribute)": [[76, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Port2", false]], "port3 (inputname attribute)": [[76, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Port3", false]], "port4 (inputname attribute)": [[76, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Port4", false]], "port5 (inputname attribute)": [[76, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Port5", false]], "port6 (inputname attribute)": [[76, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Port6", false]], "port7 (inputname attribute)": [[76, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Port7", false]], "port8 (inputname attribute)": [[76, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Port8", false]], "pwm (bpod.channelnames attribute)": [[52, "village.pybpodapi.bpod.Bpod.ChannelNames.PWM", false]], "pwm (bpodbase.channelnames attribute)": [[54, "village.pybpodapi.bpod.bpod_base.BpodBase.ChannelNames.PWM", false]], "pwm (bpodcomprotocol.channelnames attribute)": [[56, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.ChannelNames.PWM", false]], "pwm (bpodcomprotocolmodules.channelnames attribute)": [[58, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.ChannelNames.PWM", false]], "pwm (bpodio.channelnames attribute)": [[60, "village.pybpodapi.bpod.bpod_io.BpodIO.ChannelNames.PWM", false]], "pwm (channelname attribute)": [[63, "village.pybpodapi.bpod.hardware.channels.ChannelName.PWM", false]], "pybpod (class in village.devices.bpod)": [[38, "village.devices.bpod.PyBpod", false]], "pybpodprotocol (class in village.classes.protocols)": [[18, "village.classes.protocols.PyBpodProtocol", false]], "read() (stderrbuffer method)": [[138, "village.pybpodapi.com.stderr_buffer.StderrBuffer.read", false]], "read() (stdoutbuffer method)": [[140, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.read", false]], "readable() (stderrbuffer method)": [[138, "village.pybpodapi.com.stderr_buffer.StderrBuffer.readable", false]], "readable() (stdoutbuffer method)": [[140, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.readable", false]], "reader (class in village.pybpodapi.utils.csv)": [[167, "village.pybpodapi.utils.csv.Reader", false]], "readline() (stderrbuffer method)": [[138, "village.pybpodapi.com.stderr_buffer.StderrBuffer.readline", false]], "readline() (stdoutbuffer method)": [[140, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.readline", false]], "readlines() (stderrbuffer method)": [[138, "village.pybpodapi.com.stderr_buffer.StderrBuffer.readlines", false]], "readlines() (stdoutbuffer method)": [[140, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.readlines", false]], "receivemessageheader (class in village.pybpodapi.com.protocol.recv_msg_headers)": [[134, "village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader", false]], "reset_clock (sendmessageheader attribute)": [[136, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.RESET_CLOCK", false]], "reset_serial_messages (receivemessageheader attribute)": [[134, "village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader.RESET_SERIAL_MESSAGES", false]], "reset_serial_messages (sendmessageheader attribute)": [[136, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.RESET_SERIAL_MESSAGES", false]], "reset_serial_messages() (bpod method)": [[52, "village.pybpodapi.bpod.Bpod.reset_serial_messages", false]], "reset_serial_messages() (bpodbase method)": [[54, "village.pybpodapi.bpod.bpod_base.BpodBase.reset_serial_messages", false]], "reset_serial_messages() (bpodcomprotocol method)": [[56, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.reset_serial_messages", false]], "reset_serial_messages() (bpodcomprotocolmodules method)": [[58, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.reset_serial_messages", false]], "reset_serial_messages() (bpodio method)": [[60, "village.pybpodapi.bpod.bpod_io.BpodIO.reset_serial_messages", false]], "rtplots (class in village.rt_plots)": [[172, "village.rt_plots.RTPlots", false]], "run_state_machine (sendmessageheader attribute)": [[136, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.RUN_STATE_MACHINE", false]], "run_state_machine() (bpod method)": [[52, "village.pybpodapi.bpod.Bpod.run_state_machine", false]], "run_state_machine() (bpodbase method)": [[54, "village.pybpodapi.bpod.bpod_base.BpodBase.run_state_machine", false]], "run_state_machine() (bpodcomprotocol method)": [[56, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.run_state_machine", false]], "run_state_machine() (bpodcomprotocolmodules method)": [[58, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.run_state_machine", false]], "run_state_machine() (bpodio method)": [[60, "village.pybpodapi.bpod.bpod_io.BpodIO.run_state_machine", false]], "scale (class in village.devices.scale)": [[42, "village.devices.scale.Scale", false]], "scaleprotocol (class in village.classes.protocols)": [[19, "village.classes.protocols.ScaleProtocol", false]], "screenactive (class in village.classes.enums)": [[12, "village.classes.enums.ScreenActive", false]], "seek() (stderrbuffer method)": [[138, "village.pybpodapi.com.stderr_buffer.StderrBuffer.seek", false]], "seek() (stdoutbuffer method)": [[140, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.seek", false]], "seekable() (stderrbuffer method)": [[138, "village.pybpodapi.com.stderr_buffer.StderrBuffer.seekable", false]], "seekable() (stdoutbuffer method)": [[140, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.seekable", false]], "send() (softcode method)": [[39, "village.devices.bpod.Softcode.send", false]], "send_state_machine() (bpod method)": [[52, "village.pybpodapi.bpod.Bpod.send_state_machine", false]], "send_state_machine() (bpodbase method)": [[54, "village.pybpodapi.bpod.bpod_base.BpodBase.send_state_machine", false]], "send_state_machine() (bpodcomprotocol method)": [[56, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.send_state_machine", false]], "send_state_machine() (bpodcomprotocolmodules method)": [[58, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.send_state_machine", false]], "send_state_machine() (bpodio method)": [[60, "village.pybpodapi.bpod.bpod_io.BpodIO.send_state_machine", false]], "send_to_hw_serial (sendmessageheader attribute)": [[136, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.SEND_TO_HW_SERIAL", false]], "sendmessageheader (class in village.pybpodapi.com.protocol.send_msg_headers)": [[136, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader", false]], "serial (bpod.channelnames attribute)": [[52, "village.pybpodapi.bpod.Bpod.ChannelNames.SERIAL", false]], "serial (bpodbase.channelnames attribute)": [[54, "village.pybpodapi.bpod.bpod_base.BpodBase.ChannelNames.SERIAL", false]], "serial (bpodcomprotocol.channelnames attribute)": [[56, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.ChannelNames.SERIAL", false]], "serial (bpodcomprotocolmodules.channelnames attribute)": [[58, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.ChannelNames.SERIAL", false]], "serial (bpodio.channelnames attribute)": [[60, "village.pybpodapi.bpod.bpod_io.BpodIO.ChannelNames.SERIAL", false]], "serial (channelname attribute)": [[63, "village.pybpodapi.bpod.hardware.channels.ChannelName.SERIAL", false]], "serial1 (bpod.outputchannels attribute)": [[52, "village.pybpodapi.bpod.Bpod.OutputChannels.Serial1", false]], "serial1 (bpodbase.outputchannels attribute)": [[54, "village.pybpodapi.bpod.bpod_base.BpodBase.OutputChannels.Serial1", false]], "serial1 (bpodcomprotocol.outputchannels attribute)": [[56, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.OutputChannels.Serial1", false]], "serial1 (bpodcomprotocolmodules.outputchannels attribute)": [[58, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.OutputChannels.Serial1", false]], "serial1 (bpodio.outputchannels attribute)": [[60, "village.pybpodapi.bpod.bpod_io.BpodIO.OutputChannels.Serial1", false]], "serial1 (inputname attribute)": [[76, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Serial1", false]], "serial1 (output attribute)": [[29, "village.classes.task.Output.Serial1", false]], "serial1 (outputchannel attribute)": [[79, "village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.OutputChannel.Serial1", false]], "serial2 (inputname attribute)": [[76, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Serial2", false]], "serial3 (inputname attribute)": [[76, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Serial3", false]], "session (class in village.pybpodapi.session)": [[146, "village.pybpodapi.session.Session", false]], "sessioninfo (class in village.pybpodapi.com.messaging.session_info)": [[113, "village.pybpodapi.com.messaging.session_info.SessionInfo", false]], "set_condition() (statemachine method)": [[149, "village.pybpodapi.state_machine.StateMachine.set_condition", false]], "set_condition() (statemachinebase method)": [[158, "village.pybpodapi.state_machine.state_machine_base.StateMachineBase.set_condition", false]], "set_condition() (statemachinebuilder method)": [[160, "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder.set_condition", false]], "set_condition() (statemachinerunner method)": [[163, "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner.set_condition", false]], "set_global_counter() (statemachine method)": [[149, "village.pybpodapi.state_machine.StateMachine.set_global_counter", false]], "set_global_counter() (statemachinebase method)": [[158, "village.pybpodapi.state_machine.state_machine_base.StateMachineBase.set_global_counter", false]], "set_global_counter() (statemachinebuilder method)": [[160, "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder.set_global_counter", false]], "set_global_counter() (statemachinerunner method)": [[163, "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner.set_global_counter", false]], "set_global_timer() (statemachine method)": [[149, "village.pybpodapi.state_machine.StateMachine.set_global_timer", false]], "set_global_timer() (statemachinebase method)": [[158, "village.pybpodapi.state_machine.state_machine_base.StateMachineBase.set_global_timer", false]], "set_global_timer() (statemachinebuilder method)": [[160, "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder.set_global_timer", false]], "set_global_timer() (statemachinerunner method)": [[163, "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner.set_global_timer", false]], "set_global_timer_legacy() (statemachine method)": [[149, "village.pybpodapi.state_machine.StateMachine.set_global_timer_legacy", false]], "set_global_timer_legacy() (statemachinebase method)": [[158, "village.pybpodapi.state_machine.state_machine_base.StateMachineBase.set_global_timer_legacy", false]], "set_global_timer_legacy() (statemachinebuilder method)": [[160, "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder.set_global_timer_legacy", false]], "set_global_timer_legacy() (statemachinerunner method)": [[163, "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner.set_global_timer_legacy", false]], "set_module_relay (sendmessageheader attribute)": [[136, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.SET_MODULE_RELAY", false]], "setting (class in village.classes.settings_class)": [[23, "village.classes.settings_class.Setting", false]], "settings (class in village.classes.settings_class)": [[24, "village.classes.settings_class.Settings", false]], "settings (class in village.classes.training)": [[33, "village.classes.training.Settings", false]], "setup() (hardware method)": [[73, "village.pybpodapi.bpod.hardware.hardware.Hardware.setup", false]], "setup_input_channels() (channels method)": [[65, "village.pybpodapi.bpod.hardware.channels.Channels.setup_input_channels", false]], "setup_output_channels() (channels method)": [[65, "village.pybpodapi.bpod.hardware.channels.Channels.setup_output_channels", false]], "smaerror": [[157, "village.pybpodapi.state_machine.state_machine_base.SMAError", false]], "softcode (class in village.devices.bpod)": [[39, "village.devices.bpod.Softcode", false]], "softcode1 (bpod.outputchannels attribute)": [[52, "village.pybpodapi.bpod.Bpod.OutputChannels.SoftCode1", false]], "softcode1 (bpodbase.outputchannels attribute)": [[54, "village.pybpodapi.bpod.bpod_base.BpodBase.OutputChannels.SoftCode1", false]], "softcode1 (bpodcomprotocol.outputchannels attribute)": [[56, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.OutputChannels.SoftCode1", false]], "softcode1 (bpodcomprotocolmodules.outputchannels attribute)": [[58, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.OutputChannels.SoftCode1", false]], "softcode1 (bpodio.outputchannels attribute)": [[60, "village.pybpodapi.bpod.bpod_io.BpodIO.OutputChannels.SoftCode1", false]], "softcode1 (output attribute)": [[29, "village.classes.task.Output.SoftCode1", false]], "softcode1 (outputchannel attribute)": [[79, "village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.OutputChannel.SoftCode1", false]], "softcode_handler_function() (bpod method)": [[52, "village.pybpodapi.bpod.Bpod.softcode_handler_function", false]], "softcode_handler_function() (bpodbase method)": [[54, "village.pybpodapi.bpod.bpod_base.BpodBase.softcode_handler_function", false]], "softcode_handler_function() (bpodcomprotocol method)": [[56, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.softcode_handler_function", false]], "softcode_handler_function() (bpodcomprotocolmodules method)": [[58, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.softcode_handler_function", false]], "softcode_handler_function() (bpodio method)": [[60, "village.pybpodapi.bpod.bpod_io.BpodIO.softcode_handler_function", false]], "softcodeoccurrence (class in village.pybpodapi.com.messaging.softcode_occurrence)": [[115, "village.pybpodapi.com.messaging.softcode_occurrence.SoftcodeOccurrence", false]], "state (class in village.classes.enums)": [[13, "village.classes.enums.State", false]], "state_machine_installation_status (receivemessageheader attribute)": [[134, "village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader.STATE_MACHINE_INSTALLATION_STATUS", false]], "statemachine (class in village.pybpodapi.state_machine)": [[149, "village.pybpodapi.state_machine.StateMachine", false]], "statemachinebase (class in village.pybpodapi.state_machine.state_machine_base)": [[158, "village.pybpodapi.state_machine.state_machine_base.StateMachineBase", false]], "statemachinebuilder (class in village.pybpodapi.state_machine.state_machine_builder)": [[160, "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder", false]], "statemachinebuildererror": [[161, "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilderError", false]], "statemachinerunner (class in village.pybpodapi.state_machine.state_machine_runner)": [[163, "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner", false]], "statemachinerunnererror": [[164, "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunnerError", false]], "stateoccurrence (class in village.pybpodapi.com.messaging.state_occurrence)": [[117, "village.pybpodapi.com.messaging.state_occurrence.StateOccurrence", false]], "statetransition (class in village.pybpodapi.com.messaging.state_transition)": [[119, "village.pybpodapi.com.messaging.state_transition.StateTransition", false]], "stderrbuffer (class in village.pybpodapi.com.stderr_buffer)": [[138, "village.pybpodapi.com.stderr_buffer.StderrBuffer", false]], "stderrmessage (class in village.pybpodapi.com.messaging.stderr)": [[121, "village.pybpodapi.com.messaging.stderr.StderrMessage", false]], "stdoutbuffer (class in village.pybpodapi.com.stdout_buffer)": [[140, "village.pybpodapi.com.stdout_buffer.StdoutBuffer", false]], "stdoutmessage (class in village.pybpodapi.com.messaging.stdout)": [[123, "village.pybpodapi.com.messaging.stdout.StdoutMessage", false]], "streamswrapper (class in village.pybpodapi.session)": [[147, "village.pybpodapi.session.StreamsWrapper", false]], "subject (class in village.classes.subject)": [[26, "village.classes.subject.Subject", false]], "superenum (class in village.classes.enums)": [[14, "village.classes.enums.SuperEnum", false]], "sync_channel_mode (sendmessageheader attribute)": [[136, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.SYNC_CHANNEL_MODE", false]], "sync_channel_mode_ok (receivemessageheader attribute)": [[134, "village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader.SYNC_CHANNEL_MODE_OK", false]], "task (class in village.classes.task)": [[30, "village.classes.task.Task", false]], "taskerror": [[31, "village.classes.task.TaskError", false]], "telegrambotprotocol (class in village.classes.protocols)": [[20, "village.classes.protocols.TelegramBotProtocol", false]], "tell() (stderrbuffer method)": [[138, "village.pybpodapi.com.stderr_buffer.StderrBuffer.tell", false]], "tell() (stdoutbuffer method)": [[140, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.tell", false]], "tempsensor (class in village.devices.temp_sensor)": [[45, "village.devices.temp_sensor.TempSensor", false]], "tempsensorprotocol (class in village.classes.protocols)": [[21, "village.classes.protocols.TempSensorProtocol", false]], "timeutils (class in village.time_utils)": [[177, "village.time_utils.TimeUtils", false]], "training (class in village.classes.training)": [[34, "village.classes.training.Training", false]], "trainingerror": [[35, "village.classes.training.TrainingError", false]], "trial (class in village.pybpodapi.com.messaging.trial)": [[125, "village.pybpodapi.com.messaging.trial.Trial", false]], "trigger_softcode (sendmessageheader attribute)": [[136, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.TRIGGER_SOFTCODE", false]], "truncate() (stderrbuffer method)": [[138, "village.pybpodapi.com.stderr_buffer.StderrBuffer.truncate", false]], "truncate() (stdoutbuffer method)": [[140, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.truncate", false]], "tup (bpod.events attribute)": [[52, "village.pybpodapi.bpod.Bpod.Events.Tup", false]], "tup (bpodbase.events attribute)": [[54, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.Tup", false]], "tup (bpodcomprotocol.events attribute)": [[56, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.Tup", false]], "tup (bpodcomprotocolmodules.events attribute)": [[58, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.Tup", false]], "tup (bpodio.events attribute)": [[60, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.Tup", false]], "tup (event attribute)": [[28, "village.classes.task.Event.Tup", false]], "tup (eventname attribute)": [[71, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.Tup", false]], "unexpectedendofstream": [[82, "village.pybpodapi.bpod.non_blockingsocketreceive.UnexpectedEndOfStream", false], [85, "village.pybpodapi.bpod.non_blockingstreamreader.UnexpectedEndOfStream", false]], "untaggedmessage (class in village.pybpodapi.com.messaging.untagged_message)": [[127, "village.pybpodapi.com.messaging.untagged_message.UntaggedMessage", false]], "update_state_numbers() (statemachine method)": [[149, "village.pybpodapi.state_machine.StateMachine.update_state_numbers", false]], "update_state_numbers() (statemachinebuilder method)": [[160, "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder.update_state_numbers", false]], "update_state_numbers() (statemachinerunner method)": [[163, "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner.update_state_numbers", false]], "usb1 (inputname attribute)": [[76, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.USB1", false]], "valuemessage (class in village.pybpodapi.com.messaging.value)": [[129, "village.pybpodapi.com.messaging.value.ValueMessage", false]], "valve (bpod.channelnames attribute)": [[52, "village.pybpodapi.bpod.Bpod.ChannelNames.VALVE", false]], "valve (bpod.outputchannels attribute)": [[52, "village.pybpodapi.bpod.Bpod.OutputChannels.Valve", false]], "valve (bpodbase.channelnames attribute)": [[54, "village.pybpodapi.bpod.bpod_base.BpodBase.ChannelNames.VALVE", false]], "valve (bpodbase.outputchannels attribute)": [[54, "village.pybpodapi.bpod.bpod_base.BpodBase.OutputChannels.Valve", false]], "valve (bpodcomprotocol.channelnames attribute)": [[56, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.ChannelNames.VALVE", false]], "valve (bpodcomprotocol.outputchannels attribute)": [[56, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.OutputChannels.Valve", false]], "valve (bpodcomprotocolmodules.channelnames attribute)": [[58, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.ChannelNames.VALVE", false]], "valve (bpodcomprotocolmodules.outputchannels attribute)": [[58, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.OutputChannels.Valve", false]], "valve (bpodio.channelnames attribute)": [[60, "village.pybpodapi.bpod.bpod_io.BpodIO.ChannelNames.VALVE", false]], "valve (bpodio.outputchannels attribute)": [[60, "village.pybpodapi.bpod.bpod_io.BpodIO.OutputChannels.Valve", false]], "valve (channelname attribute)": [[63, "village.pybpodapi.bpod.hardware.channels.ChannelName.VALVE", false]], "valve (output attribute)": [[29, "village.classes.task.Output.Valve", false]], "valve (outputchannel attribute)": [[79, "village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.OutputChannel.Valve", false]], "village.classes": [[1, "module-village.classes", false]], "village.classes.collection": [[2, "module-village.classes.collection", false]], "village.classes.enums": [[4, "module-village.classes.enums", false]], "village.classes.protocols": [[15, "module-village.classes.protocols", false]], "village.classes.settings_class": [[22, "module-village.classes.settings_class", false]], "village.classes.subject": [[25, "module-village.classes.subject", false]], "village.classes.task": [[27, "module-village.classes.task", false]], "village.classes.training": [[32, "module-village.classes.training", false]], "village.devices": [[36, "module-village.devices", false]], "village.devices.bpod": [[37, "module-village.devices.bpod", false]], "village.devices.scale": [[41, "module-village.devices.scale", false]], "village.devices.temp_sensor": [[44, "module-village.devices.temp_sensor", false]], "village.gui": [[47, "module-village.gui", false]], "village.log": [[48, "module-village.log", false]], "village.pybpodapi": [[50, "module-village.pybpodapi", false]], "village.pybpodapi.bpod": [[51, "module-village.pybpodapi.bpod", false]], "village.pybpodapi.bpod.bpod_base": [[53, "module-village.pybpodapi.bpod.bpod_base", false]], "village.pybpodapi.bpod.bpod_com_protocol": [[55, "module-village.pybpodapi.bpod.bpod_com_protocol", false]], "village.pybpodapi.bpod.bpod_com_protocol_modules": [[57, "module-village.pybpodapi.bpod.bpod_com_protocol_modules", false]], "village.pybpodapi.bpod.bpod_io": [[59, "module-village.pybpodapi.bpod.bpod_io", false]], "village.pybpodapi.bpod.hardware": [[61, "module-village.pybpodapi.bpod.hardware", false]], "village.pybpodapi.bpod.hardware.channels": [[62, "module-village.pybpodapi.bpod.hardware.channels", false]], "village.pybpodapi.bpod.hardware.events": [[67, "module-village.pybpodapi.bpod.hardware.events", false]], "village.pybpodapi.bpod.hardware.events.base_eventname": [[68, "module-village.pybpodapi.bpod.hardware.events.base_eventname", false]], "village.pybpodapi.bpod.hardware.events.bpod_events": [[70, "module-village.pybpodapi.bpod.hardware.events.bpod_events", false]], "village.pybpodapi.bpod.hardware.hardware": [[72, "module-village.pybpodapi.bpod.hardware.hardware", false]], "village.pybpodapi.bpod.hardware.input_channels": [[74, "module-village.pybpodapi.bpod.hardware.input_channels", false]], "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels": [[75, "module-village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels", false]], "village.pybpodapi.bpod.hardware.output_channels": [[77, "module-village.pybpodapi.bpod.hardware.output_channels", false]], "village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels": [[78, "module-village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels", false]], "village.pybpodapi.bpod.non_blockingsocketreceive": [[80, "module-village.pybpodapi.bpod.non_blockingsocketreceive", false]], "village.pybpodapi.bpod.non_blockingstreamreader": [[83, "module-village.pybpodapi.bpod.non_blockingstreamreader", false]], "village.pybpodapi.bpod.settings": [[86, "module-village.pybpodapi.bpod.settings", false]], "village.pybpodapi.bpod_modules": [[87, "module-village.pybpodapi.bpod_modules", false]], "village.pybpodapi.bpod_modules.bpod_module": [[88, "module-village.pybpodapi.bpod_modules.bpod_module", false]], "village.pybpodapi.bpod_modules.bpod_modules": [[90, "module-village.pybpodapi.bpod_modules.bpod_modules", false]], "village.pybpodapi.com": [[92, "module-village.pybpodapi.com", false]], "village.pybpodapi.com.arcom": [[93, "module-village.pybpodapi.com.arcom", false]], "village.pybpodapi.com.messaging": [[97, "module-village.pybpodapi.com.messaging", false]], "village.pybpodapi.com.messaging.base_message": [[98, "module-village.pybpodapi.com.messaging.base_message", false]], "village.pybpodapi.com.messaging.debug": [[100, "module-village.pybpodapi.com.messaging.debug", false]], "village.pybpodapi.com.messaging.end_trial": [[102, "module-village.pybpodapi.com.messaging.end_trial", false]], "village.pybpodapi.com.messaging.error": [[104, "module-village.pybpodapi.com.messaging.error", false]], "village.pybpodapi.com.messaging.event_occurrence": [[106, "module-village.pybpodapi.com.messaging.event_occurrence", false]], "village.pybpodapi.com.messaging.event_resume": [[108, "module-village.pybpodapi.com.messaging.event_resume", false]], "village.pybpodapi.com.messaging.parser": [[110, "module-village.pybpodapi.com.messaging.parser", false]], "village.pybpodapi.com.messaging.session_info": [[112, "module-village.pybpodapi.com.messaging.session_info", false]], "village.pybpodapi.com.messaging.softcode_occurrence": [[114, "module-village.pybpodapi.com.messaging.softcode_occurrence", false]], "village.pybpodapi.com.messaging.state_occurrence": [[116, "module-village.pybpodapi.com.messaging.state_occurrence", false]], "village.pybpodapi.com.messaging.state_transition": [[118, "module-village.pybpodapi.com.messaging.state_transition", false]], "village.pybpodapi.com.messaging.stderr": [[120, "module-village.pybpodapi.com.messaging.stderr", false]], "village.pybpodapi.com.messaging.stdout": [[122, "module-village.pybpodapi.com.messaging.stdout", false]], "village.pybpodapi.com.messaging.trial": [[124, "module-village.pybpodapi.com.messaging.trial", false]], "village.pybpodapi.com.messaging.untagged_message": [[126, "module-village.pybpodapi.com.messaging.untagged_message", false]], "village.pybpodapi.com.messaging.value": [[128, "module-village.pybpodapi.com.messaging.value", false]], "village.pybpodapi.com.messaging.warning": [[130, "module-village.pybpodapi.com.messaging.warning", false]], "village.pybpodapi.com.protocol": [[132, "module-village.pybpodapi.com.protocol", false]], "village.pybpodapi.com.protocol.recv_msg_headers": [[133, "module-village.pybpodapi.com.protocol.recv_msg_headers", false]], "village.pybpodapi.com.protocol.send_msg_headers": [[135, "module-village.pybpodapi.com.protocol.send_msg_headers", false]], "village.pybpodapi.com.stderr_buffer": [[137, "module-village.pybpodapi.com.stderr_buffer", false]], "village.pybpodapi.com.stdout_buffer": [[139, "module-village.pybpodapi.com.stdout_buffer", false]], "village.pybpodapi.exceptions": [[141, "module-village.pybpodapi.exceptions", false]], "village.pybpodapi.exceptions.bpod_error": [[142, "module-village.pybpodapi.exceptions.bpod_error", false]], "village.pybpodapi.protocol": [[144, "module-village.pybpodapi.protocol", false]], "village.pybpodapi.session": [[145, "module-village.pybpodapi.session", false]], "village.pybpodapi.state_machine": [[148, "module-village.pybpodapi.state_machine", false]], "village.pybpodapi.state_machine.conditions": [[150, "module-village.pybpodapi.state_machine.conditions", false]], "village.pybpodapi.state_machine.global_counters": [[152, "module-village.pybpodapi.state_machine.global_counters", false]], "village.pybpodapi.state_machine.global_timers": [[154, "module-village.pybpodapi.state_machine.global_timers", false]], "village.pybpodapi.state_machine.state_machine_base": [[156, "module-village.pybpodapi.state_machine.state_machine_base", false]], "village.pybpodapi.state_machine.state_machine_builder": [[159, "module-village.pybpodapi.state_machine.state_machine_builder", false]], "village.pybpodapi.state_machine.state_machine_runner": [[162, "module-village.pybpodapi.state_machine.state_machine_runner", false]], "village.pybpodapi.utils": [[165, "module-village.pybpodapi.utils", false]], "village.pybpodapi.utils.csv": [[166, "module-village.pybpodapi.utils.csv", false]], "village.pybpodapi.utils.date_parser": [[169, "module-village.pybpodapi.utils.date_parser", false]], "village.rt_plots": [[171, "module-village.rt_plots", false]], "village.screen": [[173, "module-village.screen", false]], "village.screen.behaviour_window": [[174, "module-village.screen.behaviour_window", false]], "village.time_utils": [[176, "module-village.time_utils", false]], "village.video": [[178, "module-village.video", false]], "warningmessage (class in village.pybpodapi.com.messaging.warning)": [[131, "village.pybpodapi.com.messaging.warning.WarningMessage", false]], "wire (bpod.channelnames attribute)": [[52, "village.pybpodapi.bpod.Bpod.ChannelNames.WIRE", false]], "wire (bpodbase.channelnames attribute)": [[54, "village.pybpodapi.bpod.bpod_base.BpodBase.ChannelNames.WIRE", false]], "wire (bpodcomprotocol.channelnames attribute)": [[56, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.ChannelNames.WIRE", false]], "wire (bpodcomprotocolmodules.channelnames attribute)": [[58, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.ChannelNames.WIRE", false]], "wire (bpodio.channelnames attribute)": [[60, "village.pybpodapi.bpod.bpod_io.BpodIO.ChannelNames.WIRE", false]], "wire (channelname attribute)": [[63, "village.pybpodapi.bpod.hardware.channels.ChannelName.WIRE", false]], "wire1 (inputname attribute)": [[76, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Wire1", false]], "wire1high (bpod.events attribute)": [[52, "village.pybpodapi.bpod.Bpod.Events.Wire1High", false]], "wire1high (bpod.outputchannels attribute)": [[52, "village.pybpodapi.bpod.Bpod.OutputChannels.Wire1High", false]], "wire1high (bpodbase.events attribute)": [[54, "village.pybpodapi.bpod.bpod_base.BpodBase.Events.Wire1High", false]], "wire1high (bpodbase.outputchannels attribute)": [[54, "village.pybpodapi.bpod.bpod_base.BpodBase.OutputChannels.Wire1High", false]], "wire1high (bpodcomprotocol.events attribute)": [[56, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events.Wire1High", false]], "wire1high (bpodcomprotocol.outputchannels attribute)": [[56, "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.OutputChannels.Wire1High", false]], "wire1high (bpodcomprotocolmodules.events attribute)": [[58, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events.Wire1High", false]], "wire1high (bpodcomprotocolmodules.outputchannels attribute)": [[58, "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.OutputChannels.Wire1High", false]], "wire1high (bpodio.events attribute)": [[60, "village.pybpodapi.bpod.bpod_io.BpodIO.Events.Wire1High", false]], "wire1high (bpodio.outputchannels attribute)": [[60, "village.pybpodapi.bpod.bpod_io.BpodIO.OutputChannels.Wire1High", false]], "wire1high (event attribute)": [[28, "village.classes.task.Event.Wire1High", false]], "wire1high (eventname attribute)": [[71, "village.pybpodapi.bpod.hardware.events.bpod_events.EventName.Wire1High", false]], "wire1high (output attribute)": [[29, "village.classes.task.Output.Wire1High", false]], "wire1high (outputchannel attribute)": [[79, "village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.OutputChannel.Wire1High", false]], "wire2 (inputname attribute)": [[76, "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName.Wire2", false]], "writable() (stderrbuffer method)": [[138, "village.pybpodapi.com.stderr_buffer.StderrBuffer.writable", false]], "writable() (stdoutbuffer method)": [[140, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.writable", false]], "write() (stderrbuffer method)": [[138, "village.pybpodapi.com.stderr_buffer.StderrBuffer.write", false]], "write() (stdoutbuffer method)": [[140, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.write", false]], "write_to_module (sendmessageheader attribute)": [[136, "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader.WRITE_TO_MODULE", false]], "writelines() (stderrbuffer method)": [[138, "village.pybpodapi.com.stderr_buffer.StderrBuffer.writelines", false]], "writelines() (stdoutbuffer method)": [[140, "village.pybpodapi.com.stdout_buffer.StdoutBuffer.writelines", false]], "writer (class in village.pybpodapi.utils.csv)": [[168, "village.pybpodapi.utils.csv.Writer", false]]}, "objects": {"village": [[1, 0, 0, "-", "classes"], [36, 0, 0, "-", "devices"], [47, 0, 0, "-", "gui"], [48, 0, 0, "-", "log"], [50, 0, 0, "-", "pybpodapi"], [171, 0, 0, "-", "rt_plots"], [173, 0, 0, "-", "screen"], [176, 0, 0, "-", "time_utils"], [178, 0, 0, "-", "video"]], "village.classes": [[2, 0, 0, "-", "collection"], [4, 0, 0, "-", "enums"], [15, 0, 0, "-", "protocols"], [22, 0, 0, "-", "settings_class"], [25, 0, 0, "-", "subject"], [27, 0, 0, "-", "task"], [32, 0, 0, "-", "training"]], "village.classes.collection": [[3, 1, 1, "", "Collection"]], "village.classes.collection.Collection": [[3, 2, 1, "", "__init__"]], "village.classes.enums": [[5, 1, 1, "", "Actions"], [6, 1, 1, "", "Active"], [7, 1, 1, "", "AreaActive"], [8, 1, 1, "", "Color"], [9, 1, 1, "", "Cycle"], [10, 1, 1, "", "DataTable"], [11, 1, 1, "", "Info"], [12, 1, 1, "", "ScreenActive"], [13, 1, 1, "", "State"], [14, 1, 1, "", "SuperEnum"]], "village.classes.enums.Actions": [[5, 2, 1, "", "__init__"]], "village.classes.enums.Active": [[6, 2, 1, "", "__init__"]], "village.classes.enums.AreaActive": [[7, 2, 1, "", "__init__"]], "village.classes.enums.Color": [[8, 2, 1, "", "__init__"]], "village.classes.enums.Cycle": [[9, 2, 1, "", "__init__"]], "village.classes.enums.DataTable": [[10, 2, 1, "", "__init__"]], "village.classes.enums.Info": [[11, 2, 1, "", "__init__"]], "village.classes.enums.ScreenActive": [[12, 2, 1, "", "__init__"]], "village.classes.enums.State": [[13, 2, 1, "", "__init__"]], "village.classes.enums.SuperEnum": [[14, 2, 1, "", "__init__"]], "village.classes.protocols": [[16, 1, 1, "", "CameraProtocol"], [17, 1, 1, "", "EventProtocol"], [18, 1, 1, "", "PyBpodProtocol"], [19, 1, 1, "", "ScaleProtocol"], [20, 1, 1, "", "TelegramBotProtocol"], [21, 1, 1, "", "TempSensorProtocol"]], "village.classes.protocols.CameraProtocol": [[16, 2, 1, "", "__init__"]], "village.classes.protocols.EventProtocol": [[17, 2, 1, "", "__init__"]], "village.classes.protocols.PyBpodProtocol": [[18, 2, 1, "", "__init__"]], "village.classes.protocols.ScaleProtocol": [[19, 2, 1, "", "__init__"]], "village.classes.protocols.TelegramBotProtocol": [[20, 2, 1, "", "__init__"]], "village.classes.protocols.TempSensorProtocol": [[21, 2, 1, "", "__init__"]], "village.classes.settings_class": [[23, 1, 1, "", "Setting"], [24, 1, 1, "", "Settings"]], "village.classes.settings_class.Setting": [[23, 2, 1, "", "__init__"]], "village.classes.settings_class.Settings": [[24, 2, 1, "", "__init__"], [24, 2, 1, "", "get"], [24, 2, 1, "", "get_description"], [24, 2, 1, "", "get_index"], [24, 2, 1, "", "get_indices"], [24, 2, 1, "", "get_text"], [24, 2, 1, "", "get_type"], [24, 2, 1, "", "get_values"]], "village.classes.subject": [[26, 1, 1, "", "Subject"]], "village.classes.subject.Subject": [[26, 2, 1, "", "__init__"]], "village.classes.task": [[28, 1, 1, "", "Event"], [29, 1, 1, "", "Output"], [30, 1, 1, "", "Task"], [31, 4, 1, "", "TaskError"]], "village.classes.task.Event": [[28, 3, 1, "", "BNC1High"], [28, 3, 1, "", "Condition1"], [28, 3, 1, "", "GlobalCounter1End"], [28, 3, 1, "", "GlobalTimer1End"], [28, 3, 1, "", "GlobalTimer1Start"], [28, 3, 1, "", "PA1_Port1In"], [28, 3, 1, "", "Port1In"], [28, 3, 1, "", "Tup"], [28, 3, 1, "", "Wire1High"], [28, 2, 1, "", "__init__"], [28, 2, 1, "", "is_condition"], [28, 2, 1, "", "is_global_counter_end"], [28, 2, 1, "", "is_global_timer_cancel"], [28, 2, 1, "", "is_global_timer_end"], [28, 2, 1, "", "is_global_timer_start"], [28, 2, 1, "", "is_global_timer_trigger"], [28, 2, 1, "", "is_state_timer"]], "village.classes.task.Output": [[29, 3, 1, "", "BNC1High"], [29, 3, 1, "", "GlobalCounterReset"], [29, 3, 1, "", "GlobalTimer1Cancel"], [29, 3, 1, "", "GlobalTimer1Trig"], [29, 3, 1, "", "Serial1"], [29, 3, 1, "", "SoftCode1"], [29, 3, 1, "", "Valve"], [29, 3, 1, "", "Wire1High"], [29, 2, 1, "", "__init__"]], "village.classes.task.Task": [[30, 2, 1, "", "__init__"]], "village.classes.training": [[33, 1, 1, "", "Settings"], [34, 1, 1, "", "Training"], [35, 4, 1, "", "TrainingError"]], "village.classes.training.Settings": [[33, 2, 1, "", "__init__"]], "village.classes.training.Training": [[34, 2, 1, "", "__init__"]], "village.devices": [[37, 0, 0, "-", "bpod"], [41, 0, 0, "-", "scale"], [44, 0, 0, "-", "temp_sensor"]], "village.devices.bpod": [[38, 1, 1, "", "PyBpod"], [39, 1, 1, "", "Softcode"], [40, 5, 1, "", "get_bpod"]], "village.devices.bpod.PyBpod": [[38, 2, 1, "", "__init__"]], "village.devices.bpod.Softcode": [[39, 2, 1, "", "__init__"], [39, 2, 1, "", "close"], [39, 2, 1, "", "kill"], [39, 2, 1, "", "send"]], "village.devices.scale": [[42, 1, 1, "", "Scale"], [43, 5, 1, "", "get_scale"]], "village.devices.scale.Scale": [[42, 2, 1, "", "__init__"]], "village.devices.temp_sensor": [[45, 1, 1, "", "TempSensor"], [46, 5, 1, "", "get_temp_sensor"]], "village.devices.temp_sensor.TempSensor": [[45, 2, 1, "", "__init__"]], "village.log": [[49, 1, 1, "", "Log"]], "village.log.Log": [[49, 2, 1, "", "__init__"]], "village.pybpodapi": [[51, 0, 0, "-", "bpod"], [87, 0, 0, "-", "bpod_modules"], [92, 0, 0, "-", "com"], [141, 0, 0, "-", "exceptions"], [144, 0, 0, "-", "protocol"], [145, 0, 0, "-", "session"], [148, 0, 0, "-", "state_machine"], [165, 0, 0, "-", "utils"]], "village.pybpodapi.bpod": [[52, 1, 1, "", "Bpod"], [53, 0, 0, "-", "bpod_base"], [55, 0, 0, "-", "bpod_com_protocol"], [57, 0, 0, "-", "bpod_com_protocol_modules"], [59, 0, 0, "-", "bpod_io"], [61, 0, 0, "-", "hardware"], [80, 0, 0, "-", "non_blockingsocketreceive"], [83, 0, 0, "-", "non_blockingstreamreader"], [86, 0, 0, "-", "settings"]], "village.pybpodapi.bpod.Bpod": [[52, 1, 1, "", "ChannelNames"], [52, 1, 1, "", "ChannelTypes"], [52, 1, 1, "", "Events"], [52, 1, 1, "", "OutputChannels"], [52, 2, 1, "", "__init__"], [52, 2, 1, "", "close"], [52, 2, 1, "", "data_available"], [52, 2, 1, "", "find_module_by_name"], [52, 2, 1, "", "load_serial_message"], [52, 2, 1, "", "loop_handler"], [52, 2, 1, "", "manual_override"], [52, 2, 1, "", "open"], [52, 2, 1, "", "reset_serial_messages"], [52, 2, 1, "", "run_state_machine"], [52, 2, 1, "", "send_state_machine"], [52, 2, 1, "", "softcode_handler_function"]], "village.pybpodapi.bpod.Bpod.ChannelNames": [[52, 3, 1, "", "BNC"], [52, 3, 1, "", "PWM"], [52, 3, 1, "", "SERIAL"], [52, 3, 1, "", "VALVE"], [52, 3, 1, "", "WIRE"]], "village.pybpodapi.bpod.Bpod.ChannelTypes": [[52, 3, 1, "", "INPUT"], [52, 3, 1, "", "OUTPUT"]], "village.pybpodapi.bpod.Bpod.Events": [[52, 3, 1, "", "BNC1High"], [52, 3, 1, "", "Condition1"], [52, 3, 1, "", "GlobalCounter1End"], [52, 3, 1, "", "GlobalTimer1End"], [52, 3, 1, "", "GlobalTimer1Start"], [52, 3, 1, "", "PA1_Port1In"], [52, 3, 1, "", "Port1In"], [52, 3, 1, "", "Tup"], [52, 3, 1, "", "Wire1High"], [52, 2, 1, "", "is_condition"], [52, 2, 1, "", "is_global_counter_end"], [52, 2, 1, "", "is_global_timer_cancel"], [52, 2, 1, "", "is_global_timer_end"], [52, 2, 1, "", "is_global_timer_start"], [52, 2, 1, "", "is_global_timer_trigger"], [52, 2, 1, "", "is_state_timer"]], "village.pybpodapi.bpod.Bpod.OutputChannels": [[52, 3, 1, "", "BNC1High"], [52, 3, 1, "", "GlobalCounterReset"], [52, 3, 1, "", "GlobalTimer1Cancel"], [52, 3, 1, "", "GlobalTimer1Trig"], [52, 3, 1, "", "Serial1"], [52, 3, 1, "", "SoftCode1"], [52, 3, 1, "", "Valve"], [52, 3, 1, "", "Wire1High"]], "village.pybpodapi.bpod.bpod_base": [[54, 1, 1, "", "BpodBase"]], "village.pybpodapi.bpod.bpod_base.BpodBase": [[54, 1, 1, "", "ChannelNames"], [54, 1, 1, "", "ChannelTypes"], [54, 1, 1, "", "Events"], [54, 1, 1, "", "OutputChannels"], [54, 2, 1, "", "__init__"], [54, 2, 1, "", "close"], [54, 2, 1, "", "find_module_by_name"], [54, 2, 1, "", "load_serial_message"], [54, 2, 1, "", "loop_handler"], [54, 2, 1, "", "open"], [54, 2, 1, "", "reset_serial_messages"], [54, 2, 1, "", "run_state_machine"], [54, 2, 1, "", "send_state_machine"], [54, 2, 1, "", "softcode_handler_function"]], "village.pybpodapi.bpod.bpod_base.BpodBase.ChannelNames": [[54, 3, 1, "", "BNC"], [54, 3, 1, "", "PWM"], [54, 3, 1, "", "SERIAL"], [54, 3, 1, "", "VALVE"], [54, 3, 1, "", "WIRE"]], "village.pybpodapi.bpod.bpod_base.BpodBase.ChannelTypes": [[54, 3, 1, "", "INPUT"], [54, 3, 1, "", "OUTPUT"]], "village.pybpodapi.bpod.bpod_base.BpodBase.Events": [[54, 3, 1, "", "BNC1High"], [54, 3, 1, "", "Condition1"], [54, 3, 1, "", "GlobalCounter1End"], [54, 3, 1, "", "GlobalTimer1End"], [54, 3, 1, "", "GlobalTimer1Start"], [54, 3, 1, "", "PA1_Port1In"], [54, 3, 1, "", "Port1In"], [54, 3, 1, "", "Tup"], [54, 3, 1, "", "Wire1High"], [54, 2, 1, "", "is_condition"], [54, 2, 1, "", "is_global_counter_end"], [54, 2, 1, "", "is_global_timer_cancel"], [54, 2, 1, "", "is_global_timer_end"], [54, 2, 1, "", "is_global_timer_start"], [54, 2, 1, "", "is_global_timer_trigger"], [54, 2, 1, "", "is_state_timer"]], "village.pybpodapi.bpod.bpod_base.BpodBase.OutputChannels": [[54, 3, 1, "", "BNC1High"], [54, 3, 1, "", "GlobalCounterReset"], [54, 3, 1, "", "GlobalTimer1Cancel"], [54, 3, 1, "", "GlobalTimer1Trig"], [54, 3, 1, "", "Serial1"], [54, 3, 1, "", "SoftCode1"], [54, 3, 1, "", "Valve"], [54, 3, 1, "", "Wire1High"]], "village.pybpodapi.bpod.bpod_com_protocol": [[56, 1, 1, "", "BpodCOMProtocol"]], "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol": [[56, 1, 1, "", "ChannelNames"], [56, 1, 1, "", "ChannelTypes"], [56, 1, 1, "", "Events"], [56, 1, 1, "", "OutputChannels"], [56, 2, 1, "", "__init__"], [56, 2, 1, "", "close"], [56, 2, 1, "", "data_available"], [56, 2, 1, "", "find_module_by_name"], [56, 2, 1, "", "load_serial_message"], [56, 2, 1, "", "loop_handler"], [56, 2, 1, "", "manual_override"], [56, 2, 1, "", "open"], [56, 2, 1, "", "reset_serial_messages"], [56, 2, 1, "", "run_state_machine"], [56, 2, 1, "", "send_state_machine"], [56, 2, 1, "", "softcode_handler_function"]], "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.ChannelNames": [[56, 3, 1, "", "BNC"], [56, 3, 1, "", "PWM"], [56, 3, 1, "", "SERIAL"], [56, 3, 1, "", "VALVE"], [56, 3, 1, "", "WIRE"]], "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.ChannelTypes": [[56, 3, 1, "", "INPUT"], [56, 3, 1, "", "OUTPUT"]], "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.Events": [[56, 3, 1, "", "BNC1High"], [56, 3, 1, "", "Condition1"], [56, 3, 1, "", "GlobalCounter1End"], [56, 3, 1, "", "GlobalTimer1End"], [56, 3, 1, "", "GlobalTimer1Start"], [56, 3, 1, "", "PA1_Port1In"], [56, 3, 1, "", "Port1In"], [56, 3, 1, "", "Tup"], [56, 3, 1, "", "Wire1High"], [56, 2, 1, "", "is_condition"], [56, 2, 1, "", "is_global_counter_end"], [56, 2, 1, "", "is_global_timer_cancel"], [56, 2, 1, "", "is_global_timer_end"], [56, 2, 1, "", "is_global_timer_start"], [56, 2, 1, "", "is_global_timer_trigger"], [56, 2, 1, "", "is_state_timer"]], "village.pybpodapi.bpod.bpod_com_protocol.BpodCOMProtocol.OutputChannels": [[56, 3, 1, "", "BNC1High"], [56, 3, 1, "", "GlobalCounterReset"], [56, 3, 1, "", "GlobalTimer1Cancel"], [56, 3, 1, "", "GlobalTimer1Trig"], [56, 3, 1, "", "Serial1"], [56, 3, 1, "", "SoftCode1"], [56, 3, 1, "", "Valve"], [56, 3, 1, "", "Wire1High"]], "village.pybpodapi.bpod.bpod_com_protocol_modules": [[58, 1, 1, "", "BpodCOMProtocolModules"]], "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules": [[58, 1, 1, "", "ChannelNames"], [58, 1, 1, "", "ChannelTypes"], [58, 1, 1, "", "Events"], [58, 1, 1, "", "OutputChannels"], [58, 2, 1, "", "__init__"], [58, 2, 1, "", "close"], [58, 2, 1, "", "data_available"], [58, 2, 1, "", "find_module_by_name"], [58, 2, 1, "", "load_serial_message"], [58, 2, 1, "", "loop_handler"], [58, 2, 1, "", "manual_override"], [58, 2, 1, "", "open"], [58, 2, 1, "", "reset_serial_messages"], [58, 2, 1, "", "run_state_machine"], [58, 2, 1, "", "send_state_machine"], [58, 2, 1, "", "softcode_handler_function"]], "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.ChannelNames": [[58, 3, 1, "", "BNC"], [58, 3, 1, "", "PWM"], [58, 3, 1, "", "SERIAL"], [58, 3, 1, "", "VALVE"], [58, 3, 1, "", "WIRE"]], "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.ChannelTypes": [[58, 3, 1, "", "INPUT"], [58, 3, 1, "", "OUTPUT"]], "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.Events": [[58, 3, 1, "", "BNC1High"], [58, 3, 1, "", "Condition1"], [58, 3, 1, "", "GlobalCounter1End"], [58, 3, 1, "", "GlobalTimer1End"], [58, 3, 1, "", "GlobalTimer1Start"], [58, 3, 1, "", "PA1_Port1In"], [58, 3, 1, "", "Port1In"], [58, 3, 1, "", "Tup"], [58, 3, 1, "", "Wire1High"], [58, 2, 1, "", "is_condition"], [58, 2, 1, "", "is_global_counter_end"], [58, 2, 1, "", "is_global_timer_cancel"], [58, 2, 1, "", "is_global_timer_end"], [58, 2, 1, "", "is_global_timer_start"], [58, 2, 1, "", "is_global_timer_trigger"], [58, 2, 1, "", "is_state_timer"]], "village.pybpodapi.bpod.bpod_com_protocol_modules.BpodCOMProtocolModules.OutputChannels": [[58, 3, 1, "", "BNC1High"], [58, 3, 1, "", "GlobalCounterReset"], [58, 3, 1, "", "GlobalTimer1Cancel"], [58, 3, 1, "", "GlobalTimer1Trig"], [58, 3, 1, "", "Serial1"], [58, 3, 1, "", "SoftCode1"], [58, 3, 1, "", "Valve"], [58, 3, 1, "", "Wire1High"]], "village.pybpodapi.bpod.bpod_io": [[60, 1, 1, "", "BpodIO"]], "village.pybpodapi.bpod.bpod_io.BpodIO": [[60, 1, 1, "", "ChannelNames"], [60, 1, 1, "", "ChannelTypes"], [60, 1, 1, "", "Events"], [60, 1, 1, "", "OutputChannels"], [60, 2, 1, "", "__init__"], [60, 2, 1, "", "close"], [60, 2, 1, "", "data_available"], [60, 2, 1, "", "find_module_by_name"], [60, 2, 1, "", "load_serial_message"], [60, 2, 1, "", "loop_handler"], [60, 2, 1, "", "manual_override"], [60, 2, 1, "", "open"], [60, 2, 1, "", "reset_serial_messages"], [60, 2, 1, "", "run_state_machine"], [60, 2, 1, "", "send_state_machine"], [60, 2, 1, "", "softcode_handler_function"]], "village.pybpodapi.bpod.bpod_io.BpodIO.ChannelNames": [[60, 3, 1, "", "BNC"], [60, 3, 1, "", "PWM"], [60, 3, 1, "", "SERIAL"], [60, 3, 1, "", "VALVE"], [60, 3, 1, "", "WIRE"]], "village.pybpodapi.bpod.bpod_io.BpodIO.ChannelTypes": [[60, 3, 1, "", "INPUT"], [60, 3, 1, "", "OUTPUT"]], "village.pybpodapi.bpod.bpod_io.BpodIO.Events": [[60, 3, 1, "", "BNC1High"], [60, 3, 1, "", "Condition1"], [60, 3, 1, "", "GlobalCounter1End"], [60, 3, 1, "", "GlobalTimer1End"], [60, 3, 1, "", "GlobalTimer1Start"], [60, 3, 1, "", "PA1_Port1In"], [60, 3, 1, "", "Port1In"], [60, 3, 1, "", "Tup"], [60, 3, 1, "", "Wire1High"], [60, 2, 1, "", "is_condition"], [60, 2, 1, "", "is_global_counter_end"], [60, 2, 1, "", "is_global_timer_cancel"], [60, 2, 1, "", "is_global_timer_end"], [60, 2, 1, "", "is_global_timer_start"], [60, 2, 1, "", "is_global_timer_trigger"], [60, 2, 1, "", "is_state_timer"]], "village.pybpodapi.bpod.bpod_io.BpodIO.OutputChannels": [[60, 3, 1, "", "BNC1High"], [60, 3, 1, "", "GlobalCounterReset"], [60, 3, 1, "", "GlobalTimer1Cancel"], [60, 3, 1, "", "GlobalTimer1Trig"], [60, 3, 1, "", "Serial1"], [60, 3, 1, "", "SoftCode1"], [60, 3, 1, "", "Valve"], [60, 3, 1, "", "Wire1High"]], "village.pybpodapi.bpod.hardware": [[62, 0, 0, "-", "channels"], [67, 0, 0, "-", "events"], [72, 0, 0, "-", "hardware"], [74, 0, 0, "-", "input_channels"], [77, 0, 0, "-", "output_channels"]], "village.pybpodapi.bpod.hardware.channels": [[63, 1, 1, "", "ChannelName"], [64, 1, 1, "", "ChannelType"], [65, 1, 1, "", "Channels"], [66, 1, 1, "", "EventsPositions"]], "village.pybpodapi.bpod.hardware.channels.ChannelName": [[63, 3, 1, "", "BNC"], [63, 3, 1, "", "PWM"], [63, 3, 1, "", "SERIAL"], [63, 3, 1, "", "VALVE"], [63, 3, 1, "", "WIRE"], [63, 2, 1, "", "__init__"]], "village.pybpodapi.bpod.hardware.channels.ChannelType": [[64, 3, 1, "", "INPUT"], [64, 3, 1, "", "OUTPUT"], [64, 2, 1, "", "__init__"]], "village.pybpodapi.bpod.hardware.channels.Channels": [[65, 2, 1, "", "__init__"], [65, 2, 1, "", "get_event_name"], [65, 2, 1, "", "setup_input_channels"], [65, 2, 1, "", "setup_output_channels"]], "village.pybpodapi.bpod.hardware.channels.EventsPositions": [[66, 2, 1, "", "__init__"]], "village.pybpodapi.bpod.hardware.events": [[68, 0, 0, "-", "base_eventname"], [70, 0, 0, "-", "bpod_events"]], "village.pybpodapi.bpod.hardware.events.base_eventname": [[69, 1, 1, "", "BaseEventName"]], "village.pybpodapi.bpod.hardware.events.base_eventname.BaseEventName": [[69, 2, 1, "", "__init__"], [69, 2, 1, "", "is_condition"], [69, 2, 1, "", "is_global_counter_end"], [69, 2, 1, "", "is_global_timer_cancel"], [69, 2, 1, "", "is_global_timer_end"], [69, 2, 1, "", "is_global_timer_start"], [69, 2, 1, "", "is_global_timer_trigger"], [69, 2, 1, "", "is_state_timer"]], "village.pybpodapi.bpod.hardware.events.bpod_events": [[71, 1, 1, "", "EventName"]], "village.pybpodapi.bpod.hardware.events.bpod_events.EventName": [[71, 3, 1, "", "BNC1High"], [71, 3, 1, "", "Condition1"], [71, 3, 1, "", "GlobalCounter1End"], [71, 3, 1, "", "GlobalTimer1End"], [71, 3, 1, "", "GlobalTimer1Start"], [71, 3, 1, "", "PA1_Port1In"], [71, 3, 1, "", "Port1In"], [71, 3, 1, "", "Tup"], [71, 3, 1, "", "Wire1High"], [71, 2, 1, "", "__init__"], [71, 2, 1, "", "is_condition"], [71, 2, 1, "", "is_global_counter_end"], [71, 2, 1, "", "is_global_timer_cancel"], [71, 2, 1, "", "is_global_timer_end"], [71, 2, 1, "", "is_global_timer_start"], [71, 2, 1, "", "is_global_timer_trigger"], [71, 2, 1, "", "is_state_timer"]], "village.pybpodapi.bpod.hardware.hardware": [[73, 1, 1, "", "Hardware"]], "village.pybpodapi.bpod.hardware.hardware.Hardware": [[73, 2, 1, "", "__init__"], [73, 2, 1, "", "setup"]], "village.pybpodapi.bpod.hardware.input_channels": [[75, 0, 0, "-", "bpod_input_channels"]], "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels": [[76, 1, 1, "", "InputName"]], "village.pybpodapi.bpod.hardware.input_channels.bpod_input_channels.InputName": [[76, 3, 1, "", "BNC1"], [76, 3, 1, "", "BNC2"], [76, 3, 1, "", "Port1"], [76, 3, 1, "", "Port2"], [76, 3, 1, "", "Port3"], [76, 3, 1, "", "Port4"], [76, 3, 1, "", "Port5"], [76, 3, 1, "", "Port6"], [76, 3, 1, "", "Port7"], [76, 3, 1, "", "Port8"], [76, 3, 1, "", "Serial1"], [76, 3, 1, "", "Serial2"], [76, 3, 1, "", "Serial3"], [76, 3, 1, "", "USB1"], [76, 3, 1, "", "Wire1"], [76, 3, 1, "", "Wire2"], [76, 2, 1, "", "__init__"]], "village.pybpodapi.bpod.hardware.output_channels": [[78, 0, 0, "-", "bpod_output_channels"]], "village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels": [[79, 1, 1, "", "OutputChannel"]], "village.pybpodapi.bpod.hardware.output_channels.bpod_output_channels.OutputChannel": [[79, 3, 1, "", "BNC1High"], [79, 3, 1, "", "GlobalCounterReset"], [79, 3, 1, "", "GlobalTimer1Cancel"], [79, 3, 1, "", "GlobalTimer1Trig"], [79, 3, 1, "", "Serial1"], [79, 3, 1, "", "SoftCode1"], [79, 3, 1, "", "Valve"], [79, 3, 1, "", "Wire1High"], [79, 2, 1, "", "__init__"]], "village.pybpodapi.bpod.non_blockingsocketreceive": [[81, 1, 1, "", "NonBlockingSocketReceive"], [82, 4, 1, "", "UnexpectedEndOfStream"]], "village.pybpodapi.bpod.non_blockingsocketreceive.NonBlockingSocketReceive": [[81, 2, 1, "", "__init__"]], "village.pybpodapi.bpod.non_blockingstreamreader": [[84, 1, 1, "", "NonBlockingStreamReader"], [85, 4, 1, "", "UnexpectedEndOfStream"]], "village.pybpodapi.bpod.non_blockingstreamreader.NonBlockingStreamReader": [[84, 2, 1, "", "__init__"]], "village.pybpodapi.bpod_modules": [[88, 0, 0, "-", "bpod_module"], [90, 0, 0, "-", "bpod_modules"]], "village.pybpodapi.bpod_modules.bpod_module": [[89, 1, 1, "", "BpodModule"]], "village.pybpodapi.bpod_modules.bpod_module.BpodModule": [[89, 2, 1, "", "__init__"], [89, 2, 1, "", "load_message"]], "village.pybpodapi.bpod_modules.bpod_modules": [[91, 1, 1, "", "BpodModules"]], "village.pybpodapi.bpod_modules.bpod_modules.BpodModules": [[91, 2, 1, "", "__init__"]], "village.pybpodapi.com": [[93, 0, 0, "-", "arcom"], [97, 0, 0, "-", "messaging"], [132, 0, 0, "-", "protocol"], [137, 0, 0, "-", "stderr_buffer"], [139, 0, 0, "-", "stdout_buffer"]], "village.pybpodapi.com.arcom": [[94, 1, 1, "", "ArCOM"], [95, 1, 1, "", "ArduinoTypes"], [96, 1, 1, "", "DataType"]], "village.pybpodapi.com.arcom.ArCOM": [[94, 2, 1, "", "__init__"], [94, 2, 1, "", "bytes_available"], [94, 2, 1, "", "close"], [94, 2, 1, "", "open"]], "village.pybpodapi.com.arcom.ArduinoTypes": [[95, 2, 1, "", "__init__"]], "village.pybpodapi.com.arcom.DataType": [[96, 2, 1, "", "__init__"]], "village.pybpodapi.com.messaging": [[98, 0, 0, "-", "base_message"], [100, 0, 0, "-", "debug"], [102, 0, 0, "-", "end_trial"], [104, 0, 0, "-", "error"], [106, 0, 0, "-", "event_occurrence"], [108, 0, 0, "-", "event_resume"], [110, 0, 0, "-", "parser"], [112, 0, 0, "-", "session_info"], [114, 0, 0, "-", "softcode_occurrence"], [116, 0, 0, "-", "state_occurrence"], [118, 0, 0, "-", "state_transition"], [120, 0, 0, "-", "stderr"], [122, 0, 0, "-", "stdout"], [124, 0, 0, "-", "trial"], [126, 0, 0, "-", "untagged_message"], [128, 0, 0, "-", "value"], [130, 0, 0, "-", "warning"]], "village.pybpodapi.com.messaging.base_message": [[99, 1, 1, "", "BaseMessage"]], "village.pybpodapi.com.messaging.base_message.BaseMessage": [[99, 2, 1, "", "__init__"], [99, 2, 1, "", "check_type"], [99, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.debug": [[101, 1, 1, "", "DebugMessage"]], "village.pybpodapi.com.messaging.debug.DebugMessage": [[101, 2, 1, "", "__init__"], [101, 2, 1, "", "check_type"], [101, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.end_trial": [[103, 1, 1, "", "EndTrial"]], "village.pybpodapi.com.messaging.end_trial.EndTrial": [[103, 2, 1, "", "__init__"], [103, 2, 1, "", "check_type"], [103, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.error": [[105, 1, 1, "", "ErrorMessage"]], "village.pybpodapi.com.messaging.error.ErrorMessage": [[105, 2, 1, "", "__init__"], [105, 2, 1, "", "check_type"], [105, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.event_occurrence": [[107, 1, 1, "", "EventOccurrence"]], "village.pybpodapi.com.messaging.event_occurrence.EventOccurrence": [[107, 2, 1, "", "__init__"], [107, 2, 1, "", "check_type"], [107, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.event_resume": [[109, 1, 1, "", "EventResume"]], "village.pybpodapi.com.messaging.event_resume.EventResume": [[109, 2, 1, "", "__init__"], [109, 2, 1, "", "check_type"], [109, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.parser": [[111, 1, 1, "", "MessageParser"]], "village.pybpodapi.com.messaging.parser.MessageParser": [[111, 2, 1, "", "__init__"], [111, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.session_info": [[113, 1, 1, "", "SessionInfo"]], "village.pybpodapi.com.messaging.session_info.SessionInfo": [[113, 2, 1, "", "__init__"], [113, 2, 1, "", "check_type"], [113, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.softcode_occurrence": [[115, 1, 1, "", "SoftcodeOccurrence"]], "village.pybpodapi.com.messaging.softcode_occurrence.SoftcodeOccurrence": [[115, 2, 1, "", "__init__"], [115, 2, 1, "", "check_type"], [115, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.state_occurrence": [[117, 1, 1, "", "StateOccurrence"]], "village.pybpodapi.com.messaging.state_occurrence.StateOccurrence": [[117, 2, 1, "", "__init__"], [117, 2, 1, "", "check_type"], [117, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.state_transition": [[119, 1, 1, "", "StateTransition"]], "village.pybpodapi.com.messaging.state_transition.StateTransition": [[119, 2, 1, "", "__init__"], [119, 2, 1, "", "check_type"], [119, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.stderr": [[121, 1, 1, "", "StderrMessage"]], "village.pybpodapi.com.messaging.stderr.StderrMessage": [[121, 2, 1, "", "__init__"], [121, 2, 1, "", "check_type"], [121, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.stdout": [[123, 1, 1, "", "StdoutMessage"]], "village.pybpodapi.com.messaging.stdout.StdoutMessage": [[123, 2, 1, "", "__init__"], [123, 2, 1, "", "check_type"], [123, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.trial": [[125, 1, 1, "", "Trial"]], "village.pybpodapi.com.messaging.trial.Trial": [[125, 2, 1, "", "__init__"], [125, 2, 1, "", "check_type"], [125, 2, 1, "", "fromlist"], [125, 2, 1, "", "get_all_timestamps_by_event"], [125, 2, 1, "", "get_events_names"], [125, 2, 1, "", "get_timestamps_by_event_name"]], "village.pybpodapi.com.messaging.untagged_message": [[127, 1, 1, "", "UntaggedMessage"]], "village.pybpodapi.com.messaging.untagged_message.UntaggedMessage": [[127, 2, 1, "", "__init__"], [127, 2, 1, "", "check_type"], [127, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.value": [[129, 1, 1, "", "ValueMessage"]], "village.pybpodapi.com.messaging.value.ValueMessage": [[129, 2, 1, "", "__init__"], [129, 2, 1, "", "check_type"], [129, 2, 1, "", "fromlist"]], "village.pybpodapi.com.messaging.warning": [[131, 1, 1, "", "WarningMessage"]], "village.pybpodapi.com.messaging.warning.WarningMessage": [[131, 2, 1, "", "__init__"], [131, 2, 1, "", "check_type"], [131, 2, 1, "", "fromlist"]], "village.pybpodapi.com.protocol": [[133, 0, 0, "-", "recv_msg_headers"], [135, 0, 0, "-", "send_msg_headers"]], "village.pybpodapi.com.protocol.recv_msg_headers": [[134, 1, 1, "", "ReceiveMessageHeader"]], "village.pybpodapi.com.protocol.recv_msg_headers.ReceiveMessageHeader": [[134, 3, 1, "", "ENABLE_PORTS_OK"], [134, 3, 1, "", "HANDSHAKE_OK"], [134, 3, 1, "", "LOAD_SERIAL_MESSAGE_OK"], [134, 3, 1, "", "MODULE_EVENT_NAMES"], [134, 3, 1, "", "MODULE_REQUESTED_EVENT"], [134, 3, 1, "", "RESET_SERIAL_MESSAGES"], [134, 3, 1, "", "STATE_MACHINE_INSTALLATION_STATUS"], [134, 3, 1, "", "SYNC_CHANNEL_MODE_OK"], [134, 2, 1, "", "__init__"]], "village.pybpodapi.com.protocol.send_msg_headers": [[136, 1, 1, "", "SendMessageHeader"]], "village.pybpodapi.com.protocol.send_msg_headers.SendMessageHeader": [[136, 3, 1, "", "DISCONNECT"], [136, 3, 1, "", "ECHO_SOFTCODE"], [136, 3, 1, "", "ENABLE_PORTS"], [136, 3, 1, "", "EXIT_AND_RETURN"], [136, 3, 1, "", "FIRMWARE_VERSION"], [136, 3, 1, "", "GET_MODULES"], [136, 3, 1, "", "GET_TIMESTAMP_TRANSMISSION"], [136, 3, 1, "", "HANDSHAKE"], [136, 3, 1, "", "HARDWARE_DESCRIPTION"], [136, 3, 1, "", "LOAD_SERIAL_MESSAGE"], [136, 3, 1, "", "MANUAL_OVERRIDE_EXEC_EVENT"], [136, 3, 1, "", "NEW_STATE_MATRIX"], [136, 3, 1, "", "OVERRIDE_DIGITAL_HW_STATE"], [136, 3, 1, "", "RESET_CLOCK"], [136, 3, 1, "", "RESET_SERIAL_MESSAGES"], [136, 3, 1, "", "RUN_STATE_MACHINE"], [136, 3, 1, "", "SEND_TO_HW_SERIAL"], [136, 3, 1, "", "SET_MODULE_RELAY"], [136, 3, 1, "", "SYNC_CHANNEL_MODE"], [136, 3, 1, "", "TRIGGER_SOFTCODE"], [136, 3, 1, "", "WRITE_TO_MODULE"], [136, 2, 1, "", "__init__"]], "village.pybpodapi.com.stderr_buffer": [[138, 1, 1, "", "StderrBuffer"]], "village.pybpodapi.com.stderr_buffer.StderrBuffer": [[138, 2, 1, "", "__init__"], [138, 2, 1, "", "close"], [138, 2, 1, "", "detach"], [138, 3, 1, "", "encoding"], [138, 3, 1, "", "errors"], [138, 2, 1, "", "fileno"], [138, 2, 1, "", "flush"], [138, 2, 1, "", "getvalue"], [138, 2, 1, "", "isatty"], [138, 3, 1, "", "newlines"], [138, 2, 1, "", "read"], [138, 2, 1, "", "readable"], [138, 2, 1, "", "readline"], [138, 2, 1, "", "readlines"], [138, 2, 1, "", "seek"], [138, 2, 1, "", "seekable"], [138, 2, 1, "", "tell"], [138, 2, 1, "", "truncate"], [138, 2, 1, "", "writable"], [138, 2, 1, "", "write"], [138, 2, 1, "", "writelines"]], "village.pybpodapi.com.stdout_buffer": [[140, 1, 1, "", "StdoutBuffer"]], "village.pybpodapi.com.stdout_buffer.StdoutBuffer": [[140, 2, 1, "", "__init__"], [140, 2, 1, "", "close"], [140, 2, 1, "", "detach"], [140, 3, 1, "", "encoding"], [140, 3, 1, "", "errors"], [140, 2, 1, "", "fileno"], [140, 2, 1, "", "flush"], [140, 2, 1, "", "getvalue"], [140, 2, 1, "", "isatty"], [140, 3, 1, "", "newlines"], [140, 2, 1, "", "read"], [140, 2, 1, "", "readable"], [140, 2, 1, "", "readline"], [140, 2, 1, "", "readlines"], [140, 2, 1, "", "seek"], [140, 2, 1, "", "seekable"], [140, 2, 1, "", "tell"], [140, 2, 1, "", "truncate"], [140, 2, 1, "", "writable"], [140, 2, 1, "", "write"], [140, 2, 1, "", "writelines"]], "village.pybpodapi.exceptions": [[142, 0, 0, "-", "bpod_error"]], "village.pybpodapi.exceptions.bpod_error": [[143, 4, 1, "", "BpodErrorException"]], "village.pybpodapi.session": [[146, 1, 1, "", "Session"], [147, 1, 1, "", "StreamsWrapper"]], "village.pybpodapi.session.Session": [[146, 2, 1, "", "__init__"], [146, 6, 1, "", "current_trial"]], "village.pybpodapi.session.StreamsWrapper": [[147, 2, 1, "", "__init__"]], "village.pybpodapi.state_machine": [[149, 1, 1, "", "StateMachine"], [150, 0, 0, "-", "conditions"], [152, 0, 0, "-", "global_counters"], [154, 0, 0, "-", "global_timers"], [156, 0, 0, "-", "state_machine_base"], [159, 0, 0, "-", "state_machine_builder"], [162, 0, 0, "-", "state_machine_runner"]], "village.pybpodapi.state_machine.StateMachine": [[149, 2, 1, "", "__init__"], [149, 2, 1, "", "add_state"], [149, 2, 1, "", "build_message"], [149, 2, 1, "", "build_message_32_bits"], [149, 2, 1, "", "set_condition"], [149, 2, 1, "", "set_global_counter"], [149, 2, 1, "", "set_global_timer"], [149, 2, 1, "", "set_global_timer_legacy"], [149, 2, 1, "", "update_state_numbers"]], "village.pybpodapi.state_machine.conditions": [[151, 1, 1, "", "Conditions"]], "village.pybpodapi.state_machine.conditions.Conditions": [[151, 2, 1, "", "__init__"]], "village.pybpodapi.state_machine.global_counters": [[153, 1, 1, "", "GlobalCounters"]], "village.pybpodapi.state_machine.global_counters.GlobalCounters": [[153, 2, 1, "", "__init__"]], "village.pybpodapi.state_machine.global_timers": [[155, 1, 1, "", "GlobalTimers"]], "village.pybpodapi.state_machine.global_timers.GlobalTimers": [[155, 2, 1, "", "__init__"]], "village.pybpodapi.state_machine.state_machine_base": [[157, 4, 1, "", "SMAError"], [158, 1, 1, "", "StateMachineBase"]], "village.pybpodapi.state_machine.state_machine_base.StateMachineBase": [[158, 2, 1, "", "__init__"], [158, 2, 1, "", "add_state"], [158, 2, 1, "", "set_condition"], [158, 2, 1, "", "set_global_counter"], [158, 2, 1, "", "set_global_timer"], [158, 2, 1, "", "set_global_timer_legacy"]], "village.pybpodapi.state_machine.state_machine_builder": [[160, 1, 1, "", "StateMachineBuilder"], [161, 4, 1, "", "StateMachineBuilderError"]], "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilder": [[160, 2, 1, "", "__init__"], [160, 2, 1, "", "add_state"], [160, 2, 1, "", "build_message"], [160, 2, 1, "", "build_message_32_bits"], [160, 2, 1, "", "set_condition"], [160, 2, 1, "", "set_global_counter"], [160, 2, 1, "", "set_global_timer"], [160, 2, 1, "", "set_global_timer_legacy"], [160, 2, 1, "", "update_state_numbers"]], "village.pybpodapi.state_machine.state_machine_runner": [[163, 1, 1, "", "StateMachineRunner"], [164, 4, 1, "", "StateMachineRunnerError"]], "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunner": [[163, 2, 1, "", "__init__"], [163, 2, 1, "", "add_state"], [163, 2, 1, "", "build_message"], [163, 2, 1, "", "build_message_32_bits"], [163, 2, 1, "", "set_condition"], [163, 2, 1, "", "set_global_counter"], [163, 2, 1, "", "set_global_timer"], [163, 2, 1, "", "set_global_timer_legacy"], [163, 2, 1, "", "update_state_numbers"]], "village.pybpodapi.utils": [[166, 0, 0, "-", "csv"], [169, 0, 0, "-", "date_parser"]], "village.pybpodapi.utils.csv": [[167, 1, 1, "", "Reader"], [168, 1, 1, "", "Writer"]], "village.pybpodapi.utils.csv.Reader": [[167, 2, 1, "", "__init__"]], "village.pybpodapi.utils.csv.Writer": [[168, 2, 1, "", "__init__"]], "village.pybpodapi.utils.date_parser": [[170, 5, 1, "", "parse"]], "village.rt_plots": [[172, 1, 1, "", "RTPlots"]], "village.rt_plots.RTPlots": [[172, 2, 1, "", "__init__"]], "village.screen": [[174, 0, 0, "-", "behaviour_window"]], "village.screen.behaviour_window": [[175, 1, 1, "", "BehaviourWindow"]], "village.screen.behaviour_window.BehaviourWindow": [[175, 2, 1, "", "__init__"]], "village.time_utils": [[177, 1, 1, "", "TimeUtils"]], "village.time_utils.TimeUtils": [[177, 2, 1, "", "__init__"]], "village.video": [[179, 1, 1, "", "Example"]], "village.video.Example": [[179, 2, 1, "", "__init__"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "exception", "Python exception"], "5": ["py", "function", "Python function"], "6": ["py", "property", "Python property"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:exception", "5": "py:function", "6": "py:property"}, "terms": {"": [81, 136, 149, 158, 160, 163, 184, 185, 186, 187, 193, 196, 197, 201, 202, 205], "0": [52, 54, 56, 58, 60, 89, 138, 140, 149, 158, 160, 163, 185, 186, 197, 205], "0x4": [52, 54, 56, 58, 60, 136], "0x45": [185, 186], "0x64": [185, 186], "1": [5, 6, 7, 8, 9, 10, 11, 12, 14, 29, 52, 54, 56, 58, 60, 64, 76, 79, 94, 134, 136, 138, 140, 149, 158, 160, 163, 185, 186, 197, 201, 205], "1000": [197, 205], "100u": [149, 158, 160, 163], "115200": 94, "12": [185, 186], "1280": [185, 186], "1280x720": [196, 202, 205], "128gb": [185, 186], "13": [185, 186], "2": [52, 54, 56, 58, 60, 64, 76, 138, 140, 185, 186, 187, 191, 197, 201, 205], "20x20": [184, 186], "24": [187, 188, 193], "24\u00bac": [197, 205], "25": [149, 158, 160, 163], "250": 158, "255": [52, 54, 56, 58, 60, 149, 158, 160, 163], "2afc": [187, 193], "2afc_protocol": [52, 54, 56, 58, 60], "2chan": [185, 186], "3": [29, 52, 54, 56, 58, 60, 76, 79, 136, 185, 186, 197, 200, 205], "30x30": [184, 186], "32": [149, 160, 163], "35": 134, "3600": [149, 158, 160, 163], "3d": [183, 187, 189], "4": [52, 54, 56, 58, 60, 76, 136, 185, 186, 187, 191, 197, 205], "429496": 125, "5": [76, 134, 149, 158, 160, 163, 185, 186, 197, 205], "50": [197, 205], "500": [197, 205], "6": [76, 136, 197, 205], "600": [197, 205], "69": 134, "7": [76, 187, 188, 193], "720": [185, 186], "7295": 125, "8": 76, "8gb": [185, 186], "99": [185, 186], "A": [23, 149, 158, 160, 163, 201, 205], "AND": [187, 192], "Be": [197, 205], "For": [184, 185, 186, 196, 197, 201, 202, 205], "If": [138, 140, 149, 158, 160, 163, 185, 186, 197, 199, 201, 205], "In": [185, 186, 201, 202, 205], "It": [99, 193, 197, 201, 205], "Not": [197, 205], "The": [23, 24, 52, 54, 56, 58, 60, 134, 136, 138, 140, 149, 158, 160, 163, 184, 185, 186, 191, 193, 196, 199, 200, 201, 202, 205], "Then": [185, 186], "There": [196, 202, 205], "These": [63, 64, 71, 76, 79, 184, 186, 187, 188, 201, 205], "To": [185, 186, 187, 188, 201, 205], "__init__": [3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 28, 29, 30, 33, 34, 38, 39, 42, 45, 49, 52, 54, 56, 58, 60, 63, 64, 65, 66, 69, 71, 73, 76, 79, 81, 84, 89, 91, 94, 95, 96, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 134, 136, 138, 140, 146, 147, 149, 151, 153, 155, 158, 160, 163, 167, 168, 172, 175, 177, 179, 201, 205], "_arcom": [56, 58], "_bpodbase__process_opcod": [52, 54, 56, 58, 60], "_bpodbase__update_timestamp": [52, 54, 56, 58, 60], "_condition1": [28, 52, 54, 56, 58, 60, 71], "_globalcounter1_end": [28, 52, 54, 56, 58, 60, 71], "_globalcounterreset": [29, 52, 54, 56, 58, 60, 79], "_globaltimer1_end": [28, 52, 54, 56, 58, 60, 71], "_globaltimer1_start": [28, 52, 54, 56, 58, 60, 71], "_globaltimercancel": [29, 52, 54, 56, 58, 60, 79], "_globaltimertrig": [29, 52, 54, 56, 58, 60, 79], "_tup": [28, 52, 54, 56, 58, 60, 71, 125, 149, 158, 160, 163], "a49": [197, 205], "abl": [204, 205], "abnorm": [197, 205], "about": 146, "abov": [185, 186, 197, 205], "absolut": [138, 140], "abstract": 54, "academi": [197, 204, 205], "access": [184, 187, 188, 191, 193, 197, 199], "accord": [63, 64, 71, 76, 79], "accordingli": [52, 54, 56, 58, 60], "account": [202, 205], "accuraci": [184, 186], "acid": [200, 205], "acquir": [201, 205], "acryl": [184, 186, 187, 189, 191], "action": [56, 58, 149, 158, 160, 163, 197, 201, 205], "activ": [185, 186, 204, 205], "actual": [149, 160, 163], "ad": [138, 140, 158], "add": [52, 54, 56, 58, 60, 149, 158, 160, 163, 185, 186, 202, 205], "add_stat": [149, 158, 160, 163], "addit": [185, 186, 201, 205], "addition": [187, 193], "address": [42, 43, 45, 46, 185, 186, 202, 205], "adequ": [201, 205], "adjust": [197, 201, 205], "admin": [204, 205], "administr": [204, 205], "advanc": [185, 186, 201, 205], "affect": [158, 160, 197, 205], "after": [138, 140, 185, 186, 196, 197, 201, 205], "after_tri": [201, 205], "again": [197, 205], "alarm": 200, "alarm_set": 24, "alert": [187, 193], "align": [197, 205], "all": [138, 140, 149, 158, 160, 163, 184, 185, 186, 187, 192, 197, 199, 200, 201, 204, 205], "allow": [185, 186, 187, 193, 197, 202, 204, 205], "along": [185, 186], "alreadi": [54, 138, 140], "also": [187, 189, 197, 201, 202, 205], "altern": [183, 186, 202, 205], "alwai": [138, 140, 197, 205], "amount": [197, 205], "an": [23, 73, 89, 94, 107, 109, 115, 131, 138, 140, 149, 158, 160, 163, 185, 186, 187, 188, 189, 192, 197, 199, 201, 202], "analog": [52, 54, 56, 58, 60, 63], "ani": [24, 138, 140, 149, 158, 160, 163, 185, 186, 187, 191, 193, 201, 202, 205], "anim": [188, 189, 191, 193, 197, 201], "annoi": [197, 205], "anoth": [187, 191, 193], "antenna": [197, 205], "anyon": [158, 160], "api": [54, 111], "appear": [185, 186, 196, 205], "applic": [138, 140], "approach": [201, 205], "apt": [185, 186], "ar": [24, 52, 54, 56, 58, 60, 125, 138, 140, 149, 158, 160, 163, 184, 185, 186, 187, 188, 189, 191, 197, 199, 201, 202, 205], "arcom": [56, 58], "arduino": [94, 184, 186, 197, 205], "area": [197, 205], "arg": [5, 6, 7, 8, 9, 10, 11, 12, 14], "argument": [138, 140], "ask": [185, 186], "assembl": [184, 186, 199, 205], "assembli": [184, 199, 205], "assess": [197, 200, 205], "assign": [149, 158, 160, 163, 185, 186], "associ": [89, 107, 109, 115, 149, 158, 160, 163, 185, 186], "attach": [187, 188], "attempt": [138, 140], "attribut": [5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 18, 19, 20, 21, 28, 29, 38, 42, 45, 52, 54, 56, 58, 60, 63, 64, 71, 73, 76, 79, 91, 95, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 134, 136, 138, 140, 146, 149, 163], "auditori": [187, 191], "auto": [185, 186], "autom": [184, 186, 187, 193], "automat": [149, 158, 160, 163, 201, 202, 205], "avail": [63, 76, 79, 187, 193], "back": [197, 205], "bad": [197, 205], "basal": [197, 205], "base": [3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 28, 29, 30, 33, 34, 38, 39, 42, 45, 49, 52, 54, 56, 58, 60, 63, 64, 65, 66, 69, 71, 73, 76, 79, 81, 84, 89, 91, 94, 95, 96, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 134, 136, 138, 140, 146, 147, 149, 151, 153, 155, 158, 160, 163, 167, 168, 172, 175, 177, 179, 184, 186, 201, 205], "base_messag": [121, 123], "baseeventnam": 71, "basemessag": [101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131], "basic": [184, 185, 186], "baudrat": [52, 54, 56, 58, 60, 94], "bcontrol": [187, 191], "beam": [184, 186, 197, 205], "becaus": [197, 205], "becom": [197, 205], "been": [99, 138, 140, 158, 197, 205], "befor": [149, 158, 160, 163, 199, 202, 205], "behavior": [185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 197, 200, 201, 205], "being": [158, 163, 197, 205], "below": [183, 184, 186, 197, 200, 205], "best": [187, 188], "better": [187, 191], "between": [52, 54, 56, 58, 60, 94, 149, 158, 160, 163, 197, 205], "bigger": [52, 54, 56, 58, 60], "bin": [185, 186], "binari": [149, 158, 160, 163], "bit": [149, 160, 163], "blank": [185, 186], "block": [138, 140], "blocker": [184, 186], "blue": [197, 205], "bnc": [28, 29, 52, 54, 56, 58, 60, 63, 71, 79], "bnc1": [29, 52, 54, 56, 58, 60, 76, 79], "bnc1high": [28, 29, 52, 54, 56, 58, 60, 71, 79], "bnc2": 76, "board": [52, 54, 56, 58, 60, 99, 101, 107, 109, 115], "board_messag": [103, 105, 113, 127, 129], "board_timestamp": [107, 109, 115], "boardmessag": [103, 105, 113, 121, 123, 127, 129], "bonsai": [187, 191], "bool": [28, 52, 54, 56, 58, 60, 69, 71, 158, 163], "boot": [185, 186, 202], "bot": [185, 186], "botfath": [204, 205], "both": [185, 186, 199, 201, 205], "bottl": [197, 200, 205], "boundari": [5, 6, 7, 8, 9, 10, 11, 12, 14], "box": [52, 54, 56, 58, 60, 76, 149, 158, 160, 163, 185, 186, 187, 188, 189, 191, 193, 194, 195, 197, 200, 201, 205], "bpod": [54, 56, 58, 60, 63, 64, 65, 71, 73, 76, 79, 89, 91, 107, 109, 115, 123, 134, 136, 146, 149, 158, 160, 163, 185, 186, 187, 191, 197, 205], "bpod_bas": [52, 54, 56, 58, 60], "bpod_set": 24, "bpod_workspac": [52, 54, 56, 58, 60], "bpodbas": [52, 56, 58, 60], "bpodcomprotocol": 58, "bpodcomprotocolmodul": 60, "bpodio": 52, "brain": [187, 192], "braincircuitsbehaviorlab": [185, 186], "browser": [183, 185, 186], "buffer": [138, 140], "build": [52, 54, 56, 58, 60, 136, 149, 160, 163, 183, 184, 187, 189, 192, 199, 205], "build_messag": [149, 160, 163], "build_message_32_bit": [149, 160, 163], "builder": 160, "button": [197, 205], "buzzer": [184, 186, 197, 205], "byte": [52, 54, 56, 58, 60, 134, 136, 138, 140], "bytes_avail": 94, "c": 136, "cabl": [184, 185, 186, 197, 202, 205], "cad": [184, 186], "cage": [184, 186, 187, 191, 194, 195, 197, 200, 205], "calibr": [197, 200, 205], "call": [201, 205], "cam": [197, 205], "camelcas": [201, 205], "camera": [184, 185, 186, 187, 188, 189, 193, 197, 205], "camera_set": 24, "can": [23, 52, 54, 56, 58, 60, 138, 140, 149, 158, 160, 163, 183, 185, 186, 187, 188, 189, 191, 192, 193, 197, 200, 201, 205], "cannot": [184, 186], "captur": [149, 158, 160, 163], "card": [185, 186, 199, 205], "case": [185, 186], "categori": 24, "caus": [149, 158, 160, 163], "cd": [185, 186, 197, 205], "central": [187, 189], "certain": [187, 189, 201, 205], "challeng": [185, 186], "chamber": [184, 186], "chang": [107, 109, 115, 138, 140, 149, 158, 160, 163, 197, 200, 201, 205], "channel": [52, 54, 56, 58, 60, 63, 64, 76, 79, 136, 149, 158, 160, 163], "channel_nam": [52, 56, 58, 60], "channel_numb": [52, 56, 58, 60], "channel_typ": [52, 56, 58, 60], "channel_valu": [149, 158, 160, 163], "channelnam": [52, 54, 56, 58, 60], "channeltyp": [52, 54, 56, 58, 60], "charact": [134, 136, 138, 140, 149, 158, 160, 163], "chat": [204, 205], "check": [185, 186, 187, 193, 197, 200], "check_typ": [99, 101, 103, 105, 107, 109, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131], "choos": [185, 186, 201, 205], "chromium": [185, 186], "circuit": [187, 192], "citric": [200, 205], "class": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 37, 38, 39, 41, 42, 44, 45, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 75, 76, 78, 79, 80, 81, 83, 84, 88, 89, 90, 91, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 162, 163, 166, 167, 168, 171, 172, 174, 175, 176, 177, 178, 179, 201, 205], "classmethod": [99, 101, 103, 105, 107, 109, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131], "clean": [197, 200, 205], "click": [185, 186, 199, 205], "clock": 136, "clone": [185, 186, 201, 205], "close": [39, 52, 54, 56, 58, 60, 94, 138, 140, 197, 201, 205], "cmdline": [185, 186], "code": [39, 52, 54, 56, 58, 60, 71, 134, 136, 158, 185, 186, 187, 192, 194, 195, 202], "column": 3, "columns_head": 168, "com": [41, 56, 58, 103, 105, 113, 121, 123, 127, 129, 185, 186, 187, 192], "combin": [201, 205], "come": [187, 188, 197, 205], "comfort": [185, 186], "command": [52, 54, 56, 58, 60, 134, 185, 186, 204, 205], "commerci": [202, 205], "common": [197, 205], "commun": [54, 56, 58, 197, 205], "compat": [158, 160], "complet": [149, 158, 160, 163, 199, 201, 205], "compon": [183, 187, 188, 189, 191, 197, 199, 205], "compos": [187, 191], "comprehens": [183, 186], "compress": 136, "comput": [187, 188, 202, 205], "condit": [28, 52, 54, 56, 58, 60, 71, 149, 158, 160, 163, 187, 189, 193], "condition1": [28, 52, 54, 56, 58, 60, 71], "condition_channel": [149, 158, 160, 163], "condition_numb": [149, 158, 160, 163], "config": [185, 186], "configur": [52, 54, 56, 58, 60, 136, 185, 186, 187, 193, 199], "confirm": [185, 186], "connect": [39, 52, 54, 56, 58, 60, 63, 73, 89, 94, 136, 184, 185, 186, 187, 188, 191, 196, 197, 202, 205], "connector": [184, 186, 187, 188, 194, 195], "consid": [197, 205], "consist": [187, 189, 201, 205], "consum": [52, 54, 56, 58, 60], "consumpt": [187, 188], "contact": [187, 192], "contain": [23, 149, 158, 160, 163, 185, 186, 199, 201, 205], "content": [99, 101, 103, 105, 121, 123, 127, 131, 138, 140], "control": [138, 140, 184, 186, 189, 191], "convent": [201, 205], "convers": [204, 205], "copi": [185, 186, 204, 205], "correct": [185, 186, 197, 205], "correctli": [197, 205], "correspond": [117, 119, 125, 185, 186, 201, 205], "corridor": [184, 186, 191, 193, 194, 195, 197, 199, 200, 205], "corridor_set": 24, "cost": [187, 188], "could": [201, 205], "count": [149, 158, 160, 163], "counter": [149, 158, 160, 163], "counter_numb": [149, 158, 160, 163], "countri": [185, 186], "cover": [184, 186], "cpu": [185, 186], "cqrobot": [185, 186], "creat": [52, 54, 56, 58, 60, 125, 201, 202], "create_tri": [201, 205], "credenti": [202, 205], "cross": [197, 205], "current": [39, 52, 54, 56, 58, 60, 73, 138, 140, 146, 163, 187, 191, 202, 205], "current_st": 163, "current_tri": 146, "custom": [185, 186, 187, 188], "cut": [187, 189], "d": [185, 186], "dac": [185, 186], "dai": [187, 193, 197, 205], "data": [52, 54, 56, 58, 60, 94, 136, 149, 158, 160, 163, 185, 186, 187, 188, 191, 201, 205], "data_avail": [52, 56, 58, 60], "date": 170, "dateutil": [185, 186], "decod": [138, 140], "def": [201, 205], "default": [23, 138, 140], "defin": [56, 58, 64, 134, 136], "delet": [197, 205], "deliv": [187, 188, 197, 205], "deliveri": [200, 205], "demo_project": [201, 205], "depend": [185, 186], "descript": [13, 23, 24, 52, 54, 56, 58, 60, 73, 149, 158, 160, 163, 197, 205], "descriptor": [138, 140], "design": [185, 186, 187, 188, 189, 191, 193, 194, 195, 199, 205], "desktop": [52, 54, 56, 58, 60], "detach": [138, 140], "detail": [184, 185, 186, 202, 205], "detect": [184, 185, 186, 197, 205], "determin": [138, 140, 187, 188], "dev": [52, 54, 56, 58, 60, 185, 186, 197, 205], "develop": [187, 191, 192], "devic": [56, 58, 73, 134, 136, 187, 188, 189, 197, 202, 205], "dfrobot": [41, 185, 186], "dfrobot_hx711_i2c": 41, "dict": [125, 149, 158, 160, 163], "dictionari": [125, 149, 158, 160, 163], "differ": [24, 185, 186, 187, 191, 197, 201, 202, 205], "difficulti": [201, 205], "digit": 136, "directli": [52, 54, 56, 58, 60, 183, 186], "directori": [185, 186], "directory_set": 24, "disabl": [185, 186], "disconnect": [136, 184, 186, 197, 205], "displai": [185, 186, 197, 202, 205], "distribut": [185, 186], "dive": [201, 205], "dmesg": [185, 186], "do": [197, 202, 205], "doe": [138, 140, 183, 186], "doesn": [197, 205], "don": [184, 186, 201, 205], "done": [200, 205], "door": [184, 186, 187, 189, 197, 205], "down": [197, 204, 205], "download": [183, 184, 185, 186], "drop": [200, 205], "drunk": [197, 205], "dtoverlai": [185, 186], "due": [187, 188, 189, 197, 202, 205], "durabl": [184, 186], "durat": [149, 158, 160, 163], "dure": [184, 186, 197, 202, 205], "dust": [197, 205], "duti": [200, 205], "dynam": [185, 186], "e": [52, 54, 56, 58, 60, 63, 136, 185, 186, 187, 191, 193, 197, 205], "each": [138, 140, 158, 184, 186, 201, 205], "easier": [197, 205], "easiest": [202, 205], "echo": 136, "echo_softcod": 136, "ecohab": [187, 191, 197, 205], "edit": [185, 186, 204, 205], "effect": [138, 140, 187, 188], "either": [183, 186, 187, 193, 201, 205], "electron": [183, 187, 188, 189, 197, 199, 205], "element": [187, 189], "email": [197, 205], "empti": [138, 140, 185, 186], "enabl": [52, 54, 56, 58, 60, 136, 185, 186], "enable_port": [134, 136], "enable_ports_ok": 134, "enable_uart": [185, 186], "enclosur": [184, 186], "encod": [138, 140], "encount": [201, 202, 205], "end": [117, 119, 136, 138, 140, 197, 205], "end_tim": 113, "end_timestamp": 117, "english": [185, 186], "enhanc": [158, 160], "enough": [200, 205], "enrich": [200, 205], "ensur": [158, 184, 185, 186, 187, 188, 197, 199, 205], "enter": [149, 158, 160, 163, 187, 189], "entir": [138, 140, 184, 186, 187, 189], "entri": [111, 193], "enum": [14, 23, 24], "env": [185, 186], "eof": [138, 140], "equal": [138, 140], "equip": [187, 188, 189], "equival": [52, 54, 56, 58, 60, 136], "error": [131, 138, 140, 197, 201, 205], "escap": [184, 186, 197, 205], "especi": [185, 186], "etc": [52, 56, 58, 60, 101, 185, 186], "ethernet": [185, 186, 202, 205], "even": [158, 185, 186, 201, 205], "event": [52, 54, 56, 58, 60, 65, 71, 107, 109, 115, 125, 134, 136, 149, 158, 160, 163, 197, 205], "event_id": [107, 109, 115], "event_idx": 65, "event_nam": [28, 52, 54, 56, 58, 60, 69, 71, 107, 109, 115, 125], "eventnam": [28, 52, 54, 56, 58, 60], "eventoccurr": 125, "eventprotocol": 3, "events_nam": 89, "events_occurr": 125, "everi": [52, 54, 56, 58, 60, 200, 201, 205], "everyth": [197, 205], "ex": [149, 158, 160, 163], "exact": [185, 186], "exampl": [52, 54, 56, 58, 60, 125, 149, 158, 160, 163, 181, 182, 201, 205], "exce": [138, 140, 149, 158, 160, 163], "excel": [187, 188], "except": [27, 31, 32, 35, 80, 82, 83, 85, 142, 156, 157, 159, 161, 162, 164, 187, 189], "execut": [52, 54, 56, 58, 60, 136, 149, 158, 160, 163, 185, 186], "exist": [138, 140, 149, 158, 160, 163], "exit": [136, 149, 158, 160, 163, 184, 186, 197, 205], "exit_and_return": 136, "expect": [197, 205], "experi": [54, 101, 187, 188], "explan": [185, 186], "explor": [197, 201, 205], "export": [52, 54, 56, 58, 60], "extend": [160, 163], "extens": [28, 52, 54, 56, 58, 60, 71], "extern": [202, 205], "extra_set": [24, 185, 186], "f": 136, "factori": 23, "factory_valu": 23, "fail": [197, 205], "failur": [197, 205], "fals": [89, 138, 140, 197, 205], "fan": [185, 186], "far": [138, 140], "faster": [185, 186], "feel": [184, 186], "few": [197, 205], "fewer": [187, 189, 197, 205], "fi": [185, 186], "file": [52, 54, 56, 58, 60, 111, 138, 140, 184, 185, 186, 187, 189, 194, 195, 201, 205], "filenam": [201, 205], "fileno": [138, 140], "filestream": [167, 168], "final": [52, 54, 56, 58, 60, 201, 205], "final_task": [201, 205], "find": [52, 56, 58, 60, 187, 192, 197, 199, 205], "find_module_by_nam": [52, 54, 56, 58, 60], "finish": [201, 205], "finit": 158, "firmwar": [52, 54, 56, 58, 60, 63, 64, 71, 76, 79, 136, 185, 186], "firmware_vers": [89, 136], "first": [134, 136, 149, 158, 160, 163, 199, 201, 202], "fit": [184, 186], "fix": [197, 200, 205], "flip": [52, 54, 56, 58, 60], "float": [23, 107, 109, 115, 125, 149, 158, 160, 163], "floor": [197, 205], "flush": [138, 140], "folder": [52, 54, 56, 58, 60, 185, 186, 201, 205], "follow": [149, 158, 160, 163, 184, 185, 186, 196, 197, 199, 201, 202, 204, 205], "follow_the_light": [201, 205], "food": [187, 191, 200, 205], "force_hotplug": [185, 186], "forcibli": [202, 205], "foundat": [184, 186], "frame": [184, 186, 197, 205], "free": [184, 186, 202, 205], "freez": [197, 205], "frequenc": [197, 205], "frequent": [197, 205], "from": [52, 54, 56, 58, 60, 73, 81, 84, 99, 103, 105, 107, 109, 113, 115, 121, 127, 129, 134, 138, 140, 149, 158, 160, 163, 184, 186, 187, 189, 197, 201, 202, 204, 205], "fromlist": [99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131], "full": [183, 185, 186], "func": [185, 186], "func2": [185, 186], "function": [37, 41, 44, 52, 54, 56, 58, 60, 169, 197, 200, 201, 205], "further": [138, 140], "fvc4": [185, 186], "g": [52, 54, 56, 58, 60, 63, 136, 187, 191, 193, 197, 205], "gather": [187, 191], "gener": [65, 185, 186, 201, 205], "get": [24, 125, 136, 146, 185, 186, 197, 201], "get_all_timestamps_by_ev": 125, "get_descript": 24, "get_event_nam": 65, "get_events_nam": 125, "get_index": 24, "get_indic": 24, "get_modul": 136, "get_text": 24, "get_timestamp_transmiss": 136, "get_timestamps_by_event_nam": 125, "get_typ": 24, "get_valu": 24, "getvalu": [138, 140], "ghost": [197, 205], "git": [185, 186], "github": [41, 185, 186, 187, 192, 204, 205], "given": [149, 158, 160, 163], "global": [149, 158, 160, 163, 185, 186], "global_count": 158, "global_tim": 158, "globalcount": 158, "globalcounter1end": [28, 52, 54, 56, 58, 60, 71], "globalcounter_end": [28, 52, 54, 56, 58, 60, 71], "globalcounterreset": [29, 52, 54, 56, 58, 60, 79], "globaltim": 158, "globaltimer1cancel": [29, 52, 54, 56, 58, 60, 79], "globaltimer1end": [28, 52, 54, 56, 58, 60, 71], "globaltimer1start": [28, 52, 54, 56, 58, 60, 71], "globaltimer1trig": [29, 52, 54, 56, 58, 60, 79], "globaltimer_end": [28, 52, 54, 56, 58, 60, 71], "globaltimer_start": [28, 52, 54, 56, 58, 60, 71], "globaltimercancel": [29, 52, 54, 56, 58, 60, 79], "globaltimertrig": [29, 52, 54, 56, 58, 60, 79], "gmail": [187, 192], "go": [185, 186, 197, 202, 204, 205], "govern": [201, 205], "group": [24, 204, 205], "gui": [175, 197], "guidanc": [184, 186], "h": 136, "ha": [138, 140, 185, 186, 197, 205], "habitu": [201, 205], "handl": [52, 54, 56, 58, 60, 149, 158, 160, 163, 184, 186, 187, 189], "handler": [52, 54, 56, 58, 60], "handshak": [52, 54, 56, 58, 60, 134, 136], "handshake_ok": 134, "happen": [197, 205], "hardwar": [52, 54, 56, 58, 60, 65, 136, 149, 158, 160, 163, 187, 188], "hardware_descript": 136, "hardwareinfocontain": 73, "harm": [197, 205], "hat": [187, 188], "have": [99, 138, 140, 158, 185, 186, 187, 188, 196, 197, 201, 205], "hdmi": [185, 186], "header": [134, 136], "health": [197, 205], "heartbeat": [197, 205], "heavier": [184, 186], "help": [183, 186, 197, 201, 202, 205], "here": [158, 160, 184, 185, 186, 199, 205], "high": [197, 205], "hint": [138, 140], "histori": 111, "hit": [138, 140], "hold": [158, 163], "home": [185, 186, 194, 195], "host_timestamp": [99, 101, 103, 105, 107, 109, 115, 117, 119, 121, 123, 127, 129, 131], "hour": [197, 205], "hous": [187, 191], "how": [184, 189, 197, 201, 205], "howev": [185, 186, 202, 205], "http": [41, 185, 186], "hw_info_contain": 73, "hw_output": 65, "hx711": [185, 186], "hygien": [200, 205], "i": [23, 24, 52, 54, 56, 58, 60, 64, 94, 134, 136, 138, 140, 158, 160, 163, 184, 185, 186, 188, 189, 191, 192, 193, 196, 197, 199, 200, 201, 202, 205], "i2cdetect": [185, 186], "id": [52, 54, 56, 58, 60, 89, 101, 204, 205], "identifi": [185, 186], "idx": 39, "ignor": [197, 205], "imag": [185, 186, 194, 195], "immedi": [138, 140], "implement": [138, 140, 201, 205], "improv": [197, 205], "includ": [146, 181, 182, 185, 186, 187, 189, 199, 200, 205], "increas": [187, 189, 201, 205], "index": [24, 107, 109, 115], "indic": [138, 140, 197, 201, 205], "ineffici": 158, "infonam": 113, "inform": [73, 101, 146, 200, 205], "infovalu": 113, "infrar": [184, 186], "inherit": [201, 205], "init": [201, 205], "initi": [52, 54, 56, 58, 60, 136, 187, 188, 201, 205], "inlin": [183, 186], "inner": [197, 205], "input": [52, 54, 56, 58, 60, 64, 65, 71, 76, 136, 149, 158, 160, 163], "input_matrix": 158, "insert": [185, 186], "insid": [184, 185, 186, 187, 193, 197, 200, 205], "inspir": 41, "instal": [187, 191, 194, 195, 196, 199, 202, 205], "instanc": [149, 158, 160, 163], "instead": [185, 186], "instruct": [184, 185, 199, 202, 204, 205], "int": [23, 24, 52, 54, 56, 58, 60, 89, 107, 109, 115, 149, 158, 160, 163], "integ": [149, 158, 160, 163], "integr": [187, 191, 193], "interact": [54, 138, 140, 187, 188, 191], "interfac": [94, 185, 186], "interfer": [197, 205], "intern": [149, 158, 160, 163], "internet": [185, 186, 196, 197, 202, 205], "intersess": [197, 205], "involv": [201, 205], "io": [138, 140], "ip": [202, 205], "ir": [184, 186, 197, 205], "is_condit": [28, 52, 54, 56, 58, 60, 69, 71], "is_global_counter_end": [28, 52, 54, 56, 58, 60, 69, 71], "is_global_timer_cancel": [28, 52, 54, 56, 58, 60, 69, 71], "is_global_timer_end": [28, 52, 54, 56, 58, 60, 69, 71], "is_global_timer_start": [28, 52, 54, 56, 58, 60, 69, 71], "is_global_timer_trigg": [28, 52, 54, 56, 58, 60, 69, 71], "is_run": [158, 163], "is_state_tim": [28, 52, 54, 56, 58, 60, 69, 71], "isatti": [138, 140], "iso": [185, 186, 194, 195], "issu": [197, 202, 205], "item": [185, 186], "its": [23, 185, 186, 187, 188, 189, 197, 199, 205], "itself": [197, 205], "ivar": 158, "j": 136, "jitteri": [185, 186], "john": [52, 54, 56, 58, 60], "jump": [185, 186], "just": [185, 186, 197, 205], "k": 136, "keep": [158, 160, 184, 186], "kei": [23, 24, 125, 149, 158, 160, 163, 187, 191], "kept": [158, 160], "kernel": [185, 186], "keyboard": [185, 186, 196, 202, 205], "kill": 39, "know": [197, 205], "kwd": [5, 6, 7, 8, 9, 10, 11, 12, 14], "l": [136, 197, 205], "lab": [187, 192], "languag": [185, 186], "larger": [187, 189], "laser": [187, 189], "last": [197, 205], "learn": [197, 201, 205], "led": [52, 54, 56, 58, 60, 63], "legaci": [149, 158, 160, 163], "length": [138, 140], "less": [158, 185, 186, 197, 205], "let": [196, 201, 205], "level": [201, 205], "libportaudio2": [185, 186], "libqt5multimedia5": [185, 186], "librari": [158, 160], "lick": [201, 205], "lick_teach": [201, 205], "lid": [184, 186, 187, 189], "light": [201, 205], "like": [52, 56, 58, 60, 101, 158, 160, 187, 188, 197, 205], "line": [101, 111, 138, 140, 185, 186, 197, 205], "link": [0, 149, 158, 160, 163, 185, 186, 187, 189, 191], "linux": [185, 186], "list": [23, 24, 52, 54, 56, 58, 60, 89, 111, 117, 119, 125, 138, 140, 146, 149, 158, 160, 163, 199, 205], "listen": [149, 158, 160, 163], "lite": [202, 205], "live": [187, 191, 193], "ll": [184, 186, 202, 205], "load": [52, 54, 56, 58, 60, 89, 136], "load_cont": 111, "load_messag": 89, "load_serial_messag": [52, 54, 56, 58, 60, 134, 136], "load_serial_message_ok": 134, "log": [202, 205], "logic": [52, 54, 56, 58, 60, 160, 163, 201, 205], "login": [185, 186], "long": [187, 191, 197, 205], "look": [201, 205], "loop": [52, 54, 56, 58, 60], "loop_handl": [52, 54, 56, 58, 60], "loop_interv": [149, 158, 160, 163], "loop_mod": [149, 158, 160, 163], "lose": [197, 205], "lost": [197, 205], "lot": [158, 160, 197, 205], "low": [187, 188], "lower": [184, 186], "lower_cas": [201, 205], "m": [136, 185, 186], "machin": [52, 54, 56, 58, 60, 117, 119, 149, 158, 160, 163], "made": [187, 189], "mai": [99, 185, 186], "main": [65, 185, 186, 200, 205], "main_set": 24, "maintain": [200, 205], "mainten": [184, 186], "make": [184, 185, 186, 197], "manag": [185, 186, 200, 205], "mani": [197, 205], "manifest": 158, "manual": [52, 56, 58, 60, 136, 183, 185, 186, 197, 200, 205], "manual_overrid": [52, 56, 58, 60], "manual_override_exec_ev": 136, "marinraf": [187, 192], "mask": [197, 200, 205], "match": [185, 186], "matlab": [158, 160], "matrix": [136, 149, 158, 160, 163], "max_stat": [151, 153, 155], "mean": [197, 205], "mechan": [184, 186, 187, 189], "mention": [184, 186], "menu": [196, 205], "messag": [31, 35, 52, 54, 56, 58, 60, 89, 99, 103, 105, 107, 109, 111, 113, 115, 121, 123, 127, 129, 131, 134, 136, 149, 160, 163], "message_api": 54, "message_id": [52, 54, 56, 58, 60], "messageapi": 54, "meta_output_nam": 158, "meth": 111, "method": [3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 28, 29, 30, 33, 34, 38, 39, 42, 45, 49, 52, 54, 56, 58, 60, 63, 64, 65, 66, 69, 71, 73, 76, 79, 81, 84, 89, 91, 94, 95, 96, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 134, 136, 138, 140, 146, 147, 149, 151, 153, 155, 158, 160, 163, 167, 168, 172, 175, 177, 179, 201, 205], "mice": [184, 186, 197, 200, 205], "micro": [185, 186], "microcontrol": [184, 186], "microsecond": 158, "might": [197, 205], "mind": [158, 160], "mini": [187, 188], "minut": [197, 205], "misalign": [197, 205], "misplac": [197, 205], "mm": [184, 186], "mode": [52, 54, 56, 58, 60, 136], "model": [52, 54, 56, 58, 60, 111, 185, 186], "modifi": [185, 186, 201, 205], "modul": [1, 5, 6, 7, 8, 9, 10, 11, 12, 14, 36, 47, 50, 51, 52, 54, 56, 58, 60, 61, 65, 67, 73, 74, 77, 87, 89, 92, 97, 132, 134, 136, 141, 148, 165, 173, 185, 186], "module_event_nam": 134, "module_nam": 89, "module_requested_ev": 134, "monitor": [149, 158, 160, 163, 184, 185, 186, 187, 188, 193], "month": [200, 205], "more": [138, 140, 187, 189, 191, 197, 201, 205], "most": [138, 140, 187, 189], "motor": [184, 185, 186, 187, 188, 197, 205], "motor_set": 24, "mount": [184, 186], "mous": [184, 185, 186, 187, 189, 194, 195, 196, 197, 202, 205], "move": [197, 201, 205], "movement": [197, 205], "msg": [89, 138, 140], "msg_id": 89, "multimedia": [185, 186], "must": [63, 64, 71, 76, 79, 138, 140, 149, 158, 160, 163, 187, 188, 201, 204, 205], "mv": [200, 205], "my_bpod": [52, 54, 56, 58, 60], "n_condit": 151, "n_global_count": 153, "n_global_tim": 155, "n_serial_ev": 89, "name": [3, 5, 6, 7, 8, 9, 10, 11, 12, 14, 23, 26, 52, 54, 56, 58, 60, 63, 65, 96, 101, 107, 109, 115, 117, 119, 125, 134, 136, 149, 158, 160, 163, 201, 205], "name_of_the_project": [201, 205], "nano": [185, 186], "navig": [185, 186], "necessari": [185, 186, 187, 188, 192, 199, 200, 205], "need": [184, 197, 199, 200, 201, 202, 205], "neg": [138, 140], "net_port": 54, "network": [197, 202, 205], "never": [197, 204, 205], "new": [52, 54, 56, 58, 60, 136, 138, 140, 185, 186, 197, 201, 204, 205], "new_sma_s": 54, "new_state_matrix": 136, "newbot": [204, 205], "newlin": [138, 140], "next": [185, 186], "night": [187, 193], "noir": [185, 186], "non": [138, 140, 202, 205], "none": [5, 6, 7, 8, 9, 10, 11, 12, 14, 24, 26, 39, 52, 54, 56, 58, 60, 89, 99, 101, 103, 105, 107, 109, 113, 115, 121, 123, 125, 127, 129, 131, 138, 140, 146, 149, 158, 160, 163, 168, 185, 186], "note": [185, 186], "notif": [187, 193], "novel": [197, 205], "now": [136, 185, 186, 196, 201, 202, 205], "number": [52, 54, 56, 58, 60, 136, 138, 140, 149, 158, 160, 163, 185, 186, 197, 201, 205], "o": [60, 136, 199, 202, 205], "object": [16, 17, 18, 19, 20, 21, 23, 24, 26, 30, 33, 34, 39, 49, 52, 54, 56, 58, 60, 63, 64, 65, 66, 69, 73, 76, 79, 81, 84, 89, 91, 94, 95, 96, 99, 111, 134, 136, 138, 140, 146, 147, 151, 153, 155, 158, 167, 168, 172, 177, 179], "obtain": [73, 204, 205], "occur": [149, 158, 160, 163, 197, 205], "occurr": [117, 119, 125], "off": [197, 205], "off_messag": [149, 158, 160, 163], "offer": [187, 191], "offset": [138, 140], "often": [197, 205], "omit": [138, 140], "on_messag": [149, 158, 160, 163], "on_set_delai": [149, 158, 160, 163], "onc": [196, 197, 200, 201, 202, 205], "one": [52, 54, 56, 58, 60, 136, 138, 140, 149, 158, 160, 163, 185, 186, 187, 191, 193, 201, 205], "ones": [187, 193], "oneset_trigg": [149, 158, 160, 163], "onli": [138, 140, 185, 186, 197, 199, 201, 205], "opcod": [52, 54, 56, 58, 60], "open": [39, 52, 54, 56, 58, 60, 94, 196, 197, 202, 204, 205], "opencv": [185, 186], "oper": [138, 140, 185, 186, 196, 199, 202, 205], "option": [52, 54, 56, 58, 60, 185, 186, 187, 188, 191, 202, 205], "order": [197, 205], "organ": [201, 205], "orient": [184, 186], "origin": [99, 158, 160, 184, 186], "oserror": [138, 140], "other": [184, 185, 186, 187, 191, 202, 204, 205], "otherwis": [52, 54, 56, 58, 60], "our": [187, 192], "out": [52, 56, 58, 60], "output": [52, 54, 56, 58, 60, 64, 65, 79, 149, 158, 160, 163], "output_act": [149, 158, 160, 163], "output_matrix": 158, "outputchannel": [29, 52, 54, 56, 58, 60], "overdetect": [197, 205], "overlap": [197, 205], "overrid": [52, 54, 56, 58, 60, 136, 138, 140], "override_digital_hw_st": 136, "own": [187, 193, 199, 201, 205], "pa1_port1in": [28, 52, 54, 56, 58, 60, 71], "packag": [185, 186], "page": [183, 185, 186, 202, 205], "panel": [185, 186], "param": [52, 54, 56, 58, 60, 94, 149, 158, 160, 163], "paramet": [28, 52, 54, 56, 58, 60, 65, 69, 71, 73, 89, 107, 109, 111, 115, 117, 119, 125, 129, 149, 158, 160, 163, 201, 205], "pars": 111, "part": [183, 187, 189], "particip": [204, 205], "particular": 23, "password": [185, 186], "path": [52, 54, 56, 58, 60, 146, 185, 186], "pattern": [185, 186], "pc": [99, 197, 205], "pdf": [183, 186], "perform": [56, 58, 187, 191, 193, 196, 197, 201, 202, 205], "persist": [197, 205], "person": [197, 205], "phone": [202, 205], "photog": [197, 205], "physic": [185, 186], "pi": [187, 188, 189, 196, 199, 202, 205], "piec": [199, 205], "piezoelectr": [184, 186], "pin2": [185, 186], "pitch": [197, 205], "place": [199, 205], "plai": [187, 188, 197, 205], "plan": [199, 205], "plastic": [187, 189], "pleas": [183, 186], "plot": [197, 205], "plug": [187, 188, 197, 205], "plugin": [185, 186], "po": [138, 140], "poorli": [197, 205], "port": [28, 39, 52, 54, 56, 58, 60, 71, 76, 136, 149, 158, 160, 163, 185, 186, 187, 191, 197, 201, 205], "port1": [28, 52, 54, 56, 58, 60, 71, 76], "port1in": [28, 52, 54, 56, 58, 60, 71], "port1lit": [149, 158, 160, 163], "port1out": 125, "port2": 76, "port2in": 125, "port2out": 125, "port3": 76, "port3in": 125, "port3lit": [149, 158, 160, 163], "port3out": 125, "port4": 76, "port5": 76, "port6": 76, "port7": 76, "port8": 76, "posit": [138, 140, 149, 158, 160, 163, 184, 186], "possibl": 24, "power": [184, 185, 186, 187, 188, 197, 202, 205], "pre": [185, 186, 194, 195, 199, 205], "precis": 158, "prefer": [199, 205], "preinstal": [185, 186], "present": [185, 186], "prevent": [184, 186], "previous": [149, 158, 160, 163], "print": [123, 183, 187, 189], "privat": [56, 58], "pro": [185, 186], "problem": [197, 200, 205], "proce": [185, 186], "process": [52, 54, 56, 58, 60, 81, 84, 103, 105, 113, 121, 127, 129, 185, 186, 201, 205], "program": 158, "progress": [200, 201, 205], "project": [187, 192], "promot": [187, 191], "proper": [200, 205], "properli": [185, 186, 200, 205], "properti": [146, 201, 205], "protocol": [52, 54, 56, 58, 60, 123, 187, 193, 201, 205], "provid": [138, 140, 183, 184, 185, 186, 187, 188, 191, 200, 205], "pulseaudio": [185, 186], "pump": [184, 186, 197, 205], "purchas": [184, 186], "purpos": [187, 191], "push": [184, 186], "pwm": [52, 54, 56, 58, 60, 63, 185, 186], "pwm1": [149, 158, 160, 163], "pwm2": [149, 158, 160, 163], "py": [111, 129, 185, 186, 201, 205], "pybpodapi": [52, 54, 56, 58, 60, 158, 160], "pybpodgui_plugin": [103, 105, 111, 113, 121, 123, 127, 129], "pybpodprotocol": [38, 40], "pyqt5": [185, 186], "python": [94, 158, 160, 187, 191, 201, 205], "python3": [185, 186], "qtmultimedia": [185, 186], "qualiti": [184, 186], "qualnam": [5, 6, 7, 8, 9, 10, 11, 12, 14], "qwidget": 175, "r": 136, "rais": [138, 140], "rang": [149, 158, 160, 163, 187, 188], "rare": [197, 205], "raspberri": [187, 188, 189, 196, 199, 202, 205], "raspi": [185, 186, 202, 205], "rat": [187, 189], "re": [185, 186], "reach": [138, 140, 201, 205], "read": [81, 84, 138, 140], "readabl": [138, 140], "reader": [184, 186, 187, 188], "readi": [185, 186], "readlin": [138, 140], "real": [187, 193], "realli": [185, 186], "realvnc": [202, 205], "reason": [196, 202, 205], "receiv": [52, 56, 58, 60, 73, 134, 187, 189, 193, 204], "recogn": [185, 186], "recogniz": [185, 186], "recommend": [197, 202, 205], "reconnect": [197, 205], "record": [197, 205], "reduc": 158, "refer": [185, 186], "referenc": [149, 158, 160, 163], "refil": [197, 205], "regard": [187, 193], "regardless": [185, 186, 202, 205], "regist": [52, 54, 56, 58, 60], "regress": [201, 205], "regul": [187, 188, 191], "regular": [197, 205], "rel": [138, 140], "relai": 136, "releas": [52, 54, 56, 58, 60], "reliabl": [184, 186, 187, 188], "reload": [197, 205], "remot": [185, 186, 187, 193, 197, 199], "remov": [185, 186, 197, 200, 205], "render": [185, 186], "repeat": 158, "repetit": 125, "replac": [149, 160, 163, 197, 205], "repo": [185, 186], "report": [197, 200, 205], "repositori": [187, 192, 201, 205], "repres": [54, 73, 99, 101, 103, 105, 107, 109, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 201, 205], "represent": [23, 24], "request": [56, 58, 134, 136], "requir": [187, 189, 199, 200, 201, 205], "reset": [52, 54, 56, 58, 60, 136], "reset_clock": 136, "reset_serial_messag": [52, 54, 56, 58, 60, 134, 136], "resolut": [185, 186, 196, 202, 205], "resolv": [197, 205], "resourc": [187, 192], "respons": [197, 205], "rest": [187, 191], "restart": [197, 205], "retriev": [52, 54, 56, 58, 60, 138, 140], "return": [24, 28, 39, 40, 43, 46, 52, 54, 56, 58, 60, 65, 69, 71, 94, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 136, 138, 140, 146, 149, 158, 160, 163, 197, 201, 205], "review": [197, 200, 205], "reward": [184, 186], "rfid": [184, 185, 186, 187, 188, 189, 191, 197, 205], "right": [185, 186, 201, 205], "rigid": [184, 186], "rise": [197, 205], "rodent": [187, 193], "room": [197, 205], "routin": [200, 205], "row": [99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131], "rtype": [52, 54, 56, 58, 60], "run": [52, 54, 56, 58, 60, 136, 146, 158, 163, 185, 186, 187, 188, 189, 196, 197, 201, 205], "run_asap": [52, 54, 56, 58, 60], "run_state_machin": [52, 54, 56, 58, 60, 134, 136], "run_villag": [196, 205], "same": [197, 202, 205], "save": 111, "savvi": [201, 205], "scale": [187, 189, 197, 205], "scaleprotocol": [42, 43], "scheme": 136, "scipi": [185, 186], "sck": 81, "score": [197, 205], "screen": [196, 197, 202, 205], "screen_set": 24, "screenshot": [197, 205], "script": [197, 201, 205], "sd": [185, 186, 199, 205], "seamless": [187, 188], "search": [52, 54, 56, 58, 60, 204, 205], "second": [149, 158, 160, 163, 197, 205], "section": [184, 186, 187, 189, 192, 200, 202, 205], "see": [149, 158, 160, 163, 185, 186, 197, 202, 205], "seealso": 129, "seek": [138, 140], "seekabl": [138, 140], "select": [185, 186, 204, 205], "self": [201, 205], "send": [39, 52, 54, 56, 58, 60, 89, 136, 149, 160, 163, 187, 189, 197, 204, 205], "send_ev": [149, 158, 160, 163], "send_state_machin": [52, 54, 56, 58, 60], "send_to_hw_seri": 136, "sensor": [184, 185, 186, 187, 188, 189, 191], "sent": 136, "separ": [138, 140], "sergi": [197, 205], "serial": [29, 52, 54, 56, 58, 60, 63, 79, 94, 136, 197, 205], "serial1": [29, 52, 54, 56, 58, 60, 76, 79], "serial1_3": 76, "serial1_4": 76, "serial2": 76, "serial3": 76, "serial_channel": [52, 54, 56, 58, 60], "serial_messag": [52, 54, 56, 58, 60], "serial_port": [52, 54, 56, 58, 60, 89, 94], "serialportnam": 94, "serv": [187, 191], "server": [103, 105, 113, 121, 127, 129, 202, 205], "servo": [187, 188], "session": [39, 52, 54, 56, 58, 60, 99, 111, 136, 138, 140, 197, 201, 205], "session_io": 111, "session_nam": [52, 54, 56, 58, 60], "sessionio": 111, "set": [52, 54, 56, 58, 60, 63, 64, 71, 73, 76, 79, 136, 138, 140, 149, 158, 160, 163, 196, 197, 202, 204, 205], "set_condit": [149, 158, 160, 163], "set_global_count": [149, 158, 160, 163], "set_global_tim": [149, 158, 160, 163], "set_global_timer_legaci": [149, 158, 160, 163], "set_module_relai": 136, "setup": [73, 184, 186, 187, 188], "setup_input_channel": 65, "setup_output_channel": 65, "setuptools_scm": [185, 186], "sever": [187, 191, 201, 205], "share": [187, 189, 204, 205], "should": [52, 54, 56, 58, 60, 138, 140, 149, 158, 160, 163, 196, 197, 205], "sht31": [185, 186], "sick": [197, 205], "signal": [187, 189], "simpl": [201, 205], "simple_task": [201, 205], "simpletask": [201, 205], "simpli": [185, 186, 196, 202, 205], "simplifi": [94, 187, 188, 201, 205], "site": [185, 186], "size": [96, 138, 140, 187, 189], "sleep": [197, 205], "slightli": [197, 205], "slot": [184, 186], "sma": [52, 54, 56, 58, 60, 125, 149, 158, 160, 163], "so": [138, 140, 158, 160, 185, 186, 197, 205], "social": [187, 191], "soft": [52, 54, 56, 58, 60, 136], "softcod": [29, 52, 54, 56, 58, 60, 79, 115, 197, 205], "softcode1": [29, 52, 54, 56, 58, 60, 79], "softcode_handler_funct": [52, 54, 56, 58, 60], "softwar": [187, 188, 189, 199], "solut": [187, 191], "some": [196, 197, 202, 205], "someth": [197, 200, 205], "sometim": [197, 205], "sort": [184, 186], "sound": [185, 186, 197, 205], "sound_set": 24, "sounddevic": [185, 186], "sourc": [3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 28, 29, 30, 31, 33, 34, 35, 38, 39, 40, 42, 43, 45, 46, 49, 52, 54, 56, 58, 60, 63, 64, 65, 66, 69, 71, 73, 76, 79, 81, 82, 84, 85, 89, 91, 94, 95, 96, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 134, 136, 138, 140, 143, 146, 147, 149, 151, 153, 155, 157, 158, 160, 161, 163, 164, 167, 168, 170, 172, 175, 177, 179, 184, 185, 186], "space": [199, 205], "special": [187, 188], "specif": [63, 64, 71, 76, 79, 117, 119, 185, 186, 200, 205], "specifi": [138, 140, 185, 186], "sporad": [197, 205], "stabil": [184, 186], "stage": [197, 201, 205], "standard": [201, 205], "start": [5, 6, 7, 8, 9, 10, 11, 12, 14, 52, 54, 56, 58, 60, 117, 119, 138, 140, 149, 158, 160, 163, 185, 186, 196, 197, 201, 204], "start_tim": 113, "state": [52, 54, 56, 58, 60, 107, 109, 115, 117, 119, 125, 136, 138, 140, 149, 158, 160, 163], "state_change_condit": [149, 158, 160, 163], "state_machin": [52, 54, 56, 58, 60], "state_machine_installation_statu": 134, "state_nam": [117, 119, 149, 158, 160, 163], "state_tim": [149, 158, 160, 163], "state_timer_matrix": 158, "statedur": [117, 119], "statemachin": [52, 54, 56, 58, 60, 125], "statemachinebas": 160, "statemachinebuild": 163, "statemachinerunn": 149, "statement": 123, "stateoccurr": 125, "states_occurr": 125, "static": [28, 52, 54, 56, 58, 60, 69, 71], "statu": [187, 193, 197, 205], "stderr": [81, 84, 103, 105, 113, 121, 127, 129], "stdout": [81, 84], "step": [185, 186, 202, 205], "still": [149, 158, 160, 163, 197, 205], "stimuli": [185, 186, 187, 191], "stl": [184, 186], "stop": [52, 54, 56, 58, 60, 184, 186, 197, 205], "store": [117, 119, 146, 185, 186], "str": [23, 24, 28, 52, 54, 56, 58, 60, 69, 71, 107, 109, 111, 115, 117, 119, 125, 149, 158, 160, 163], "straightforward": [201, 205], "stream": [81, 84, 138, 140, 147], "strength": [187, 189], "string": [23, 24, 138, 140, 149, 158, 160, 163], "stringio": [138, 140], "structur": [158, 160, 184, 186], "stuck": [197, 205], "subclass": [138, 140], "subfold": [201, 205], "subject": [197, 201, 205], "suboptim": [202, 205], "subscript": [202, 205], "success": 134, "sucros": [200, 205], "sudo": [185, 186], "suffici": [201, 205], "summari": [197, 205], "super": [201, 205], "superenum": [5, 6, 7, 8, 9, 10, 11, 12, 13], "supplement": [197, 205], "suppli": [184, 185, 186, 197, 205], "supplier": [184, 186], "support": [52, 54, 56, 58, 60, 63, 183, 184, 186], "sure": [184, 185, 186, 197, 205], "suspect": [197, 200, 205], "symbol": [185, 186], "symlink": [185, 186], "sync": [52, 54, 56, 58, 60, 136, 149, 158, 160, 163], "sync_channel": [52, 54, 56, 58, 60], "sync_channel_mod": [134, 136], "sync_channel_mode_ok": 134, "sync_mod": [52, 54, 56, 58, 60], "synchron": [52, 54, 56, 58, 60, 149, 158, 160, 163], "system": [24, 183, 184, 187, 188, 189, 191, 193, 194, 195, 196, 199, 200, 202], "t": [136, 138, 140, 158, 184, 186, 197, 201, 205], "tab": [204, 205], "tag": [197, 205], "take": [149, 158, 160, 163], "target_ev": [149, 158, 160, 163], "task": [101, 187, 188, 191, 193, 197], "task_simpl": [201, 205], "team": [202, 205], "telegram": [185, 186, 187, 193, 200], "telegram_chat": [204, 205], "telegram_set": 24, "telegram_token": [204, 205], "tell": [138, 140], "temperatur": [185, 186, 187, 188, 197, 205], "tempsensorprotocol": [45, 46], "tend": [197, 205], "termin": [185, 186, 196, 197, 205], "test": [52, 54, 56, 58, 60, 197, 202, 205], "text": [138, 140, 185, 186, 204, 205], "textio": [138, 140], "textiobas": [138, 140], "than": [52, 54, 56, 58, 60, 158, 185, 186, 197, 205], "thei": [24, 149, 160, 163, 184, 186, 197, 201, 205], "them": [184, 186, 197, 201, 205], "thi": [52, 54, 56, 58, 60, 107, 109, 115, 117, 119, 138, 140, 149, 158, 160, 163, 183, 185, 186, 187, 188, 189, 197, 200, 201, 202, 204, 205], "thing": 101, "three": [187, 191], "threshold": [149, 158, 160, 163, 197, 205], "through": [52, 54, 56, 58, 60, 89, 187, 193], "time": [149, 158, 160, 163, 187, 193, 196, 197, 201, 202, 205], "timeout": 94, "timer": [149, 158, 160, 163], "timer_dur": [149, 158, 160, 163], "timer_id": [149, 158, 160, 163], "timestamp": [52, 54, 56, 58, 60, 107, 109, 115, 117, 119, 125, 136], "todo": [0, 158, 181, 182, 185, 186], "togeth": [187, 191], "tool": [185, 186], "toolbar": [185, 186], "top": [187, 188, 196, 197, 205], "total": [138, 140], "total_states_ad": 158, "touch": [197, 205], "touchscreen": [187, 191, 194, 195, 197, 205], "touchscreen_set": 24, "train": [183, 184, 189, 192, 193, 196, 197, 200, 201, 205], "training_protocol": [201, 205], "transact": 94, "transit": [149, 158, 160, 163, 201, 205], "transmiss": [136, 197, 205], "transpar": [184, 186, 187, 191], "trap": [197, 205], "trial": [52, 54, 56, 58, 60, 146, 158, 197, 201, 205], "trial_start_timestamp": 125, "trigger": [136, 149, 158, 160, 163, 185, 186, 197], "trigger_softcod": 136, "true": [99, 101, 103, 105, 107, 109, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 138, 140, 197, 205], "truncat": [138, 140], "try": [197, 201, 205], "tty": [52, 54, 56, 58, 60], "ttyacm": [185, 186], "ttyacm0": [185, 186], "ttyacm1": [185, 186], "ttyacm2": [185, 186], "tube": [187, 191], "tunnel": [184, 186], "tup": [28, 52, 54, 56, 58, 60, 71], "tupl": [149, 158, 160, 163], "turn": [197, 205], "two": [185, 186, 187, 188, 189, 191, 193, 197, 200, 201, 205], "txt": [185, 186], "txtline": 111, "type": [3, 5, 6, 7, 8, 9, 10, 11, 12, 14, 23, 24, 28, 39, 40, 43, 46, 52, 54, 56, 58, 60, 64, 69, 71, 111, 125, 136, 146, 149, 160, 163, 185, 186, 187, 191], "typestr": [99, 101, 103, 105, 107, 109, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131], "typic": [185, 186], "u": 136, "udevadm": [185, 186], "unchang": [138, 140], "undeclar": [149, 158, 160, 163], "under": [187, 189, 191], "underli": [138, 140], "understand": [185, 186], "unexpectedli": [197, 205], "uniqu": [52, 54, 56, 58, 60, 149, 158, 160, 163], "unless": [184, 186, 197, 205], "unlik": [149, 158, 160, 163], "unplug": [197, 205], "unrel": [197, 205], "until": [138, 140, 149, 158, 160, 163], "unus": [138, 140], "up": [73, 184, 186, 202, 205], "updat": [52, 54, 56, 58, 60, 187, 188], "update_state_numb": [149, 160, 163], "upgrad": [185, 186], "upload": 54, "upper": [184, 186], "us": [52, 54, 56, 58, 60, 89, 138, 140, 149, 158, 160, 163, 183, 184, 187, 189, 191, 193, 199, 201, 202], "usag": [185, 186], "usb": [197, 205], "usb1": 76, "usbmodem1293": [52, 54, 56, 58, 60], "user": [52, 54, 56, 58, 60, 187, 193, 201, 204], "usernam": [185, 186], "username_to_id_bot": [204, 205], "usual": [81, 84, 138, 140, 185, 186, 197, 205], "v": [136, 185, 186], "valid": [149, 158, 160, 163], "valu": [5, 6, 7, 8, 9, 10, 11, 12, 14, 23, 24, 52, 56, 58, 60, 63, 64, 71, 76, 79, 125, 129, 149, 158, 160, 163, 185, 186], "value_nam": 129, "value_typ": 23, "valueerror": [138, 140], "valv": [29, 52, 54, 56, 58, 60, 63, 79, 197, 205], "vari": [185, 186], "variabl": [54, 107, 109, 115, 117, 119, 125, 158, 163, 201, 205], "variou": [184, 186], "vc4": [185, 186], "ventil": [197, 205], "venv": [185, 186], "veri": [197, 205], "verifi": [185, 186, 197, 205], "version": [52, 54, 56, 58, 60, 149, 158, 160, 163, 187, 189, 201, 205], "via": [149, 158, 160, 163, 187, 191, 197, 205], "video": [185, 186, 187, 188, 197, 205], "view": [183, 184, 186], "viewer": [202, 205], "villag": [183, 184, 189, 192, 193, 194, 195, 196, 201, 205], "village_project": [201, 205], "virtual": [136, 158], "wa": [54, 197, 205], "wai": [202, 205], "wait": [197, 205], "walk": [197, 205], "want": [185, 186], "water": [184, 186, 197, 200, 205], "wayland": [185, 186], "we": [183, 186, 187, 188, 189, 191, 201, 202, 205], "web": [185, 186], "webpag": [202, 205], "week": [200, 205], "weigh": [197, 205], "weight": [185, 186, 187, 188, 189, 197, 205], "welcom": [158, 160], "welfar": [187, 191], "well": [197, 199, 205], "were": [149, 160, 163], "what": [184, 197, 205], "when": [23, 24, 52, 54, 56, 58, 60, 149, 158, 160, 163, 184, 185, 186, 197, 200, 201, 205], "whenc": [138, 140], "whenev": [185, 186], "where": [149, 158, 160, 163, 184, 185, 186, 187, 191, 197, 201, 205], "whether": [54, 138, 140, 158, 163], "which": [138, 140, 158, 160, 187, 189, 191, 201, 205], "while": [52, 54, 56, 58, 60, 163, 187, 188], "white": [184, 186, 187, 189], "whole": [158, 160, 187, 189], "whose": [125, 149, 158, 160, 163], "why": [197, 205], "wi": [185, 186], "wide": [185, 186, 187, 188], "window": [202, 205], "wire": [28, 29, 52, 54, 56, 58, 60, 63, 71, 79, 202, 205], "wire1": [29, 52, 54, 56, 58, 60, 76, 79], "wire1high": [28, 29, 52, 54, 56, 58, 60, 71, 79], "wire2": 76, "within": [201, 205], "without": [125, 184, 186], "won": 158, "work": [185, 186, 197, 200, 201, 205], "workspace_path": [52, 54, 56, 58, 60], "writabl": [138, 140], "write": [52, 56, 58, 60, 136, 138, 140, 204, 205], "write_to_modul": 136, "writelin": [138, 140], "written": [138, 140, 201, 205], "wrong": [197, 205], "x": [136, 185, 186, 197, 205], "x11": [185, 186], "y": [185, 186], "ye": [185, 186, 197, 205], "yet": 158, "you": [149, 158, 160, 163, 183, 184, 187, 192, 196, 197, 199, 200, 201, 202, 205], "your": [158, 183, 185, 186, 196, 199, 201, 202, 204, 205], "yourself": [199, 205], "z": 136, "zero": [149, 158, 160, 163], "zone": [197, 205], "\u00b5l": [197, 205]}, "titles": ["&lt;no title&gt;", "classes", "collection", "Collection", "enums", "Actions", "Active", "AreaActive", "Color", "Cycle", "DataTable", "Info", "ScreenActive", "State", "SuperEnum", "protocols", "CameraProtocol", "EventProtocol", "PyBpodProtocol", "ScaleProtocol", "TelegramBotProtocol", "TempSensorProtocol", "settings_class", "Setting", "Settings", "subject", "Subject", "task", "Event", "Output", "Task", "village.classes.task.TaskError", "training", "Settings", "Training", "village.classes.training.TrainingError", "devices", "bpod", "PyBpod", "Softcode", "get_bpod", "scale", "Scale", "get_scale", "temp_sensor", "TempSensor", "get_temp_sensor", "gui", "log", "Log", "pybpodapi", "bpod", "Bpod", "bpod_base", "BpodBase", "bpod_com_protocol", "BpodCOMProtocol", "bpod_com_protocol_modules", "BpodCOMProtocolModules", "bpod_io", "BpodIO", "hardware", "channels", "ChannelName", "ChannelType", "Channels", "EventsPositions", "events", "base_eventname", "BaseEventName", "bpod_events", "EventName", "hardware", "Hardware", "input_channels", "bpod_input_channels", "InputName", "output_channels", "bpod_output_channels", "OutputChannel", "non_blockingsocketreceive", "NonBlockingSocketReceive", "village.pybpodapi.bpod.non_blockingsocketreceive.UnexpectedEndOfStream", "non_blockingstreamreader", "NonBlockingStreamReader", "village.pybpodapi.bpod.non_blockingstreamreader.UnexpectedEndOfStream", "settings", "bpod_modules", "bpod_module", "BpodModule", "bpod_modules", "BpodModules", "com", "arcom", "ArCOM", "ArduinoTypes", "DataType", "messaging", "base_message", "BaseMessage", "debug", "DebugMessage", "end_trial", "EndTrial", "error", "ErrorMessage", "event_occurrence", "EventOccurrence", "event_resume", "EventResume", "parser", "MessageParser", "session_info", "SessionInfo", "softcode_occurrence", "SoftcodeOccurrence", "state_occurrence", "StateOccurrence", "state_transition", "StateTransition", "stderr", "StderrMessage", "stdout", "StdoutMessage", "trial", "Trial", "untagged_message", "UntaggedMessage", "value", "ValueMessage", "warning", "WarningMessage", "protocol", "recv_msg_headers", "ReceiveMessageHeader", "send_msg_headers", "SendMessageHeader", "stderr_buffer", "StderrBuffer", "stdout_buffer", "StdoutBuffer", "exceptions", "bpod_error", "village.pybpodapi.exceptions.bpod_error.BpodErrorException", "protocol", "session", "Session", "StreamsWrapper", "state_machine", "StateMachine", "conditions", "Conditions", "global_counters", "GlobalCounters", "global_timers", "GlobalTimers", "state_machine_base", "village.pybpodapi.state_machine.state_machine_base.SMAError", "StateMachineBase", "state_machine_builder", "StateMachineBuilder", "village.pybpodapi.state_machine.state_machine_builder.StateMachineBuilderError", "state_machine_runner", "StateMachineRunner", "village.pybpodapi.state_machine.state_machine_runner.StateMachineRunnerError", "utils", "csv", "Reader", "Writer", "date_parser", "parse", "rt_plots", "RTPlots", "screen", "behaviour_window", "BehaviourWindow", "time_utils", "TimeUtils", "video", "Example", "API", "&lt;no title&gt;", "Data Collection", "Assembly Instructions", "List of Parts", "Software Installation", "How to Build the Training Village", "What Is The Training Village?", "The Controller", "The Corridor", "Animal Entry and Exit Logic", "How Does It Work?", "Open Source", "&lt;no title&gt;", "&lt;no title&gt;", "Resources", "Using the GUI", "Receiving and responding to Telegram Alarms", "Animal Procedures", "Getting Started", "Maintenance", "Project Structure", "Configure remote access", "System State Machine", "Create a Telegram Bot", "User Guide"], "titleterms": {"3d": [184, 186], "It": [187, 191], "The": [187, 188, 189], "access": [185, 186, 202, 205], "action": 5, "activ": 6, "alarm": [197, 204, 205], "aluminium": [184, 186], "an": [204, 205], "anim": [187, 190, 198, 205], "api": 180, "arcom": [93, 94], "arduinotyp": 95, "areaact": 7, "assembli": [183, 186], "base_eventnam": 68, "base_messag": 98, "baseeventnam": 69, "basemessag": 99, "behaviour_window": 174, "behaviourwindow": 175, "biweekli": [200, 205], "boot": [196, 205], "bot": [204, 205], "bpod": [37, 51, 52, 82, 85], "bpod_bas": 53, "bpod_com_protocol": 55, "bpod_com_protocol_modul": 57, "bpod_error": [142, 143], "bpod_ev": 70, "bpod_input_channel": 75, "bpod_io": 59, "bpod_modul": [87, 88, 90], "bpod_output_channel": 78, "bpodbas": 54, "bpodcomprotocol": 56, "bpodcomprotocolmodul": 58, "bpoderrorexcept": 143, "bpodio": 60, "bpodmodul": [89, 91], "build": 186, "cameraprotocol": 16, "chang": [185, 186], "channel": [62, 65], "channelnam": 63, "channeltyp": 64, "check": [204, 205], "class": [1, 31, 35, 180], "cnc": [184, 186], "code": [201, 205], "collect": [2, 3, 182], "color": 8, "com": 92, "commun": [185, 186], "compon": [184, 186], "condit": [150, 151], "configur": [196, 202, 205], "consist": [185, 186], "control": [187, 188], "corridor": [187, 189], "creat": [185, 186, 204, 205], "csv": 166, "cycl": 9, "daili": [200, 205], "data": 182, "datat": 10, "datatyp": 96, "date_pars": 169, "debug": 100, "debugmessag": 101, "devic": [36, 180, 185, 186], "doe": [187, 191], "electron": [184, 186], "end_trial": 102, "endtrial": 103, "entri": [187, 190], "enum": 4, "environ": [185, 186], "error": 104, "errormessag": 105, "event": [28, 67], "event_occurr": 106, "event_resum": 108, "eventnam": 71, "eventoccurr": 107, "eventprotocol": 17, "eventresum": 109, "eventsposit": 66, "exampl": 179, "except": [141, 143], "exist": [204, 205], "exit": [187, 190], "extrus": [184, 186], "first": [185, 186, 196, 205], "get": [199, 205], "get_bpod": 40, "get_scal": 43, "get_temp_sensor": 46, "global_count": 152, "global_tim": 154, "globalcount": 153, "globaltim": 155, "gui": [47, 180, 196, 205], "guid": 205, "hardwar": [61, 72, 73, 185, 186], "how": [186, 187, 191], "i": 187, "i2c": [185, 186], "info": 11, "input_channel": 74, "inputnam": 76, "instal": [185, 186], "instruct": [183, 186], "interrog": [197, 205], "launch": [185, 186, 196, 205], "librari": [185, 186], "list": [184, 186], "log": [48, 49], "logic": [187, 190], "machin": [184, 186, 203, 205], "mainten": [200, 205], "make": [204, 205], "messag": 97, "messagepars": 111, "monthli": [200, 205], "name": [185, 186], "need": [185, 186], "non_blockingsocketrec": [80, 82], "non_blockingstreamread": [83, 85], "nonblockingsocketrec": 81, "nonblockingstreamread": 84, "o": [185, 186], "occasion": [200, 205], "open": [187, 192], "other": 180, "output": 29, "output_channel": 77, "outputchannel": 79, "pars": 170, "parser": 110, "part": [184, 186], "pi": [185, 186], "pin": [185, 186], "pip": [185, 186], "prefer": [185, 186], "print": [184, 186], "procedur": [198, 205], "project": [201, 205], "protocol": [15, 132, 144], "pybpod": 38, "pybpodapi": [50, 82, 85, 143, 157, 161, 164, 180], "pybpodprotocol": 18, "python": [185, 186], "raspberri": [185, 186], "reader": 167, "receiv": [197, 205], "receivemessagehead": 134, "recv_msg_head": 133, "remot": [202, 205], "resourc": 195, "respond": [197, 205], "rt_plot": 171, "rtplot": 172, "rule": [185, 186], "scale": [41, 42], "scaleprotocol": 19, "screen": [173, 185, 186], "screenact": 12, "send_msg_head": 135, "sendmessagehead": 136, "servo": [185, 186], "session": [145, 146], "session_info": 112, "sessioninfo": 113, "set": [23, 24, 33, 86, 185, 186], "settings_class": 22, "smaerror": 157, "softcod": 39, "softcode_occurr": 114, "softcodeoccurr": 115, "softwar": [185, 186, 196, 205], "sourc": [187, 192], "start": [199, 205], "state": [13, 203, 205], "state_machin": [148, 157, 161, 164], "state_machine_bas": [156, 157], "state_machine_build": [159, 161], "state_machine_runn": [162, 164], "state_occurr": 116, "state_transit": 118, "statemachin": 149, "statemachinebas": 158, "statemachinebuild": 160, "statemachinebuildererror": 161, "statemachinerunn": 163, "statemachinerunnererror": 164, "stateoccurr": 117, "statetransit": 119, "stderr": 120, "stderr_buff": 137, "stderrbuff": 138, "stderrmessag": 121, "stdout": 122, "stdout_buff": 139, "stdoutbuff": 140, "stdoutmessag": 123, "streamswrapp": 147, "structur": [201, 205], "subject": [25, 26], "superenum": 14, "system": [185, 186, 197, 203, 205], "task": [27, 30, 31, 201, 205], "taskerror": 31, "telegram": [197, 204, 205], "telegrambotprotocol": 20, "temp_sensor": 44, "tempsensor": 45, "tempsensorprotocol": 21, "time": [185, 186], "time_util": 176, "timeutil": 177, "token": [204, 205], "train": [32, 34, 35, 186, 187], "trainingerror": 35, "trial": [124, 125], "trigger": [204, 205], "tube": [184, 186], "uart": [185, 186], "udev": [185, 186], "unexpectedendofstream": [82, 85], "untagged_messag": 126, "untaggedmessag": 127, "updat": [185, 186], "us": [185, 186, 196, 205], "usb": [185, 186], "user": 205, "util": 165, "valu": 128, "valuemessag": 129, "via": [185, 186], "video": 178, "villag": [31, 35, 82, 85, 143, 157, 161, 164, 185, 186, 187], "warn": 130, "warningmessag": 131, "weekli": [200, 205], "what": [185, 186, 187], "work": [187, 191], "writer": 168, "you": [185, 186]}})